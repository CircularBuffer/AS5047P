
AS5047P_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004614  08004614  00022c30  2**0
                  CONTENTS
  4 .ARM          00000008  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800461c  0800461c  00022c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002c30  20000000  08004624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20002c30  08007254  00022c30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d18  08007254  00022d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001637b  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ed  00000000  00000000  00038fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000142d4  00000000  00000000  0003b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000890  00000000  00000000  0004fba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002b30  00000000  00000000  00050430  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00024a60  00000000  00000000  00052f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bb33  00000000  00000000  000779c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d47e8  00000000  00000000  000834f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00157cdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020a0  00000000  00000000  00157d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20002c30 	.word	0x20002c30
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800450c 	.word	0x0800450c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20002c34 	.word	0x20002c34
 80001ec:	0800450c 	.word	0x0800450c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <AS5047P_ReadRegister>:

  AS5047P_Result cmdResponse;
  AS5047P_Result tmpResponse;

  //--- Register with a given address doesn\'t exist
  if(!( (regAddr == AS5047P_NOP ) || (regAddr == AS5047P_ERRFL )  || (regAddr == AS5047P_PROG ) || (regAddr == AS5047P_DIAAGC ) || (regAddr == AS5047P_MAG )\
 8000590:	2919      	cmp	r1, #25
{
 8000592:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(!( (regAddr == AS5047P_NOP ) || (regAddr == AS5047P_ERRFL )  || (regAddr == AS5047P_PROG ) || (regAddr == AS5047P_DIAAGC ) || (regAddr == AS5047P_MAG )\
 8000596:	d90e      	bls.n	80005b6 <AS5047P_ReadRegister+0x26>
 8000598:	f5a1 537f 	sub.w	r3, r1, #16320	; 0x3fc0
 800059c:	3b3c      	subs	r3, #60	; 0x3c
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d90d      	bls.n	80005be <AS5047P_ReadRegister+0x2e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80005a2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f000 80c9 	beq.w	800073e <AS5047P_ReadRegister+0x1ae>

    //--- Device not accessible on SPI line
    if( tmpResponse == 0 )
    {
	AS5047P_HandleError(instance,11);
	return -1;
 80005ac:	f04f 36ff 	mov.w	r6, #4294967295
    }
  }

  return cmdResponse;
}
 80005b0:	4630      	mov	r0, r6
 80005b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(!( (regAddr == AS5047P_NOP ) || (regAddr == AS5047P_ERRFL )  || (regAddr == AS5047P_PROG ) || (regAddr == AS5047P_DIAAGC ) || (regAddr == AS5047P_MAG )\
 80005b6:	4b65      	ldr	r3, [pc, #404]	; (800074c <AS5047P_ReadRegister+0x1bc>)
 80005b8:	40cb      	lsrs	r3, r1
 80005ba:	07dc      	lsls	r4, r3, #31
 80005bc:	d5ec      	bpl.n	8000598 <AS5047P_ReadRegister+0x8>
  frameTx = dataTx & AS5047P_FRAME_DATA;
 80005be:	f3c1 010d 	ubfx	r1, r1, #0, #14
  frameTx |= rw << 14;
 80005c2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  v ^= v >> 1;
 80005c6:	ea81 0351 	eor.w	r3, r1, r1, lsr #1
  v ^= v >> 2;
 80005ca:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80005ce:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80005d2:	f04f 3611 	mov.w	r6, #286331153	; 0x11111111
 80005d6:	fb06 f303 	mul.w	r3, r6, r3
  instance->buffTx = frameTx;
 80005da:	4607      	mov	r7, r0
  frameTx |= AS5047P_CalcParity(frameTx) << 15;
 80005dc:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80005e0:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 80005e4:	4604      	mov	r4, r0
  instance->buffTx = frameTx;
 80005e6:	f827 1f04 	strh.w	r1, [r7, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80005ea:	f100 0802 	add.w	r8, r0, #2
 80005ee:	4615      	mov	r5, r2
 80005f0:	4638      	mov	r0, r7
 80005f2:	4641      	mov	r1, r8
 80005f4:	8822      	ldrh	r2, [r4, #0]
 80005f6:	f001 fcf7 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80005fa:	b368      	cbz	r0, 8000658 <AS5047P_ReadRegister+0xc8>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80005fc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 8097 	beq.w	8000734 <AS5047P_ReadRegister+0x1a4>
  instance->buffTx = frameTx;
 8000606:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800060a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800060c:	8822      	ldrh	r2, [r4, #0]
 800060e:	4641      	mov	r1, r8
 8000610:	4638      	mov	r0, r7
 8000612:	f001 fce9 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000616:	2800      	cmp	r0, #0
 8000618:	d138      	bne.n	800068c <AS5047P_ReadRegister+0xfc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800061a:	8866      	ldrh	r6, [r4, #2]
 800061c:	0472      	lsls	r2, r6, #17
 800061e:	d442      	bmi.n	80006a6 <AS5047P_ReadRegister+0x116>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000620:	f3c6 030e 	ubfx	r3, r6, #0, #15
  v ^= v >> 1;
 8000624:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000628:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800062c:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000630:	f04f 3911 	mov.w	r9, #286331153	; 0x11111111
 8000634:	fb09 f303 	mul.w	r3, r9, r3
  if ( parityCalculated == parityReceived )
 8000638:	f3c3 7300 	ubfx	r3, r3, #28, #1
 800063c:	ebb3 3fd6 	cmp.w	r3, r6, lsr #15
 8000640:	d016      	beq.n	8000670 <AS5047P_ReadRegister+0xe0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000642:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1b0      	bne.n	80005ac <AS5047P_ReadRegister+0x1c>
	instance->error.errorCode = errCode;
 800064a:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 800064c:	4b40      	ldr	r3, [pc, #256]	; (8000750 <AS5047P_ReadRegister+0x1c0>)
	instance->error.errorCode = errCode;
 800064e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000650:	60e3      	str	r3, [r4, #12]
      return -1;
 8000652:	f04f 36ff 	mov.w	r6, #4294967295
 8000656:	e7ab      	b.n	80005b0 <AS5047P_ReadRegister+0x20>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000658:	8862      	ldrh	r2, [r4, #2]
 800065a:	0451      	lsls	r1, r2, #17
 800065c:	d531      	bpl.n	80006c2 <AS5047P_ReadRegister+0x132>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800065e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1cf      	bne.n	8000606 <AS5047P_ReadRegister+0x76>
	instance->error.errorCode = errCode;
 8000666:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8000668:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <AS5047P_ReadRegister+0x1c4>)
	instance->error.errorCode = errCode;
 800066a:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800066c:	60e3      	str	r3, [r4, #12]
 800066e:	e7ca      	b.n	8000606 <AS5047P_ReadRegister+0x76>
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 8000670:	f3c6 060d 	ubfx	r6, r6, #0, #14
  if( devReachCheck )
 8000674:	2d00      	cmp	r5, #0
 8000676:	d09b      	beq.n	80005b0 <AS5047P_ReadRegister+0x20>
  instance->buffTx = frameTx;
 8000678:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800067c:	4641      	mov	r1, r8
 800067e:	4638      	mov	r0, r7
  instance->buffTx = frameTx;
 8000680:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000682:	8822      	ldrh	r2, [r4, #0]
 8000684:	f001 fcb0 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000688:	2800      	cmp	r0, #0
 800068a:	d032      	beq.n	80006f2 <AS5047P_ReadRegister+0x162>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800068c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d18b      	bne.n	80005ac <AS5047P_ReadRegister+0x1c>
	instance->error.errorCode = errCode;
 8000694:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000696:	4b30      	ldr	r3, [pc, #192]	; (8000758 <AS5047P_ReadRegister+0x1c8>)
	instance->error.errorCode = errCode;
 8000698:	8122      	strh	r2, [r4, #8]
      return -1;
 800069a:	f04f 36ff 	mov.w	r6, #4294967295
	    instance->error.msg = errMesage[errCode];
 800069e:	60e3      	str	r3, [r4, #12]
}
 80006a0:	4630      	mov	r0, r6
 80006a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80006a6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f47f af7e 	bne.w	80005ac <AS5047P_ReadRegister+0x1c>
	instance->error.errorCode = errCode;
 80006b0:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <AS5047P_ReadRegister+0x1c4>)
	instance->error.errorCode = errCode;
 80006b4:	8122      	strh	r2, [r4, #8]
      return -1;
 80006b6:	f04f 36ff 	mov.w	r6, #4294967295
	    instance->error.msg = errMesage[errCode];
 80006ba:	60e3      	str	r3, [r4, #12]
}
 80006bc:	4630      	mov	r0, r6
 80006be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80006c2:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80006c6:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80006ca:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80006ce:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80006d2:	fb06 f603 	mul.w	r6, r6, r3
  if ( parityCalculated == parityReceived )
 80006d6:	f3c6 7600 	ubfx	r6, r6, #28, #1
 80006da:	ebb6 3fd2 	cmp.w	r6, r2, lsr #15
 80006de:	d092      	beq.n	8000606 <AS5047P_ReadRegister+0x76>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80006e0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d18e      	bne.n	8000606 <AS5047P_ReadRegister+0x76>
	instance->error.errorCode = errCode;
 80006e8:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <AS5047P_ReadRegister+0x1c0>)
	instance->error.errorCode = errCode;
 80006ec:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80006ee:	60e3      	str	r3, [r4, #12]
 80006f0:	e789      	b.n	8000606 <AS5047P_ReadRegister+0x76>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80006f2:	8862      	ldrh	r2, [r4, #2]
 80006f4:	0453      	lsls	r3, r2, #17
 80006f6:	d4d6      	bmi.n	80006a6 <AS5047P_ReadRegister+0x116>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80006f8:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80006fc:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000700:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000704:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000708:	fb09 f903 	mul.w	r9, r9, r3
  if ( parityCalculated == parityReceived )
 800070c:	f3c9 7900 	ubfx	r9, r9, #28, #1
 8000710:	ebb9 3fd2 	cmp.w	r9, r2, lsr #15
 8000714:	d195      	bne.n	8000642 <AS5047P_ReadRegister+0xb2>
    if( tmpResponse == 0 )
 8000716:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800071a:	2a00      	cmp	r2, #0
 800071c:	f47f af48 	bne.w	80005b0 <AS5047P_ReadRegister+0x20>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000720:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f47f af41 	bne.w	80005ac <AS5047P_ReadRegister+0x1c>
	instance->error.errorCode = errCode;
 800072a:	220b      	movs	r2, #11
	    instance->error.msg = errMesage[errCode];
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <AS5047P_ReadRegister+0x1cc>)
	instance->error.errorCode = errCode;
 800072e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000730:	60e3      	str	r3, [r4, #12]
 8000732:	e73b      	b.n	80005ac <AS5047P_ReadRegister+0x1c>
	instance->error.errorCode = errCode;
 8000734:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <AS5047P_ReadRegister+0x1c8>)
	instance->error.errorCode = errCode;
 8000738:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800073a:	60e3      	str	r3, [r4, #12]
 800073c:	e763      	b.n	8000606 <AS5047P_ReadRegister+0x76>
	instance->error.errorCode = errCode;
 800073e:	220a      	movs	r2, #10
	    instance->error.msg = errMesage[errCode];
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <AS5047P_ReadRegister+0x1d0>)
	instance->error.errorCode = errCode;
 8000742:	8102      	strh	r2, [r0, #8]
	    instance->error.msg = errMesage[errCode];
 8000744:	60c3      	str	r3, [r0, #12]
      return -1;
 8000746:	f04f 36ff 	mov.w	r6, #4294967295
 800074a:	e731      	b.n	80005b0 <AS5047P_ReadRegister+0x20>
 800074c:	03c0000b 	.word	0x03c0000b
 8000750:	200000f0 	.word	0x200000f0
 8000754:	200000a0 	.word	0x200000a0
 8000758:	20000050 	.word	0x20000050
 800075c:	20000370 	.word	0x20000370
 8000760:	20000320 	.word	0x20000320

08000764 <AS5047P_WriteRegister>:
 *
 *	Generates error codes in range: [20-29]
 *
 ************************************************************************************/
AS5047P_ErrCode AS5047P_WriteRegister(AS5047P_Instance * instance, uint16_t regAddr, AS5047P_Result newRegContent, _Bool writeVerif, _Bool devReachCheck )
{
 8000764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    AS5047P_Result tmpResponse;
    AS5047P_Result curRegContent;

    //--- Register with a given address doesn\'t have write access or doesn\'t exist
    if(!( (regAddr == AS5047P_PROG ) || (regAddr == AS5047P_ZPOSL )  || (regAddr == AS5047P_ZPOSM ) || (regAddr == AS5047P_SETTINGS1 ) || (regAddr == AS5047P_SETTINGS2 )) )
 8000768:	2903      	cmp	r1, #3
{
 800076a:	460e      	mov	r6, r1
 800076c:	4604      	mov	r4, r0
 800076e:	4690      	mov	r8, r2
 8000770:	4699      	mov	r9, r3
 8000772:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if(!( (regAddr == AS5047P_PROG ) || (regAddr == AS5047P_ZPOSL )  || (regAddr == AS5047P_ZPOSM ) || (regAddr == AS5047P_SETTINGS1 ) || (regAddr == AS5047P_SETTINGS2 )) )
 8000776:	d00c      	beq.n	8000792 <AS5047P_WriteRegister+0x2e>
 8000778:	f1a1 0316 	sub.w	r3, r1, #22
 800077c:	2b03      	cmp	r3, #3
 800077e:	d908      	bls.n	8000792 <AS5047P_WriteRegister+0x2e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000780:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	f000 8104 	beq.w	8000992 <AS5047P_WriteRegister+0x22e>

      //--- Device not accessible on SPI line
      if( tmpResponse == 0 )
      {
	  AS5047P_HandleError(instance,22);
	  return -1;
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }

    return 0;
}
 800078e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  frameTx = dataTx & AS5047P_FRAME_DATA;
 8000792:	f3c6 020d 	ubfx	r2, r6, #0, #14
  v ^= v >> 1;
 8000796:	ea82 0352 	eor.w	r3, r2, r2, lsr #1
  v ^= v >> 2;
 800079a:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800079e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80007a2:	f04f 3b11 	mov.w	fp, #286331153	; 0x11111111
 80007a6:	fb0b f303 	mul.w	r3, fp, r3
  instance->buffTx = frameTx;
 80007aa:	4625      	mov	r5, r4
  frameTx |= AS5047P_CalcParity(frameTx) << 15;
 80007ac:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80007b0:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
  instance->buffTx = frameTx;
 80007b4:	f825 3f04 	strh.w	r3, [r5, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80007b8:	1ca7      	adds	r7, r4, #2
 80007ba:	4628      	mov	r0, r5
 80007bc:	4639      	mov	r1, r7
 80007be:	8822      	ldrh	r2, [r4, #0]
 80007c0:	f001 fc12 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d039      	beq.n	800083c <AS5047P_WriteRegister+0xd8>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80007c8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	f000 80db 	beq.w	8000988 <AS5047P_WriteRegister+0x224>
  frameTx = dataTx & AS5047P_FRAME_DATA;
 80007d2:	f3c8 020d 	ubfx	r2, r8, #0, #14
  v ^= v >> 1;
 80007d6:	ea82 0352 	eor.w	r3, r2, r2, lsr #1
  v ^= v >> 2;
 80007da:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80007de:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80007e2:	f04f 3b11 	mov.w	fp, #286331153	; 0x11111111
 80007e6:	fb0b f303 	mul.w	r3, fp, r3
  frameTx |= AS5047P_CalcParity(frameTx) << 15;
 80007ea:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80007ee:	ea42 33c3 	orr.w	r3, r2, r3, lsl #15
  instance->buffTx = frameTx;
 80007f2:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80007f4:	8822      	ldrh	r2, [r4, #0]
 80007f6:	4639      	mov	r1, r7
 80007f8:	4628      	mov	r0, r5
 80007fa:	f001 fbf5 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80007fe:	2800      	cmp	r0, #0
 8000800:	d13b      	bne.n	800087a <AS5047P_WriteRegister+0x116>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000802:	8862      	ldrh	r2, [r4, #2]
 8000804:	0451      	lsls	r1, r2, #17
 8000806:	d444      	bmi.n	8000892 <AS5047P_WriteRegister+0x12e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000808:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 800080c:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000810:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000814:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000818:	fb0b f303 	mul.w	r3, fp, r3
  if ( parityCalculated == parityReceived )
 800081c:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000820:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8000824:	d016      	beq.n	8000854 <AS5047P_WriteRegister+0xf0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000826:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1ad      	bne.n	800078a <AS5047P_WriteRegister+0x26>
	instance->error.errorCode = errCode;
 800082e:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8000830:	4b5b      	ldr	r3, [pc, #364]	; (80009a0 <AS5047P_WriteRegister+0x23c>)
	instance->error.errorCode = errCode;
 8000832:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000834:	60e3      	str	r3, [r4, #12]
	return -1;
 8000836:	f04f 30ff 	mov.w	r0, #4294967295
 800083a:	e7a8      	b.n	800078e <AS5047P_WriteRegister+0x2a>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800083c:	8862      	ldrh	r2, [r4, #2]
 800083e:	0450      	lsls	r0, r2, #17
 8000840:	d560      	bpl.n	8000904 <AS5047P_WriteRegister+0x1a0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000842:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1c3      	bne.n	80007d2 <AS5047P_WriteRegister+0x6e>
	instance->error.errorCode = errCode;
 800084a:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 800084c:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <AS5047P_WriteRegister+0x240>)
	instance->error.errorCode = errCode;
 800084e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000850:	60e3      	str	r3, [r4, #12]
 8000852:	e7be      	b.n	80007d2 <AS5047P_WriteRegister+0x6e>
    if(writeVerif)
 8000854:	f1b9 0f00 	cmp.w	r9, #0
 8000858:	d105      	bne.n	8000866 <AS5047P_WriteRegister+0x102>
    if( devReachCheck )
 800085a:	f1ba 0f00 	cmp.w	sl, #0
 800085e:	d125      	bne.n	80008ac <AS5047P_WriteRegister+0x148>
    return 0;
 8000860:	2000      	movs	r0, #0
}
 8000862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  instance->buffTx = frameTx;
 8000866:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800086a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800086c:	8822      	ldrh	r2, [r4, #0]
 800086e:	4639      	mov	r1, r7
 8000870:	4628      	mov	r0, r5
 8000872:	f001 fbb9 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000876:	2800      	cmp	r0, #0
 8000878:	d05e      	beq.n	8000938 <AS5047P_WriteRegister+0x1d4>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800087a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d183      	bne.n	800078a <AS5047P_WriteRegister+0x26>
	instance->error.errorCode = errCode;
 8000882:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <AS5047P_WriteRegister+0x244>)
	instance->error.errorCode = errCode;
 8000886:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000888:	60e3      	str	r3, [r4, #12]
	return -1;
 800088a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800088e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000892:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f47f af77 	bne.w	800078a <AS5047P_WriteRegister+0x26>
	instance->error.errorCode = errCode;
 800089c:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 800089e:	4b41      	ldr	r3, [pc, #260]	; (80009a4 <AS5047P_WriteRegister+0x240>)
	instance->error.errorCode = errCode;
 80008a0:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80008a2:	60e3      	str	r3, [r4, #12]
	return -1;
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80008a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  instance->buffTx = frameTx;
 80008ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80008b0:	4639      	mov	r1, r7
 80008b2:	4628      	mov	r0, r5
  instance->buffTx = frameTx;
 80008b4:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80008b6:	8822      	ldrh	r2, [r4, #0]
 80008b8:	f001 fb96 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80008bc:	2800      	cmp	r0, #0
 80008be:	d1dc      	bne.n	800087a <AS5047P_WriteRegister+0x116>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80008c0:	8862      	ldrh	r2, [r4, #2]
 80008c2:	0453      	lsls	r3, r2, #17
 80008c4:	d4e5      	bmi.n	8000892 <AS5047P_WriteRegister+0x12e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80008c6:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80008ca:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80008ce:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80008d2:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80008d6:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 80008da:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 80008de:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80008e2:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 80008e6:	d19e      	bne.n	8000826 <AS5047P_WriteRegister+0xc2>
      if( tmpResponse == 0 )
 80008e8:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d1b7      	bne.n	8000860 <AS5047P_WriteRegister+0xfc>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80008f0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f47f af48 	bne.w	800078a <AS5047P_WriteRegister+0x26>
	instance->error.errorCode = errCode;
 80008fa:	2216      	movs	r2, #22
	    instance->error.msg = errMesage[errCode];
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <AS5047P_WriteRegister+0x248>)
	instance->error.errorCode = errCode;
 80008fe:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000900:	60e3      	str	r3, [r4, #12]
 8000902:	e742      	b.n	800078a <AS5047P_WriteRegister+0x26>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000904:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8000908:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 800090c:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000910:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000914:	fb0b fb03 	mul.w	fp, fp, r3
  if ( parityCalculated == parityReceived )
 8000918:	f3cb 7b00 	ubfx	fp, fp, #28, #1
 800091c:	ebbb 3fd2 	cmp.w	fp, r2, lsr #15
 8000920:	f43f af57 	beq.w	80007d2 <AS5047P_WriteRegister+0x6e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000924:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	f47f af52 	bne.w	80007d2 <AS5047P_WriteRegister+0x6e>
	instance->error.errorCode = errCode;
 800092e:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <AS5047P_WriteRegister+0x23c>)
	instance->error.errorCode = errCode;
 8000932:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000934:	60e3      	str	r3, [r4, #12]
 8000936:	e74c      	b.n	80007d2 <AS5047P_WriteRegister+0x6e>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000938:	8863      	ldrh	r3, [r4, #2]
 800093a:	045a      	lsls	r2, r3, #17
 800093c:	d4a9      	bmi.n	8000892 <AS5047P_WriteRegister+0x12e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800093e:	f3c3 020e 	ubfx	r2, r3, #0, #15
  v ^= v >> 1;
 8000942:	ea82 0252 	eor.w	r2, r2, r2, lsr #1
  v ^= v >> 2;
 8000946:	ea82 0292 	eor.w	r2, r2, r2, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800094a:	f002 3211 	and.w	r2, r2, #286331153	; 0x11111111
 800094e:	fb0b fb02 	mul.w	fp, fp, r2
  if ( parityCalculated == parityReceived )
 8000952:	f3cb 7b00 	ubfx	fp, fp, #28, #1
 8000956:	ebbb 3fd3 	cmp.w	fp, r3, lsr #15
 800095a:	f47f af64 	bne.w	8000826 <AS5047P_WriteRegister+0xc2>
      if(regAddr == AS5047P_SETTINGS1 )
 800095e:	2e18      	cmp	r6, #24
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 8000960:	f3c3 030d 	ubfx	r3, r3, #0, #14
	  newRegContent = newRegContent | 0x0001;
 8000964:	bf08      	it	eq
 8000966:	f048 0801 	orreq.w	r8, r8, #1
      if ( curRegContent != newRegContent )
 800096a:	4598      	cmp	r8, r3
 800096c:	f43f af75 	beq.w	800085a <AS5047P_WriteRegister+0xf6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000970:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000974:	2b00      	cmp	r3, #0
 8000976:	f47f af08 	bne.w	800078a <AS5047P_WriteRegister+0x26>
	instance->error.errorCode = errCode;
 800097a:	2215      	movs	r2, #21
	    instance->error.msg = errMesage[errCode];
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <AS5047P_WriteRegister+0x24c>)
	instance->error.errorCode = errCode;
 800097e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000980:	60e3      	str	r3, [r4, #12]
	  return -1;
 8000982:	f04f 30ff 	mov.w	r0, #4294967295
 8000986:	e702      	b.n	800078e <AS5047P_WriteRegister+0x2a>
	instance->error.errorCode = errCode;
 8000988:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <AS5047P_WriteRegister+0x244>)
	instance->error.errorCode = errCode;
 800098c:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800098e:	60e3      	str	r3, [r4, #12]
 8000990:	e71f      	b.n	80007d2 <AS5047P_WriteRegister+0x6e>
	instance->error.errorCode = errCode;
 8000992:	2214      	movs	r2, #20
	    instance->error.msg = errMesage[errCode];
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <AS5047P_WriteRegister+0x250>)
	instance->error.errorCode = errCode;
 8000996:	8102      	strh	r2, [r0, #8]
	    instance->error.msg = errMesage[errCode];
 8000998:	60c3      	str	r3, [r0, #12]
	return -1;
 800099a:	f04f 30ff 	mov.w	r0, #4294967295
 800099e:	e6f6      	b.n	800078e <AS5047P_WriteRegister+0x2a>
 80009a0:	200000f0 	.word	0x200000f0
 80009a4:	200000a0 	.word	0x200000a0
 80009a8:	20000050 	.word	0x20000050
 80009ac:	200006e0 	.word	0x200006e0
 80009b0:	20000690 	.word	0x20000690
 80009b4:	20000640 	.word	0x20000640

080009b8 <AS5047P_Init>:
 *	Generates error codes in range: [30-39]
 *
 ************************************************************************************/

AS5047P_ErrCode AS5047P_Init(AS5047P_Instance * instance, uint16_t id)
{
 80009b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AS5047P_Result readRegErrCode;
  AS5047P_Result halInitErrCode;

  instance->zeroPosCalibrated = false;
 80009bc:	2300      	movs	r3, #0
  instance->initialized = true;
 80009be:	f04f 0801 	mov.w	r8, #1
{
 80009c2:	460d      	mov	r5, r1
  instance->id = id;
 80009c4:	8001      	strh	r1, [r0, #0]
  instance->zeroPosCalibrated = false;
 80009c6:	7183      	strb	r3, [r0, #6]
  instance->initialized = true;
 80009c8:	f880 8007 	strb.w	r8, [r0, #7]
{
 80009cc:	4604      	mov	r4, r0
  /************************************************************************************
   *
   *	AS5047P needs 10ms after power up to recover
   *
   ***********************************************************************************/
  AS5047P_HAL_Delay_ms(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f001 fae4 	bl	8001f9c <AS5047P_HAL_Delay_ms>

  //--- Init HAL functions (SPI, etc.)
  halInitErrCode = AS5047P_HAL_Init(id);
 80009d4:	4628      	mov	r0, r5
 80009d6:	f001 fae3 	bl	8001fa0 <AS5047P_HAL_Init>

  //--- Low level hardware (SPI) init failed
  if( halInitErrCode != 0)
 80009da:	b170      	cbz	r0, 80009fa <AS5047P_Init+0x42>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80009dc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80009e0:	b11b      	cbz	r3, 80009ea <AS5047P_Init+0x32>

  //--- Cant acknowledge the error in ERRFL register in init routine
  if( readRegErrCode > 0)
  {
      AS5047P_HandleError(instance,31);
      return -1;
 80009e2:	f04f 30ff 	mov.w	r0, #4294967295

  AS5047P_ClearError(instance);


  return 0;
}
 80009e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	instance->error.errorCode = errCode;
 80009ea:	221e      	movs	r2, #30
	    instance->error.msg = errMesage[errCode];
 80009ec:	4bb4      	ldr	r3, [pc, #720]	; (8000cc0 <AS5047P_Init+0x308>)
	instance->error.errorCode = errCode;
 80009ee:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80009f0:	60e3      	str	r3, [r4, #12]
      return -1;
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80009f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  instance->buffTx = frameTx;
 80009fa:	4626      	mov	r6, r4
 80009fc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a00:	f826 3f04 	strh.w	r3, [r6, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000a04:	1ca7      	adds	r7, r4, #2
 8000a06:	4630      	mov	r0, r6
 8000a08:	4639      	mov	r1, r7
 8000a0a:	8822      	ldrh	r2, [r4, #0]
 8000a0c:	f001 faec 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d14f      	bne.n	8000ab4 <AS5047P_Init+0xfc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000a14:	8862      	ldrh	r2, [r4, #2]
 8000a16:	0453      	lsls	r3, r2, #17
 8000a18:	f140 80b6 	bpl.w	8000b88 <AS5047P_Init+0x1d0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000a1c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8168 	beq.w	8000cf6 <AS5047P_Init+0x33e>
  instance->buffTx = frameTx;
 8000a26:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a2a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000a2c:	8822      	ldrh	r2, [r4, #0]
 8000a2e:	4639      	mov	r1, r7
 8000a30:	4630      	mov	r0, r6
 8000a32:	f001 fad9 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000a36:	2800      	cmp	r0, #0
 8000a38:	f000 808c 	beq.w	8000b54 <AS5047P_Init+0x19c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000a3c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000a40:	8822      	ldrh	r2, [r4, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 812c 	beq.w	8000ca0 <AS5047P_Init+0x2e8>
  instance->buffTx = frameTx;
 8000a48:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a4c:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000a4e:	4639      	mov	r1, r7
 8000a50:	4630      	mov	r0, r6
 8000a52:	f001 fac9 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d070      	beq.n	8000b3c <AS5047P_Init+0x184>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000a5a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 8123 	beq.w	8000caa <AS5047P_Init+0x2f2>
  instance->buffTx = frameTx;
 8000a64:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000a68:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000a6a:	8822      	ldrh	r2, [r4, #0]
 8000a6c:	4639      	mov	r1, r7
 8000a6e:	4630      	mov	r0, r6
 8000a70:	f001 faba 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000a74:	bb38      	cbnz	r0, 8000ac6 <AS5047P_Init+0x10e>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000a76:	8865      	ldrh	r5, [r4, #2]
 8000a78:	046a      	lsls	r2, r5, #17
 8000a7a:	d479      	bmi.n	8000b70 <AS5047P_Init+0x1b8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000a7c:	f3c5 030e 	ubfx	r3, r5, #0, #15
  v ^= v >> 1;
 8000a80:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000a84:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000a88:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000a8c:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8000a90:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8000a94:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000a98:	ebb3 3fd5 	cmp.w	r3, r5, lsr #15
 8000a9c:	d01f      	beq.n	8000ade <AS5047P_Init+0x126>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000a9e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d19d      	bne.n	80009e2 <AS5047P_Init+0x2a>
	instance->error.errorCode = errCode;
 8000aa6:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8000aa8:	4b86      	ldr	r3, [pc, #536]	; (8000cc4 <AS5047P_Init+0x30c>)
	instance->error.errorCode = errCode;
 8000aaa:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000aac:	60e3      	str	r3, [r4, #12]
      return -1;
 8000aae:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab2:	e798      	b.n	80009e6 <AS5047P_Init+0x2e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000ab4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1b4      	bne.n	8000a26 <AS5047P_Init+0x6e>
	    instance->error.msg = errMesage[errCode];
 8000abc:	4b82      	ldr	r3, [pc, #520]	; (8000cc8 <AS5047P_Init+0x310>)
	instance->error.errorCode = errCode;
 8000abe:	f8a4 8008 	strh.w	r8, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000ac2:	60e3      	str	r3, [r4, #12]
 8000ac4:	e7af      	b.n	8000a26 <AS5047P_Init+0x6e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000ac6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d189      	bne.n	80009e2 <AS5047P_Init+0x2a>
	instance->error.errorCode = errCode;
 8000ace:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000ad0:	4b7d      	ldr	r3, [pc, #500]	; (8000cc8 <AS5047P_Init+0x310>)
	instance->error.errorCode = errCode;
 8000ad2:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000ad4:	60e3      	str	r3, [r4, #12]
      return -1;
 8000ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  instance->buffTx = frameTx;
 8000ade:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000ae2:	4639      	mov	r1, r7
 8000ae4:	4630      	mov	r0, r6
  instance->buffTx = frameTx;
 8000ae6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000ae8:	8822      	ldrh	r2, [r4, #0]
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 8000aea:	f3c5 050d 	ubfx	r5, r5, #0, #14
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000aee:	f001 fa7b 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000af2:	2800      	cmp	r0, #0
 8000af4:	d1e7      	bne.n	8000ac6 <AS5047P_Init+0x10e>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000af6:	8862      	ldrh	r2, [r4, #2]
 8000af8:	0453      	lsls	r3, r2, #17
 8000afa:	d439      	bmi.n	8000b70 <AS5047P_Init+0x1b8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000afc:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8000b00:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000b04:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000b08:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000b0c:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8000b10:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000b14:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8000b18:	d1c1      	bne.n	8000a9e <AS5047P_Init+0xe6>
    if( tmpResponse == 0 )
 8000b1a:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	f040 80d8 	bne.w	8000cd4 <AS5047P_Init+0x31c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000b24:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f47f af5a 	bne.w	80009e2 <AS5047P_Init+0x2a>
	instance->error.errorCode = errCode;
 8000b2e:	220b      	movs	r2, #11
	    instance->error.msg = errMesage[errCode];
 8000b30:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <AS5047P_Init+0x314>)
	instance->error.errorCode = errCode;
 8000b32:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000b34:	60e3      	str	r3, [r4, #12]
      return -1;
 8000b36:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3a:	e754      	b.n	80009e6 <AS5047P_Init+0x2e>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000b3c:	8862      	ldrh	r2, [r4, #2]
 8000b3e:	0451      	lsls	r1, r2, #17
 8000b40:	d53e      	bpl.n	8000bc0 <AS5047P_Init+0x208>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000b42:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d18c      	bne.n	8000a64 <AS5047P_Init+0xac>
	instance->error.errorCode = errCode;
 8000b4a:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8000b4c:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <AS5047P_Init+0x318>)
	instance->error.errorCode = errCode;
 8000b4e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000b50:	60e3      	str	r3, [r4, #12]
 8000b52:	e787      	b.n	8000a64 <AS5047P_Init+0xac>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000b54:	8861      	ldrh	r1, [r4, #2]
 8000b56:	8822      	ldrh	r2, [r4, #0]
 8000b58:	044d      	lsls	r5, r1, #17
 8000b5a:	d54d      	bpl.n	8000bf8 <AS5047P_Init+0x240>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000b5c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f47f af71 	bne.w	8000a48 <AS5047P_Init+0x90>
	instance->error.errorCode = errCode;
 8000b66:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 8000b68:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <AS5047P_Init+0x318>)
	instance->error.errorCode = errCode;
 8000b6a:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000b6c:	60e3      	str	r3, [r4, #12]
 8000b6e:	e76b      	b.n	8000a48 <AS5047P_Init+0x90>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000b70:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f47f af34 	bne.w	80009e2 <AS5047P_Init+0x2a>
	instance->error.errorCode = errCode;
 8000b7a:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8000b7c:	4b54      	ldr	r3, [pc, #336]	; (8000cd0 <AS5047P_Init+0x318>)
	instance->error.errorCode = errCode;
 8000b7e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000b80:	60e3      	str	r3, [r4, #12]
      return -1;
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	e72e      	b.n	80009e6 <AS5047P_Init+0x2e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000b88:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8000b8c:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000b90:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000b94:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000b98:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8000b9c:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8000ba0:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000ba4:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8000ba8:	f43f af3d 	beq.w	8000a26 <AS5047P_Init+0x6e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000bac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f47f af38 	bne.w	8000a26 <AS5047P_Init+0x6e>
	instance->error.errorCode = errCode;
 8000bb6:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8000bb8:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <AS5047P_Init+0x30c>)
	instance->error.errorCode = errCode;
 8000bba:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000bbc:	60e3      	str	r3, [r4, #12]
 8000bbe:	e732      	b.n	8000a26 <AS5047P_Init+0x6e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000bc0:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8000bc4:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000bc8:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000bcc:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000bd0:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8000bd4:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8000bd8:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000bdc:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8000be0:	f43f af40 	beq.w	8000a64 <AS5047P_Init+0xac>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000be4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f47f af3b 	bne.w	8000a64 <AS5047P_Init+0xac>
	instance->error.errorCode = errCode;
 8000bee:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8000bf0:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <AS5047P_Init+0x30c>)
	instance->error.errorCode = errCode;
 8000bf2:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000bf4:	60e3      	str	r3, [r4, #12]
 8000bf6:	e735      	b.n	8000a64 <AS5047P_Init+0xac>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000bf8:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000bfc:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000c00:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000c04:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000c08:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
 8000c0c:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 8000c10:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000c14:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000c18:	d009      	beq.n	8000c2e <AS5047P_Init+0x276>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000c1a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f af12 	bne.w	8000a48 <AS5047P_Init+0x90>
	instance->error.errorCode = errCode;
 8000c24:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <AS5047P_Init+0x30c>)
	instance->error.errorCode = errCode;
 8000c28:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000c2a:	60e3      	str	r3, [r4, #12]
 8000c2c:	e70c      	b.n	8000a48 <AS5047P_Init+0x90>
  instance->buffTx = frameTx;
 8000c2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c32:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000c34:	4639      	mov	r1, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	f001 f9d6 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000c3c:	b128      	cbz	r0, 8000c4a <AS5047P_Init+0x292>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000c3e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d036      	beq.n	8000cb4 <AS5047P_Init+0x2fc>
 8000c46:	8822      	ldrh	r2, [r4, #0]
 8000c48:	e6fe      	b.n	8000a48 <AS5047P_Init+0x90>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000c4a:	8861      	ldrh	r1, [r4, #2]
 8000c4c:	0448      	lsls	r0, r1, #17
 8000c4e:	d508      	bpl.n	8000c62 <AS5047P_Init+0x2aa>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000c50:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f6      	bne.n	8000c46 <AS5047P_Init+0x28e>
	instance->error.errorCode = errCode;
 8000c58:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <AS5047P_Init+0x318>)
	instance->error.errorCode = errCode;
 8000c5c:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000c5e:	60e3      	str	r3, [r4, #12]
 8000c60:	e7f1      	b.n	8000c46 <AS5047P_Init+0x28e>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000c62:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000c66:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000c6a:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000c6e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000c72:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 8000c76:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000c7a:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000c7e:	8822      	ldrh	r2, [r4, #0]
 8000c80:	d1cb      	bne.n	8000c1a <AS5047P_Init+0x262>
    if( tmpResponse == 0 )
 8000c82:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000c86:	2900      	cmp	r1, #0
 8000c88:	f47f aede 	bne.w	8000a48 <AS5047P_Init+0x90>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000c8c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f aed9 	bne.w	8000a48 <AS5047P_Init+0x90>
	instance->error.errorCode = errCode;
 8000c96:	210b      	movs	r1, #11
	    instance->error.msg = errMesage[errCode];
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <AS5047P_Init+0x314>)
	instance->error.errorCode = errCode;
 8000c9a:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000c9c:	60e3      	str	r3, [r4, #12]
 8000c9e:	e6d3      	b.n	8000a48 <AS5047P_Init+0x90>
	instance->error.errorCode = errCode;
 8000ca0:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <AS5047P_Init+0x310>)
	instance->error.errorCode = errCode;
 8000ca4:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000ca6:	60e3      	str	r3, [r4, #12]
 8000ca8:	e6ce      	b.n	8000a48 <AS5047P_Init+0x90>
	instance->error.errorCode = errCode;
 8000caa:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <AS5047P_Init+0x310>)
	instance->error.errorCode = errCode;
 8000cae:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000cb0:	60e3      	str	r3, [r4, #12]
 8000cb2:	e6d7      	b.n	8000a64 <AS5047P_Init+0xac>
	instance->error.errorCode = errCode;
 8000cb4:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <AS5047P_Init+0x310>)
	instance->error.errorCode = errCode;
 8000cb8:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000cba:	60e3      	str	r3, [r4, #12]
 8000cbc:	8822      	ldrh	r2, [r4, #0]
 8000cbe:	e6c3      	b.n	8000a48 <AS5047P_Init+0x90>
 8000cc0:	20000960 	.word	0x20000960
 8000cc4:	200000f0 	.word	0x200000f0
 8000cc8:	20000050 	.word	0x20000050
 8000ccc:	20000370 	.word	0x20000370
 8000cd0:	200000a0 	.word	0x200000a0
  if( readRegErrCode > 0)
 8000cd4:	b14d      	cbz	r5, 8000cea <AS5047P_Init+0x332>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000cd6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae81 	bne.w	80009e2 <AS5047P_Init+0x2a>
	instance->error.errorCode = errCode;
 8000ce0:	221f      	movs	r2, #31
	    instance->error.msg = errMesage[errCode];
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <AS5047P_Init+0x348>)
	instance->error.errorCode = errCode;
 8000ce4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000ce6:	60e3      	str	r3, [r4, #12]
 8000ce8:	e67b      	b.n	80009e2 <AS5047P_Init+0x2a>
  instance->error.msg = errMesage[0];
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <AS5047P_Init+0x34c>)
  instance->error.errorCode = 0;
 8000cec:	8125      	strh	r5, [r4, #8]
  return 0;
 8000cee:	4628      	mov	r0, r5
  instance->error.msg = errMesage[0];
 8000cf0:	60e3      	str	r3, [r4, #12]
}
 8000cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	instance->error.errorCode = errCode;
 8000cf6:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <AS5047P_Init+0x350>)
	instance->error.errorCode = errCode;
 8000cfa:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000cfc:	60e3      	str	r3, [r4, #12]
 8000cfe:	e692      	b.n	8000a26 <AS5047P_Init+0x6e>
 8000d00:	200009b0 	.word	0x200009b0
 8000d04:	20000000 	.word	0x20000000
 8000d08:	200000a0 	.word	0x200000a0

08000d0c <AS5047P_SetFactorySettings>:
 ************************************************************************************/
AS5047P_ErrCode AS5047P_SetFactorySettings(AS5047P_Instance * instance)
{
    AS5047P_ErrCode errCode = 0;

    if(instance->initialized)
 8000d0c:	79c3      	ldrb	r3, [r0, #7]
 8000d0e:	b963      	cbnz	r3, 8000d2a <AS5047P_SetFactorySettings+0x1e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000d10:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8000d14:	b113      	cbz	r3, 8000d1c <AS5047P_SetFactorySettings+0x10>
	errCode |= AS5047P_WriteRegister(instance, AS5047P_ZPOSM, 0x000, AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);

        if( errCode != 0)
        {

  	  return -1;
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
        AS5047P_HandleError(instance,40);
        return -1;
    }

    return 0;
}
 8000d1a:	4770      	bx	lr
	instance->error.errorCode = errCode;
 8000d1c:	2228      	movs	r2, #40	; 0x28
	    instance->error.msg = errMesage[errCode];
 8000d1e:	4bb0      	ldr	r3, [pc, #704]	; (8000fe0 <AS5047P_SetFactorySettings+0x2d4>)
	instance->error.errorCode = errCode;
 8000d20:	8102      	strh	r2, [r0, #8]
	    instance->error.msg = errMesage[errCode];
 8000d22:	60c3      	str	r3, [r0, #12]
        return -1;
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	4770      	bx	lr
{
 8000d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  instance->buffTx = frameTx;
 8000d2e:	4606      	mov	r6, r0
 8000d30:	2318      	movs	r3, #24
 8000d32:	4604      	mov	r4, r0
 8000d34:	f826 3f04 	strh.w	r3, [r6, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000d38:	1c87      	adds	r7, r0, #2
 8000d3a:	4639      	mov	r1, r7
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	8822      	ldrh	r2, [r4, #0]
 8000d40:	f001 f952 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f040 80d4 	bne.w	8000ef2 <AS5047P_SetFactorySettings+0x1e6>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000d4a:	8862      	ldrh	r2, [r4, #2]
 8000d4c:	0455      	lsls	r5, r2, #17
 8000d4e:	f140 8298 	bpl.w	8001282 <AS5047P_SetFactorySettings+0x576>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000d52:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 838d 	beq.w	8001476 <AS5047P_SetFactorySettings+0x76a>
  instance->buffTx = frameTx;
 8000d5c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000d60:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000d62:	8822      	ldrh	r2, [r4, #0]
 8000d64:	4639      	mov	r1, r7
 8000d66:	4630      	mov	r0, r6
 8000d68:	f001 f93e 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	f040 80ef 	bne.w	8000f50 <AS5047P_SetFactorySettings+0x244>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000d72:	8861      	ldrh	r1, [r4, #2]
 8000d74:	8822      	ldrh	r2, [r4, #0]
 8000d76:	0448      	lsls	r0, r1, #17
 8000d78:	f100 8250 	bmi.w	800121c <AS5047P_SetFactorySettings+0x510>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000d7c:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000d80:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000d84:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000d88:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000d8c:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
 8000d90:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 8000d94:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000d98:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000d9c:	f000 80e5 	beq.w	8000f6a <AS5047P_SetFactorySettings+0x25e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000da0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 835f 	beq.w	8001468 <AS5047P_SetFactorySettings+0x75c>
	  return -1;
 8000daa:	f04f 35ff 	mov.w	r5, #4294967295
  instance->buffTx = frameTx;
 8000dae:	f248 0319 	movw	r3, #32793	; 0x8019
 8000db2:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000db4:	4639      	mov	r1, r7
 8000db6:	4630      	mov	r0, r6
 8000db8:	f001 f916 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	f000 8253 	beq.w	8001268 <AS5047P_SetFactorySettings+0x55c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000dc2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 82cb 	beq.w	8001362 <AS5047P_SetFactorySettings+0x656>
  instance->buffTx = frameTx;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000dd0:	8822      	ldrh	r2, [r4, #0]
 8000dd2:	4639      	mov	r1, r7
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f001 f907 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	f040 80ab 	bne.w	8000f36 <AS5047P_SetFactorySettings+0x22a>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000de0:	8861      	ldrh	r1, [r4, #2]
 8000de2:	8822      	ldrh	r2, [r4, #0]
 8000de4:	0448      	lsls	r0, r1, #17
 8000de6:	f100 8201 	bmi.w	80011ec <AS5047P_SetFactorySettings+0x4e0>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000dea:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000dee:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000df2:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000df6:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000dfa:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8000dfe:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8000e02:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000e06:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000e0a:	f000 813e 	beq.w	800108a <AS5047P_SetFactorySettings+0x37e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000e0e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8321 	beq.w	800145a <AS5047P_SetFactorySettings+0x74e>
 8000e18:	f04f 35ff 	mov.w	r5, #4294967295
  instance->buffTx = frameTx;
 8000e1c:	2317      	movs	r3, #23
 8000e1e:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000e20:	4639      	mov	r1, r7
 8000e22:	4630      	mov	r0, r6
 8000e24:	f001 f8e0 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f000 8203 	beq.w	8001234 <AS5047P_SetFactorySettings+0x528>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000e2e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 829a 	beq.w	800136c <AS5047P_SetFactorySettings+0x660>
  instance->buffTx = frameTx;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000e3c:	8822      	ldrh	r2, [r4, #0]
 8000e3e:	4639      	mov	r1, r7
 8000e40:	4630      	mov	r0, r6
 8000e42:	f001 f8d1 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d169      	bne.n	8000f1e <AS5047P_SetFactorySettings+0x212>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000e4a:	8861      	ldrh	r1, [r4, #2]
 8000e4c:	8822      	ldrh	r2, [r4, #0]
 8000e4e:	0448      	lsls	r0, r1, #17
 8000e50:	f100 81c0 	bmi.w	80011d4 <AS5047P_SetFactorySettings+0x4c8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000e54:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000e58:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000e5c:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000e60:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000e64:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8000e68:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8000e6c:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000e70:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000e74:	f000 815c 	beq.w	8001130 <AS5047P_SetFactorySettings+0x424>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000e78:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 82e5 	beq.w	800144c <AS5047P_SetFactorySettings+0x740>
 8000e82:	f04f 35ff 	mov.w	r5, #4294967295
  instance->buffTx = frameTx;
 8000e86:	f248 0316 	movw	r3, #32790	; 0x8016
 8000e8a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000e8c:	4639      	mov	r1, r7
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f001 f8aa 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000e94:	2800      	cmp	r0, #0
 8000e96:	f000 81da 	beq.w	800124e <AS5047P_SetFactorySettings+0x542>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000e9a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8269 	beq.w	8001376 <AS5047P_SetFactorySettings+0x66a>
  instance->buffTx = frameTx;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000ea8:	8822      	ldrh	r2, [r4, #0]
 8000eaa:	4639      	mov	r1, r7
 8000eac:	4630      	mov	r0, r6
 8000eae:	f001 f89b 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000eb2:	bb40      	cbnz	r0, 8000f06 <AS5047P_SetFactorySettings+0x1fa>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000eb4:	8862      	ldrh	r2, [r4, #2]
 8000eb6:	0450      	lsls	r0, r2, #17
 8000eb8:	f100 81a4 	bmi.w	8001204 <AS5047P_SetFactorySettings+0x4f8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000ebc:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8000ec0:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000ec4:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000ec8:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000ecc:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8000ed0:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8000ed4:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000ed8:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8000edc:	f000 8084 	beq.w	8000fe8 <AS5047P_SetFactorySettings+0x2dc>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000ee0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 82aa 	beq.w	800143e <AS5047P_SetFactorySettings+0x732>
  	  return -1;
 8000eea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000ef2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f af30 	bne.w	8000d5c <AS5047P_SetFactorySettings+0x50>
	instance->error.errorCode = errCode;
 8000efc:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000efe:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000f00:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000f02:	60e3      	str	r3, [r4, #12]
 8000f04:	e72a      	b.n	8000d5c <AS5047P_SetFactorySettings+0x50>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000f06:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1ed      	bne.n	8000eea <AS5047P_SetFactorySettings+0x1de>
	instance->error.errorCode = errCode;
 8000f0e:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000f12:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000f14:	60e3      	str	r3, [r4, #12]
  	  return -1;
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000f1e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000f22:	8822      	ldrh	r2, [r4, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ac      	bne.n	8000e82 <AS5047P_SetFactorySettings+0x176>
	instance->error.errorCode = errCode;
 8000f28:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000f2c:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000f2e:	60e3      	str	r3, [r4, #12]
 8000f30:	f04f 35ff 	mov.w	r5, #4294967295
 8000f34:	e7a7      	b.n	8000e86 <AS5047P_SetFactorySettings+0x17a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000f36:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000f3a:	8822      	ldrh	r2, [r4, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f47f af6b 	bne.w	8000e18 <AS5047P_SetFactorySettings+0x10c>
	instance->error.errorCode = errCode;
 8000f42:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000f46:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000f48:	60e3      	str	r3, [r4, #12]
 8000f4a:	f04f 35ff 	mov.w	r5, #4294967295
 8000f4e:	e765      	b.n	8000e1c <AS5047P_SetFactorySettings+0x110>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000f50:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000f54:	8822      	ldrh	r2, [r4, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f47f af27 	bne.w	8000daa <AS5047P_SetFactorySettings+0x9e>
	instance->error.errorCode = errCode;
 8000f5c:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000f60:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000f62:	60e3      	str	r3, [r4, #12]
	  return -1;
 8000f64:	f04f 35ff 	mov.w	r5, #4294967295
 8000f68:	e721      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
  instance->buffTx = frameTx;
 8000f6a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000f6e:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000f70:	4639      	mov	r1, r7
 8000f72:	4630      	mov	r0, r6
 8000f74:	f001 f838 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d1e9      	bne.n	8000f50 <AS5047P_SetFactorySettings+0x244>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000f7c:	8861      	ldrh	r1, [r4, #2]
 8000f7e:	8822      	ldrh	r2, [r4, #0]
 8000f80:	044b      	lsls	r3, r1, #17
 8000f82:	f100 814b 	bmi.w	800121c <AS5047P_SetFactorySettings+0x510>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8000f86:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8000f8a:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8000f8e:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8000f92:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8000f96:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 8000f9a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8000f9e:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8000fa2:	f47f aefd 	bne.w	8000da0 <AS5047P_SetFactorySettings+0x94>
      if ( curRegContent != newRegContent )
 8000fa6:	f3c1 080d 	ubfx	r8, r1, #0, #14
 8000faa:	f1b8 0f01 	cmp.w	r8, #1
 8000fae:	f040 8213 	bne.w	80013d8 <AS5047P_SetFactorySettings+0x6cc>
  instance->buffTx = frameTx;
 8000fb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fb6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000fb8:	4639      	mov	r1, r7
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f001 f814 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	f000 8215 	beq.w	80013f0 <AS5047P_SetFactorySettings+0x6e4>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8000fc6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8000fca:	8822      	ldrh	r2, [r4, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f aeec 	bne.w	8000daa <AS5047P_SetFactorySettings+0x9e>
	    instance->error.msg = errMesage[errCode];
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <AS5047P_SetFactorySettings+0x2d8>)
	instance->error.errorCode = errCode;
 8000fd4:	f8a4 8008 	strh.w	r8, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8000fd8:	60e3      	str	r3, [r4, #12]
	  return -1;
 8000fda:	f04f 35ff 	mov.w	r5, #4294967295
 8000fde:	e6e6      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
 8000fe0:	20000c80 	.word	0x20000c80
 8000fe4:	20000050 	.word	0x20000050
  instance->buffTx = frameTx;
 8000fe8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000fec:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8000fee:	8822      	ldrh	r2, [r4, #0]
 8000ff0:	4639      	mov	r1, r7
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f000 fff8 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d184      	bne.n	8000f06 <AS5047P_SetFactorySettings+0x1fa>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8000ffc:	8862      	ldrh	r2, [r4, #2]
 8000ffe:	0451      	lsls	r1, r2, #17
 8001000:	f100 8100 	bmi.w	8001204 <AS5047P_SetFactorySettings+0x4f8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001004:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001008:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 800100c:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001010:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001014:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001018:	f3c3 7300 	ubfx	r3, r3, #28, #1
 800101c:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001020:	f47f af5e 	bne.w	8000ee0 <AS5047P_SetFactorySettings+0x1d4>
      if ( curRegContent != newRegContent )
 8001024:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001028:	2a00      	cmp	r2, #0
 800102a:	f040 81bd 	bne.w	80013a8 <AS5047P_SetFactorySettings+0x69c>
  instance->buffTx = frameTx;
 800102e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001032:	4639      	mov	r1, r7
 8001034:	4630      	mov	r0, r6
  instance->buffTx = frameTx;
 8001036:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001038:	8822      	ldrh	r2, [r4, #0]
 800103a:	f000 ffd5 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 800103e:	2800      	cmp	r0, #0
 8001040:	f47f af61 	bne.w	8000f06 <AS5047P_SetFactorySettings+0x1fa>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001044:	8862      	ldrh	r2, [r4, #2]
 8001046:	0453      	lsls	r3, r2, #17
 8001048:	f100 80dc 	bmi.w	8001204 <AS5047P_SetFactorySettings+0x4f8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800104c:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001050:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001054:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001058:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800105c:	fb08 f803 	mul.w	r8, r8, r3
  if ( parityCalculated == parityReceived )
 8001060:	f3c8 7800 	ubfx	r8, r8, #28, #1
 8001064:	ebb8 3fd2 	cmp.w	r8, r2, lsr #15
 8001068:	f47f af3a 	bne.w	8000ee0 <AS5047P_SetFactorySettings+0x1d4>
      if( tmpResponse == 0 )
 800106c:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001070:	2a00      	cmp	r2, #0
 8001072:	f040 8205 	bne.w	8001480 <AS5047P_SetFactorySettings+0x774>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001076:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f47f af35 	bne.w	8000eea <AS5047P_SetFactorySettings+0x1de>
	instance->error.errorCode = errCode;
 8001080:	2216      	movs	r2, #22
	    instance->error.msg = errMesage[errCode];
 8001082:	4bbf      	ldr	r3, [pc, #764]	; (8001380 <AS5047P_SetFactorySettings+0x674>)
	instance->error.errorCode = errCode;
 8001084:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001086:	60e3      	str	r3, [r4, #12]
 8001088:	e72f      	b.n	8000eea <AS5047P_SetFactorySettings+0x1de>
  instance->buffTx = frameTx;
 800108a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800108e:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001090:	4639      	mov	r1, r7
 8001092:	4630      	mov	r0, r6
 8001094:	f000 ffa8 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001098:	2800      	cmp	r0, #0
 800109a:	f47f af4c 	bne.w	8000f36 <AS5047P_SetFactorySettings+0x22a>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800109e:	8861      	ldrh	r1, [r4, #2]
 80010a0:	8822      	ldrh	r2, [r4, #0]
 80010a2:	044b      	lsls	r3, r1, #17
 80010a4:	f100 80a2 	bmi.w	80011ec <AS5047P_SetFactorySettings+0x4e0>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80010a8:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 80010ac:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80010b0:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80010b4:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80010b8:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 80010bc:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80010c0:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 80010c4:	f47f aea3 	bne.w	8000e0e <AS5047P_SetFactorySettings+0x102>
      if ( curRegContent != newRegContent )
 80010c8:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80010cc:	2900      	cmp	r1, #0
 80010ce:	f040 8177 	bne.w	80013c0 <AS5047P_SetFactorySettings+0x6b4>
  instance->buffTx = frameTx;
 80010d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010d6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80010d8:	4639      	mov	r1, r7
 80010da:	4630      	mov	r0, r6
 80010dc:	f000 ff84 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80010e0:	2800      	cmp	r0, #0
 80010e2:	f47f af28 	bne.w	8000f36 <AS5047P_SetFactorySettings+0x22a>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80010e6:	8861      	ldrh	r1, [r4, #2]
 80010e8:	8822      	ldrh	r2, [r4, #0]
 80010ea:	0448      	lsls	r0, r1, #17
 80010ec:	d47e      	bmi.n	80011ec <AS5047P_SetFactorySettings+0x4e0>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80010ee:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 80010f2:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80010f6:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80010fa:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80010fe:	fb08 f803 	mul.w	r8, r8, r3
  if ( parityCalculated == parityReceived )
 8001102:	f3c8 7800 	ubfx	r8, r8, #28, #1
 8001106:	ebb8 3fd1 	cmp.w	r8, r1, lsr #15
 800110a:	f47f ae80 	bne.w	8000e0e <AS5047P_SetFactorySettings+0x102>
      if( tmpResponse == 0 )
 800110e:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8001112:	2900      	cmp	r1, #0
 8001114:	f47f ae82 	bne.w	8000e1c <AS5047P_SetFactorySettings+0x110>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001118:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f47f ae7b 	bne.w	8000e18 <AS5047P_SetFactorySettings+0x10c>
	instance->error.errorCode = errCode;
 8001122:	2116      	movs	r1, #22
	    instance->error.msg = errMesage[errCode];
 8001124:	4b96      	ldr	r3, [pc, #600]	; (8001380 <AS5047P_SetFactorySettings+0x674>)
	instance->error.errorCode = errCode;
 8001126:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001128:	60e3      	str	r3, [r4, #12]
 800112a:	f04f 35ff 	mov.w	r5, #4294967295
 800112e:	e675      	b.n	8000e1c <AS5047P_SetFactorySettings+0x110>
  instance->buffTx = frameTx;
 8001130:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001134:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001136:	4639      	mov	r1, r7
 8001138:	4630      	mov	r0, r6
 800113a:	f000 ff55 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 800113e:	2800      	cmp	r0, #0
 8001140:	f47f aeed 	bne.w	8000f1e <AS5047P_SetFactorySettings+0x212>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001144:	8861      	ldrh	r1, [r4, #2]
 8001146:	8822      	ldrh	r2, [r4, #0]
 8001148:	044b      	lsls	r3, r1, #17
 800114a:	d443      	bmi.n	80011d4 <AS5047P_SetFactorySettings+0x4c8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800114c:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8001150:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001154:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001158:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800115c:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001160:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001164:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8001168:	f47f ae86 	bne.w	8000e78 <AS5047P_SetFactorySettings+0x16c>
      if ( curRegContent != newRegContent )
 800116c:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8001170:	2900      	cmp	r1, #0
 8001172:	f040 810d 	bne.w	8001390 <AS5047P_SetFactorySettings+0x684>
  instance->buffTx = frameTx;
 8001176:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800117a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800117c:	4639      	mov	r1, r7
 800117e:	4630      	mov	r0, r6
 8001180:	f000 ff32 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001184:	2800      	cmp	r0, #0
 8001186:	f47f aeca 	bne.w	8000f1e <AS5047P_SetFactorySettings+0x212>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800118a:	8861      	ldrh	r1, [r4, #2]
 800118c:	8822      	ldrh	r2, [r4, #0]
 800118e:	0448      	lsls	r0, r1, #17
 8001190:	d420      	bmi.n	80011d4 <AS5047P_SetFactorySettings+0x4c8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001192:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8001196:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 800119a:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800119e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80011a2:	fb08 f803 	mul.w	r8, r8, r3
  if ( parityCalculated == parityReceived )
 80011a6:	f3c8 7800 	ubfx	r8, r8, #28, #1
 80011aa:	ebb8 3fd1 	cmp.w	r8, r1, lsr #15
 80011ae:	f47f ae63 	bne.w	8000e78 <AS5047P_SetFactorySettings+0x16c>
      if( tmpResponse == 0 )
 80011b2:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80011b6:	2900      	cmp	r1, #0
 80011b8:	f47f ae65 	bne.w	8000e86 <AS5047P_SetFactorySettings+0x17a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80011bc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f47f ae5e 	bne.w	8000e82 <AS5047P_SetFactorySettings+0x176>
	instance->error.errorCode = errCode;
 80011c6:	2116      	movs	r1, #22
	    instance->error.msg = errMesage[errCode];
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <AS5047P_SetFactorySettings+0x674>)
	instance->error.errorCode = errCode;
 80011ca:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80011cc:	60e3      	str	r3, [r4, #12]
 80011ce:	f04f 35ff 	mov.w	r5, #4294967295
 80011d2:	e658      	b.n	8000e86 <AS5047P_SetFactorySettings+0x17a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80011d4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f47f ae52 	bne.w	8000e82 <AS5047P_SetFactorySettings+0x176>
	instance->error.errorCode = errCode;
 80011de:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 80011e0:	4b68      	ldr	r3, [pc, #416]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 80011e2:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80011e4:	60e3      	str	r3, [r4, #12]
 80011e6:	f04f 35ff 	mov.w	r5, #4294967295
 80011ea:	e64c      	b.n	8000e86 <AS5047P_SetFactorySettings+0x17a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80011ec:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f ae11 	bne.w	8000e18 <AS5047P_SetFactorySettings+0x10c>
	instance->error.errorCode = errCode;
 80011f6:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 80011f8:	4b62      	ldr	r3, [pc, #392]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 80011fa:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80011fc:	60e3      	str	r3, [r4, #12]
 80011fe:	f04f 35ff 	mov.w	r5, #4294967295
 8001202:	e60b      	b.n	8000e1c <AS5047P_SetFactorySettings+0x110>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001204:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f ae6e 	bne.w	8000eea <AS5047P_SetFactorySettings+0x1de>
	instance->error.errorCode = errCode;
 800120e:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001210:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 8001212:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001214:	60e3      	str	r3, [r4, #12]
  	  return -1;
 8001216:	f04f 30ff 	mov.w	r0, #4294967295
 800121a:	e668      	b.n	8000eee <AS5047P_SetFactorySettings+0x1e2>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800121c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	f47f adc2 	bne.w	8000daa <AS5047P_SetFactorySettings+0x9e>
	instance->error.errorCode = errCode;
 8001226:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 800122a:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800122c:	60e3      	str	r3, [r4, #12]
	  return -1;
 800122e:	f04f 35ff 	mov.w	r5, #4294967295
 8001232:	e5bc      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001234:	8862      	ldrh	r2, [r4, #2]
 8001236:	0453      	lsls	r3, r2, #17
 8001238:	d55b      	bpl.n	80012f2 <AS5047P_SetFactorySettings+0x5e6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800123a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f adfa 	bne.w	8000e38 <AS5047P_SetFactorySettings+0x12c>
	instance->error.errorCode = errCode;
 8001244:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001246:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 8001248:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800124a:	60e3      	str	r3, [r4, #12]
 800124c:	e5f4      	b.n	8000e38 <AS5047P_SetFactorySettings+0x12c>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800124e:	8862      	ldrh	r2, [r4, #2]
 8001250:	0453      	lsls	r3, r2, #17
 8001252:	d56a      	bpl.n	800132a <AS5047P_SetFactorySettings+0x61e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001254:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f ae23 	bne.w	8000ea4 <AS5047P_SetFactorySettings+0x198>
	instance->error.errorCode = errCode;
 800125e:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001260:	4b48      	ldr	r3, [pc, #288]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 8001262:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001264:	60e3      	str	r3, [r4, #12]
 8001266:	e61d      	b.n	8000ea4 <AS5047P_SetFactorySettings+0x198>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001268:	8862      	ldrh	r2, [r4, #2]
 800126a:	0453      	lsls	r3, r2, #17
 800126c:	d525      	bpl.n	80012ba <AS5047P_SetFactorySettings+0x5ae>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800126e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f adaa 	bne.w	8000dcc <AS5047P_SetFactorySettings+0xc0>
	instance->error.errorCode = errCode;
 8001278:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <AS5047P_SetFactorySettings+0x678>)
	instance->error.errorCode = errCode;
 800127c:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800127e:	60e3      	str	r3, [r4, #12]
 8001280:	e5a4      	b.n	8000dcc <AS5047P_SetFactorySettings+0xc0>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001282:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001286:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 800128a:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800128e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001292:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8001296:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 800129a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 800129e:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 80012a2:	f43f ad5b 	beq.w	8000d5c <AS5047P_SetFactorySettings+0x50>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80012a6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ad56 	bne.w	8000d5c <AS5047P_SetFactorySettings+0x50>
	instance->error.errorCode = errCode;
 80012b0:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <AS5047P_SetFactorySettings+0x67c>)
	instance->error.errorCode = errCode;
 80012b4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80012b6:	60e3      	str	r3, [r4, #12]
 80012b8:	e550      	b.n	8000d5c <AS5047P_SetFactorySettings+0x50>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80012ba:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80012be:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80012c2:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80012c6:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80012ca:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 80012d2:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80012d6:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 80012da:	f43f ad77 	beq.w	8000dcc <AS5047P_SetFactorySettings+0xc0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80012de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ad72 	bne.w	8000dcc <AS5047P_SetFactorySettings+0xc0>
	instance->error.errorCode = errCode;
 80012e8:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <AS5047P_SetFactorySettings+0x67c>)
	instance->error.errorCode = errCode;
 80012ec:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80012ee:	60e3      	str	r3, [r4, #12]
 80012f0:	e56c      	b.n	8000dcc <AS5047P_SetFactorySettings+0xc0>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80012f2:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80012f6:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80012fa:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80012fe:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001302:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8001306:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 800130a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 800130e:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001312:	f43f ad91 	beq.w	8000e38 <AS5047P_SetFactorySettings+0x12c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001316:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f47f ad8c 	bne.w	8000e38 <AS5047P_SetFactorySettings+0x12c>
	instance->error.errorCode = errCode;
 8001320:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <AS5047P_SetFactorySettings+0x67c>)
	instance->error.errorCode = errCode;
 8001324:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001326:	60e3      	str	r3, [r4, #12]
 8001328:	e586      	b.n	8000e38 <AS5047P_SetFactorySettings+0x12c>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800132a:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 800132e:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001332:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001336:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800133a:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 800133e:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8001342:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001346:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 800134a:	f43f adab 	beq.w	8000ea4 <AS5047P_SetFactorySettings+0x198>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800134e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f47f ada6 	bne.w	8000ea4 <AS5047P_SetFactorySettings+0x198>
	instance->error.errorCode = errCode;
 8001358:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <AS5047P_SetFactorySettings+0x67c>)
	instance->error.errorCode = errCode;
 800135c:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800135e:	60e3      	str	r3, [r4, #12]
 8001360:	e5a0      	b.n	8000ea4 <AS5047P_SetFactorySettings+0x198>
	instance->error.errorCode = errCode;
 8001362:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <AS5047P_SetFactorySettings+0x680>)
	instance->error.errorCode = errCode;
 8001366:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001368:	60e3      	str	r3, [r4, #12]
 800136a:	e52f      	b.n	8000dcc <AS5047P_SetFactorySettings+0xc0>
	instance->error.errorCode = errCode;
 800136c:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <AS5047P_SetFactorySettings+0x680>)
	instance->error.errorCode = errCode;
 8001370:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001372:	60e3      	str	r3, [r4, #12]
 8001374:	e560      	b.n	8000e38 <AS5047P_SetFactorySettings+0x12c>
	instance->error.errorCode = errCode;
 8001376:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <AS5047P_SetFactorySettings+0x680>)
	instance->error.errorCode = errCode;
 800137a:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800137c:	60e3      	str	r3, [r4, #12]
 800137e:	e591      	b.n	8000ea4 <AS5047P_SetFactorySettings+0x198>
 8001380:	200006e0 	.word	0x200006e0
 8001384:	200000a0 	.word	0x200000a0
 8001388:	200000f0 	.word	0x200000f0
 800138c:	20000050 	.word	0x20000050
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001390:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f ad74 	bne.w	8000e82 <AS5047P_SetFactorySettings+0x176>
	instance->error.errorCode = errCode;
 800139a:	2115      	movs	r1, #21
	    instance->error.msg = errMesage[errCode];
 800139c:	4b39      	ldr	r3, [pc, #228]	; (8001484 <AS5047P_SetFactorySettings+0x778>)
	instance->error.errorCode = errCode;
 800139e:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80013a0:	60e3      	str	r3, [r4, #12]
 80013a2:	f04f 35ff 	mov.w	r5, #4294967295
 80013a6:	e56e      	b.n	8000e86 <AS5047P_SetFactorySettings+0x17a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80013a8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f47f ad9c 	bne.w	8000eea <AS5047P_SetFactorySettings+0x1de>
	instance->error.errorCode = errCode;
 80013b2:	2215      	movs	r2, #21
	    instance->error.msg = errMesage[errCode];
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <AS5047P_SetFactorySettings+0x778>)
	instance->error.errorCode = errCode;
 80013b6:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80013b8:	60e3      	str	r3, [r4, #12]
  	  return -1;
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295
 80013be:	e596      	b.n	8000eee <AS5047P_SetFactorySettings+0x1e2>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80013c0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f ad27 	bne.w	8000e18 <AS5047P_SetFactorySettings+0x10c>
	instance->error.errorCode = errCode;
 80013ca:	2115      	movs	r1, #21
	    instance->error.msg = errMesage[errCode];
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <AS5047P_SetFactorySettings+0x778>)
	instance->error.errorCode = errCode;
 80013ce:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80013d0:	60e3      	str	r3, [r4, #12]
 80013d2:	f04f 35ff 	mov.w	r5, #4294967295
 80013d6:	e521      	b.n	8000e1c <AS5047P_SetFactorySettings+0x110>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80013d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f47f ace4 	bne.w	8000daa <AS5047P_SetFactorySettings+0x9e>
	instance->error.errorCode = errCode;
 80013e2:	2115      	movs	r1, #21
	    instance->error.msg = errMesage[errCode];
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <AS5047P_SetFactorySettings+0x778>)
	instance->error.errorCode = errCode;
 80013e6:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80013e8:	60e3      	str	r3, [r4, #12]
	  return -1;
 80013ea:	f04f 35ff 	mov.w	r5, #4294967295
 80013ee:	e4de      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80013f0:	8861      	ldrh	r1, [r4, #2]
 80013f2:	8822      	ldrh	r2, [r4, #0]
 80013f4:	0448      	lsls	r0, r1, #17
 80013f6:	f53f af11 	bmi.w	800121c <AS5047P_SetFactorySettings+0x510>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80013fa:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 80013fe:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001402:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001406:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800140a:	fb05 f503 	mul.w	r5, r5, r3
  if ( parityCalculated == parityReceived )
 800140e:	f3c5 7500 	ubfx	r5, r5, #28, #1
 8001412:	ebb5 3fd1 	cmp.w	r5, r1, lsr #15
 8001416:	f47f acc3 	bne.w	8000da0 <AS5047P_SetFactorySettings+0x94>
      if( tmpResponse == 0 )
 800141a:	f3c1 010d 	ubfx	r1, r1, #0, #14
    return 0;
 800141e:	2500      	movs	r5, #0
      if( tmpResponse == 0 )
 8001420:	2900      	cmp	r1, #0
 8001422:	f47f acc4 	bne.w	8000dae <AS5047P_SetFactorySettings+0xa2>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001426:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f acbd 	bne.w	8000daa <AS5047P_SetFactorySettings+0x9e>
	instance->error.errorCode = errCode;
 8001430:	2116      	movs	r1, #22
	    instance->error.msg = errMesage[errCode];
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <AS5047P_SetFactorySettings+0x77c>)
	instance->error.errorCode = errCode;
 8001434:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001436:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001438:	f04f 35ff 	mov.w	r5, #4294967295
 800143c:	e4b7      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
	instance->error.errorCode = errCode;
 800143e:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <AS5047P_SetFactorySettings+0x780>)
	instance->error.errorCode = errCode;
 8001442:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001444:	60e3      	str	r3, [r4, #12]
  	  return -1;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295
 800144a:	e550      	b.n	8000eee <AS5047P_SetFactorySettings+0x1e2>
	instance->error.errorCode = errCode;
 800144c:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <AS5047P_SetFactorySettings+0x780>)
	instance->error.errorCode = errCode;
 8001450:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001452:	60e3      	str	r3, [r4, #12]
 8001454:	f04f 35ff 	mov.w	r5, #4294967295
 8001458:	e515      	b.n	8000e86 <AS5047P_SetFactorySettings+0x17a>
	instance->error.errorCode = errCode;
 800145a:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <AS5047P_SetFactorySettings+0x780>)
	instance->error.errorCode = errCode;
 800145e:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001460:	60e3      	str	r3, [r4, #12]
 8001462:	f04f 35ff 	mov.w	r5, #4294967295
 8001466:	e4d9      	b.n	8000e1c <AS5047P_SetFactorySettings+0x110>
	instance->error.errorCode = errCode;
 8001468:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <AS5047P_SetFactorySettings+0x780>)
	instance->error.errorCode = errCode;
 800146c:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800146e:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001470:	f04f 35ff 	mov.w	r5, #4294967295
 8001474:	e49b      	b.n	8000dae <AS5047P_SetFactorySettings+0xa2>
	instance->error.errorCode = errCode;
 8001476:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <AS5047P_SetFactorySettings+0x784>)
	instance->error.errorCode = errCode;
 800147a:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800147c:	60e3      	str	r3, [r4, #12]
 800147e:	e46d      	b.n	8000d5c <AS5047P_SetFactorySettings+0x50>
        if( errCode != 0)
 8001480:	4628      	mov	r0, r5
 8001482:	e534      	b.n	8000eee <AS5047P_SetFactorySettings+0x1e2>
 8001484:	20000690 	.word	0x20000690
 8001488:	200006e0 	.word	0x200006e0
 800148c:	200000f0 	.word	0x200000f0
 8001490:	200000a0 	.word	0x200000a0

08001494 <AS5047P_ErrorPending>:
 *	Generates no error.
 *
 ************************************************************************************/
_Bool AS5047P_ErrorPending(AS5047P_Instance * instance)
{
  return (instance->error).errorCode != 0 ? true : false;
 8001494:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
}
 8001498:	3000      	adds	r0, #0
 800149a:	bf18      	it	ne
 800149c:	2001      	movne	r0, #1
 800149e:	4770      	bx	lr

080014a0 <AS5047P_GetError>:
 *	Generates no error.
 *
 ************************************************************************************/
AS5047P_Error AS5047P_GetError(AS5047P_Instance * instance)
{
  return (instance->error);
 80014a0:	3108      	adds	r1, #8
{
 80014a2:	4603      	mov	r3, r0
  return (instance->error);
 80014a4:	c903      	ldmia	r1, {r0, r1}
 80014a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <AS5047P_ErrorAck>:
 ************************************************************************************/
AS5047P_ErrCode AS5047P_ErrorAck(AS5047P_Instance * instance)
{
  AS5047P_Result readRegErrCode;

  if(instance->initialized)
 80014b0:	79c2      	ldrb	r2, [r0, #7]
 80014b2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80014b6:	b112      	cbz	r2, 80014be <AS5047P_ErrorAck+0xe>
  {
      if( AS5047P_ErrorPending(instance))
 80014b8:	b933      	cbnz	r3, 80014c8 <AS5047P_ErrorAck+0x18>
      //--- Encoder not initialized while reset attempt
      AS5047P_HandleError(instance,51);
      return -1;
  }

  return 0;
 80014ba:	4618      	mov	r0, r3
 80014bc:	4770      	bx	lr
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04b      	beq.n	800155a <AS5047P_ErrorAck+0xaa>
	    return -1;
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014c6:	4770      	bx	lr
{
 80014c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  instance->buffTx = frameTx;
 80014cc:	4606      	mov	r6, r0
 80014ce:	f244 0301 	movw	r3, #16385	; 0x4001
 80014d2:	4604      	mov	r4, r0
 80014d4:	f826 3f04 	strh.w	r3, [r6, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80014d8:	1c87      	adds	r7, r0, #2
 80014da:	4639      	mov	r1, r7
 80014dc:	4630      	mov	r0, r6
 80014de:	8822      	ldrh	r2, [r4, #0]
 80014e0:	f000 fd82 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80014e4:	2800      	cmp	r0, #0
 80014e6:	f000 8086 	beq.w	80015f6 <AS5047P_ErrorAck+0x146>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80014ea:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8160 	beq.w	80017b4 <AS5047P_ErrorAck+0x304>
  instance->buffTx = frameTx;
 80014f4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80014f8:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80014fa:	8822      	ldrh	r2, [r4, #0]
 80014fc:	4639      	mov	r1, r7
 80014fe:	4630      	mov	r0, r6
 8001500:	f000 fd72 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001504:	2800      	cmp	r0, #0
 8001506:	d058      	beq.n	80015ba <AS5047P_ErrorAck+0x10a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001508:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800150c:	8822      	ldrh	r2, [r4, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 814b 	beq.w	80017aa <AS5047P_ErrorAck+0x2fa>
  instance->buffTx = frameTx;
 8001514:	f244 0301 	movw	r3, #16385	; 0x4001
 8001518:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800151a:	4639      	mov	r1, r7
 800151c:	4630      	mov	r0, r6
 800151e:	f000 fd63 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001522:	b360      	cbz	r0, 800157e <AS5047P_ErrorAck+0xce>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001524:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 8139 	beq.w	80017a0 <AS5047P_ErrorAck+0x2f0>
  instance->buffTx = frameTx;
 800152e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001532:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001534:	8822      	ldrh	r2, [r4, #0]
 8001536:	4639      	mov	r1, r7
 8001538:	4630      	mov	r0, r6
 800153a:	f000 fd55 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 800153e:	b998      	cbnz	r0, 8001568 <AS5047P_ErrorAck+0xb8>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001540:	8865      	ldrh	r5, [r4, #2]
 8001542:	046a      	lsls	r2, r5, #17
 8001544:	f140 808a 	bpl.w	800165c <AS5047P_ErrorAck+0x1ac>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001548:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8136 	beq.w	80017be <AS5047P_ErrorAck+0x30e>
	    return -1;
 8001552:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	instance->error.errorCode = errCode;
 800155a:	2233      	movs	r2, #51	; 0x33
	    instance->error.msg = errMesage[errCode];
 800155c:	4b9e      	ldr	r3, [pc, #632]	; (80017d8 <AS5047P_ErrorAck+0x328>)
	instance->error.errorCode = errCode;
 800155e:	8102      	strh	r2, [r0, #8]
	    instance->error.msg = errMesage[errCode];
 8001560:	60c3      	str	r3, [r0, #12]
      return -1;
 8001562:	f04f 30ff 	mov.w	r0, #4294967295
 8001566:	4770      	bx	lr
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001568:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <AS5047P_ErrorAck+0xa2>
	instance->error.errorCode = errCode;
 8001570:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001572:	4b9a      	ldr	r3, [pc, #616]	; (80017dc <AS5047P_ErrorAck+0x32c>)
	instance->error.errorCode = errCode;
 8001574:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001576:	60e3      	str	r3, [r4, #12]
	    return -1;
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	e7eb      	b.n	8001556 <AS5047P_ErrorAck+0xa6>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800157e:	8862      	ldrh	r2, [r4, #2]
 8001580:	0451      	lsls	r1, r2, #17
 8001582:	f100 8088 	bmi.w	8001696 <AS5047P_ErrorAck+0x1e6>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001586:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 800158a:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 800158e:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001592:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001596:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 800159a:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 800159e:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80015a2:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 80015a6:	d0c2      	beq.n	800152e <AS5047P_ErrorAck+0x7e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80015a8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1be      	bne.n	800152e <AS5047P_ErrorAck+0x7e>
	instance->error.errorCode = errCode;
 80015b0:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 80015b2:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <AS5047P_ErrorAck+0x330>)
	instance->error.errorCode = errCode;
 80015b4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80015b6:	60e3      	str	r3, [r4, #12]
 80015b8:	e7b9      	b.n	800152e <AS5047P_ErrorAck+0x7e>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80015ba:	8861      	ldrh	r1, [r4, #2]
 80015bc:	8822      	ldrh	r2, [r4, #0]
 80015be:	044d      	lsls	r5, r1, #17
 80015c0:	d442      	bmi.n	8001648 <AS5047P_ErrorAck+0x198>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80015c2:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 80015c6:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80015ca:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80015ce:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80015d2:	f04f 3511 	mov.w	r5, #286331153	; 0x11111111
 80015d6:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 80015da:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80015de:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 80015e2:	d062      	beq.n	80016aa <AS5047P_ErrorAck+0x1fa>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80015e4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d193      	bne.n	8001514 <AS5047P_ErrorAck+0x64>
	instance->error.errorCode = errCode;
 80015ec:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 80015ee:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <AS5047P_ErrorAck+0x330>)
	instance->error.errorCode = errCode;
 80015f0:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80015f2:	60e3      	str	r3, [r4, #12]
 80015f4:	e78e      	b.n	8001514 <AS5047P_ErrorAck+0x64>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80015f6:	8862      	ldrh	r2, [r4, #2]
 80015f8:	0453      	lsls	r3, r2, #17
 80015fa:	d41b      	bmi.n	8001634 <AS5047P_ErrorAck+0x184>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80015fc:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001600:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001604:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001608:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800160c:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8001610:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8001614:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001618:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 800161c:	f43f af6a 	beq.w	80014f4 <AS5047P_ErrorAck+0x44>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001620:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f47f af65 	bne.w	80014f4 <AS5047P_ErrorAck+0x44>
	instance->error.errorCode = errCode;
 800162a:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 800162c:	4b6c      	ldr	r3, [pc, #432]	; (80017e0 <AS5047P_ErrorAck+0x330>)
	instance->error.errorCode = errCode;
 800162e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001630:	60e3      	str	r3, [r4, #12]
 8001632:	e75f      	b.n	80014f4 <AS5047P_ErrorAck+0x44>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001634:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f47f af5b 	bne.w	80014f4 <AS5047P_ErrorAck+0x44>
	instance->error.errorCode = errCode;
 800163e:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001640:	4b68      	ldr	r3, [pc, #416]	; (80017e4 <AS5047P_ErrorAck+0x334>)
	instance->error.errorCode = errCode;
 8001642:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001644:	60e3      	str	r3, [r4, #12]
 8001646:	e755      	b.n	80014f4 <AS5047P_ErrorAck+0x44>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001648:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f af61 	bne.w	8001514 <AS5047P_ErrorAck+0x64>
	instance->error.errorCode = errCode;
 8001652:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 8001654:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <AS5047P_ErrorAck+0x334>)
	instance->error.errorCode = errCode;
 8001656:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001658:	60e3      	str	r3, [r4, #12]
 800165a:	e75b      	b.n	8001514 <AS5047P_ErrorAck+0x64>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800165c:	f3c5 030e 	ubfx	r3, r5, #0, #15
  v ^= v >> 1;
 8001660:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001664:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001668:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800166c:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8001670:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001674:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001678:	ebb3 3fd5 	cmp.w	r3, r5, lsr #15
 800167c:	d025      	beq.n	80016ca <AS5047P_ErrorAck+0x21a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800167e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f af65 	bne.w	8001552 <AS5047P_ErrorAck+0xa2>
	instance->error.errorCode = errCode;
 8001688:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <AS5047P_ErrorAck+0x330>)
	instance->error.errorCode = errCode;
 800168c:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800168e:	60e3      	str	r3, [r4, #12]
	    return -1;
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	e75f      	b.n	8001556 <AS5047P_ErrorAck+0xa6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001696:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f af47 	bne.w	800152e <AS5047P_ErrorAck+0x7e>
	instance->error.errorCode = errCode;
 80016a0:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <AS5047P_ErrorAck+0x334>)
	instance->error.errorCode = errCode;
 80016a4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80016a6:	60e3      	str	r3, [r4, #12]
 80016a8:	e741      	b.n	800152e <AS5047P_ErrorAck+0x7e>
  instance->buffTx = frameTx;
 80016aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016ae:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80016b0:	4639      	mov	r1, r7
 80016b2:	4630      	mov	r0, r6
 80016b4:	f000 fc98 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d040      	beq.n	800173e <AS5047P_ErrorAck+0x28e>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80016bc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8083 	beq.w	80017cc <AS5047P_ErrorAck+0x31c>
 80016c6:	8822      	ldrh	r2, [r4, #0]
 80016c8:	e724      	b.n	8001514 <AS5047P_ErrorAck+0x64>
  instance->buffTx = frameTx;
 80016ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80016ce:	4639      	mov	r1, r7
 80016d0:	4630      	mov	r0, r6
  instance->buffTx = frameTx;
 80016d2:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80016d4:	8822      	ldrh	r2, [r4, #0]
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 80016d6:	f3c5 050d 	ubfx	r5, r5, #0, #14
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 80016da:	f000 fc85 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 80016de:	2800      	cmp	r0, #0
 80016e0:	f47f af42 	bne.w	8001568 <AS5047P_ErrorAck+0xb8>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80016e4:	8862      	ldrh	r2, [r4, #2]
 80016e6:	0453      	lsls	r3, r2, #17
 80016e8:	f53f af2e 	bmi.w	8001548 <AS5047P_ErrorAck+0x98>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80016ec:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 80016f0:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80016f4:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80016f8:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80016fc:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001700:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001704:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001708:	d1b9      	bne.n	800167e <AS5047P_ErrorAck+0x1ce>
    if( tmpResponse == 0 )
 800170a:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800170e:	b95a      	cbnz	r2, 8001728 <AS5047P_ErrorAck+0x278>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001710:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f af1c 	bne.w	8001552 <AS5047P_ErrorAck+0xa2>
	instance->error.errorCode = errCode;
 800171a:	220b      	movs	r2, #11
	    instance->error.msg = errMesage[errCode];
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <AS5047P_ErrorAck+0x338>)
	instance->error.errorCode = errCode;
 800171e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001720:	60e3      	str	r3, [r4, #12]
	    return -1;
 8001722:	f04f 30ff 	mov.w	r0, #4294967295
 8001726:	e716      	b.n	8001556 <AS5047P_ErrorAck+0xa6>
	if( readRegErrCode > 0)
 8001728:	b1ad      	cbz	r5, 8001756 <AS5047P_ErrorAck+0x2a6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800172a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f af0f 	bne.w	8001552 <AS5047P_ErrorAck+0xa2>
	instance->error.errorCode = errCode;
 8001734:	2232      	movs	r2, #50	; 0x32
	    instance->error.msg = errMesage[errCode];
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <AS5047P_ErrorAck+0x33c>)
	instance->error.errorCode = errCode;
 8001738:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800173a:	60e3      	str	r3, [r4, #12]
 800173c:	e709      	b.n	8001552 <AS5047P_ErrorAck+0xa2>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 800173e:	8861      	ldrh	r1, [r4, #2]
 8001740:	0448      	lsls	r0, r1, #17
 8001742:	d50d      	bpl.n	8001760 <AS5047P_ErrorAck+0x2b0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001744:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1bc      	bne.n	80016c6 <AS5047P_ErrorAck+0x216>
	instance->error.errorCode = errCode;
 800174c:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <AS5047P_ErrorAck+0x334>)
	instance->error.errorCode = errCode;
 8001750:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001752:	60e3      	str	r3, [r4, #12]
 8001754:	e7b7      	b.n	80016c6 <AS5047P_ErrorAck+0x216>
  instance->error.msg = errMesage[0];
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <AS5047P_ErrorAck+0x340>)
  instance->error.errorCode = 0;
 8001758:	8125      	strh	r5, [r4, #8]
  return 0;
 800175a:	4628      	mov	r0, r5
  instance->error.msg = errMesage[0];
 800175c:	60e3      	str	r3, [r4, #12]
 800175e:	e6fa      	b.n	8001556 <AS5047P_ErrorAck+0xa6>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001760:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8001764:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001768:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800176c:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001770:	fb05 f303 	mul.w	r3, r5, r3
  if ( parityCalculated == parityReceived )
 8001774:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001778:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 800177c:	8822      	ldrh	r2, [r4, #0]
 800177e:	f47f af31 	bne.w	80015e4 <AS5047P_ErrorAck+0x134>
    if( tmpResponse == 0 )
 8001782:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8001786:	2900      	cmp	r1, #0
 8001788:	f47f aec4 	bne.w	8001514 <AS5047P_ErrorAck+0x64>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800178c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f aebf 	bne.w	8001514 <AS5047P_ErrorAck+0x64>
	instance->error.errorCode = errCode;
 8001796:	210b      	movs	r1, #11
	    instance->error.msg = errMesage[errCode];
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <AS5047P_ErrorAck+0x338>)
	instance->error.errorCode = errCode;
 800179a:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 800179c:	60e3      	str	r3, [r4, #12]
 800179e:	e6b9      	b.n	8001514 <AS5047P_ErrorAck+0x64>
	instance->error.errorCode = errCode;
 80017a0:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <AS5047P_ErrorAck+0x32c>)
	instance->error.errorCode = errCode;
 80017a4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80017a6:	60e3      	str	r3, [r4, #12]
 80017a8:	e6c1      	b.n	800152e <AS5047P_ErrorAck+0x7e>
	instance->error.errorCode = errCode;
 80017aa:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <AS5047P_ErrorAck+0x32c>)
	instance->error.errorCode = errCode;
 80017ae:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80017b0:	60e3      	str	r3, [r4, #12]
 80017b2:	e6af      	b.n	8001514 <AS5047P_ErrorAck+0x64>
	instance->error.errorCode = errCode;
 80017b4:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <AS5047P_ErrorAck+0x32c>)
	instance->error.errorCode = errCode;
 80017b8:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80017ba:	60e3      	str	r3, [r4, #12]
 80017bc:	e69a      	b.n	80014f4 <AS5047P_ErrorAck+0x44>
	instance->error.errorCode = errCode;
 80017be:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <AS5047P_ErrorAck+0x334>)
	instance->error.errorCode = errCode;
 80017c2:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80017c4:	60e3      	str	r3, [r4, #12]
	    return -1;
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	e6c4      	b.n	8001556 <AS5047P_ErrorAck+0xa6>
	instance->error.errorCode = errCode;
 80017cc:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <AS5047P_ErrorAck+0x32c>)
	instance->error.errorCode = errCode;
 80017d0:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80017d2:	60e3      	str	r3, [r4, #12]
 80017d4:	8822      	ldrh	r2, [r4, #0]
 80017d6:	e69d      	b.n	8001514 <AS5047P_ErrorAck+0x64>
 80017d8:	20000ff0 	.word	0x20000ff0
 80017dc:	20000050 	.word	0x20000050
 80017e0:	200000f0 	.word	0x200000f0
 80017e4:	200000a0 	.word	0x200000a0
 80017e8:	20000370 	.word	0x20000370
 80017ec:	20000fa0 	.word	0x20000fa0
 80017f0:	20000000 	.word	0x20000000

080017f4 <AS5047P_ReadPosition>:
 *
 *	Generates error codes in range: [70-79]
 *
 ************************************************************************************/
AS5047P_Result AS5047P_ReadPosition(AS5047P_Instance * instance, _Bool extendedDiag)
{
 80017f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  AS5047P_Result currPos;
  AS5047P_Result diagData;

  if(instance->initialized && instance->zeroPosCalibrated)
 80017f8:	79c3      	ldrb	r3, [r0, #7]
 80017fa:	b943      	cbnz	r3, 800180e <AS5047P_ReadPosition+0x1a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80017fc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d04d      	beq.n	80018a0 <AS5047P_ReadPosition+0xac>
  }
  else if( !instance->zeroPosCalibrated )
  {
      //--- Encoder not calibrated (zero pos not set) while position read attempt
      AS5047P_HandleError(instance,76);
      return -1;
 8001804:	f04f 35ff 	mov.w	r5, #4294967295
  }

  return currPos;

}
 8001808:	4628      	mov	r0, r5
 800180a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(instance->initialized && instance->zeroPosCalibrated)
 800180e:	7983      	ldrb	r3, [r0, #6]
 8001810:	b943      	cbnz	r3, 8001824 <AS5047P_ReadPosition+0x30>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001812:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f4      	bne.n	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 800181a:	224c      	movs	r2, #76	; 0x4c
	    instance->error.msg = errMesage[errCode];
 800181c:	4b7a      	ldr	r3, [pc, #488]	; (8001a08 <AS5047P_ReadPosition+0x214>)
	instance->error.errorCode = errCode;
 800181e:	8102      	strh	r2, [r0, #8]
	    instance->error.msg = errMesage[errCode];
 8001820:	60c3      	str	r3, [r0, #12]
 8001822:	e7ef      	b.n	8001804 <AS5047P_ReadPosition+0x10>
  instance->buffTx = frameTx;
 8001824:	4607      	mov	r7, r0
 8001826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182a:	4604      	mov	r4, r0
 800182c:	f827 3f04 	strh.w	r3, [r7, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001830:	f100 0802 	add.w	r8, r0, #2
 8001834:	460e      	mov	r6, r1
 8001836:	4638      	mov	r0, r7
 8001838:	4641      	mov	r1, r8
 800183a:	8822      	ldrh	r2, [r4, #0]
 800183c:	f000 fbd4 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001840:	2800      	cmp	r0, #0
 8001842:	d04c      	beq.n	80018de <AS5047P_ReadPosition+0xea>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001844:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 809e 	beq.w	800198a <AS5047P_ReadPosition+0x196>
  instance->buffTx = frameTx;
 800184e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001852:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001854:	8822      	ldrh	r2, [r4, #0]
 8001856:	4641      	mov	r1, r8
 8001858:	4638      	mov	r0, r7
 800185a:	f000 fbc5 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 800185e:	2800      	cmp	r0, #0
 8001860:	d132      	bne.n	80018c8 <AS5047P_ReadPosition+0xd4>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001862:	8865      	ldrh	r5, [r4, #2]
 8001864:	046b      	lsls	r3, r5, #17
 8001866:	d424      	bmi.n	80018b2 <AS5047P_ReadPosition+0xbe>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001868:	f3c5 030e 	ubfx	r3, r5, #0, #15
  v ^= v >> 1;
 800186c:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001870:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001874:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001878:	f04f 3911 	mov.w	r9, #286331153	; 0x11111111
 800187c:	fb09 f303 	mul.w	r3, r9, r3
  if ( parityCalculated == parityReceived )
 8001880:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001884:	ebb3 3fd5 	cmp.w	r3, r5, lsr #15
 8001888:	d04f      	beq.n	800192a <AS5047P_ReadPosition+0x136>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800188a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1b8      	bne.n	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 8001892:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001894:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <AS5047P_ReadPosition+0x218>)
	instance->error.errorCode = errCode;
 8001896:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001898:	60e3      	str	r3, [r4, #12]
	  return -1;
 800189a:	f04f 35ff 	mov.w	r5, #4294967295
 800189e:	e7b3      	b.n	8001808 <AS5047P_ReadPosition+0x14>
	instance->error.errorCode = errCode;
 80018a0:	224b      	movs	r2, #75	; 0x4b
	    instance->error.msg = errMesage[errCode];
 80018a2:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <AS5047P_ReadPosition+0x21c>)
	instance->error.errorCode = errCode;
 80018a4:	8102      	strh	r2, [r0, #8]
      return -1;
 80018a6:	f04f 35ff 	mov.w	r5, #4294967295
	    instance->error.msg = errMesage[errCode];
 80018aa:	60c3      	str	r3, [r0, #12]
}
 80018ac:	4628      	mov	r0, r5
 80018ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80018b2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1a4      	bne.n	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80018ba:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <AS5047P_ReadPosition+0x220>)
	instance->error.errorCode = errCode;
 80018be:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80018c0:	60e3      	str	r3, [r4, #12]
	  return -1;
 80018c2:	f04f 35ff 	mov.w	r5, #4294967295
 80018c6:	e79f      	b.n	8001808 <AS5047P_ReadPosition+0x14>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80018c8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d199      	bne.n	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80018d0:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 80018d2:	4b51      	ldr	r3, [pc, #324]	; (8001a18 <AS5047P_ReadPosition+0x224>)
	instance->error.errorCode = errCode;
 80018d4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80018d6:	60e3      	str	r3, [r4, #12]
	  return -1;
 80018d8:	f04f 35ff 	mov.w	r5, #4294967295
 80018dc:	e794      	b.n	8001808 <AS5047P_ReadPosition+0x14>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 80018de:	8861      	ldrh	r1, [r4, #2]
 80018e0:	044a      	lsls	r2, r1, #17
 80018e2:	d419      	bmi.n	8001918 <AS5047P_ReadPosition+0x124>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 80018e4:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 80018e8:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 80018ec:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 80018f0:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 80018f4:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
  if ( parityCalculated == parityReceived )
 80018fc:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001900:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8001904:	d0a3      	beq.n	800184e <AS5047P_ReadPosition+0x5a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001906:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d19f      	bne.n	800184e <AS5047P_ReadPosition+0x5a>
	instance->error.errorCode = errCode;
 800190e:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001910:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <AS5047P_ReadPosition+0x218>)
	instance->error.errorCode = errCode;
 8001912:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001914:	60e3      	str	r3, [r4, #12]
 8001916:	e79a      	b.n	800184e <AS5047P_ReadPosition+0x5a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001918:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d196      	bne.n	800184e <AS5047P_ReadPosition+0x5a>
	instance->error.errorCode = errCode;
 8001920:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001922:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <AS5047P_ReadPosition+0x220>)
	instance->error.errorCode = errCode;
 8001924:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001926:	60e3      	str	r3, [r4, #12]
 8001928:	e791      	b.n	800184e <AS5047P_ReadPosition+0x5a>
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 800192a:	f3c5 050d 	ubfx	r5, r5, #0, #14
      if (extendedDiag)
 800192e:	2e00      	cmp	r6, #0
 8001930:	f43f af6a 	beq.w	8001808 <AS5047P_ReadPosition+0x14>
  instance->buffTx = frameTx;
 8001934:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001938:	4641      	mov	r1, r8
 800193a:	4638      	mov	r0, r7
  instance->buffTx = frameTx;
 800193c:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 800193e:	8822      	ldrh	r2, [r4, #0]
 8001940:	f000 fb52 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001944:	2800      	cmp	r0, #0
 8001946:	d1bf      	bne.n	80018c8 <AS5047P_ReadPosition+0xd4>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001948:	8862      	ldrh	r2, [r4, #2]
 800194a:	0456      	lsls	r6, r2, #17
 800194c:	d4b1      	bmi.n	80018b2 <AS5047P_ReadPosition+0xbe>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 800194e:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001952:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001956:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 800195a:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 800195e:	fb09 f303 	mul.w	r3, r9, r3
  if ( parityCalculated == parityReceived )
 8001962:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001966:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 800196a:	d18e      	bne.n	800188a <AS5047P_ReadPosition+0x96>
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 800196c:	f3c2 030d 	ubfx	r3, r2, #0, #14
	if( diagData == 0 )
 8001970:	b983      	cbnz	r3, 8001994 <AS5047P_ReadPosition+0x1a0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001972:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f af44 	bne.w	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 800197c:	2246      	movs	r2, #70	; 0x46
	    instance->error.msg = errMesage[errCode];
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <AS5047P_ReadPosition+0x228>)
	instance->error.errorCode = errCode;
 8001980:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001982:	60e3      	str	r3, [r4, #12]
	    return -1;
 8001984:	f04f 35ff 	mov.w	r5, #4294967295
 8001988:	e73e      	b.n	8001808 <AS5047P_ReadPosition+0x14>
	instance->error.errorCode = errCode;
 800198a:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <AS5047P_ReadPosition+0x224>)
	instance->error.errorCode = errCode;
 800198e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001990:	60e3      	str	r3, [r4, #12]
 8001992:	e75c      	b.n	800184e <AS5047P_ReadPosition+0x5a>
	if( diagData & AS5047P_DIAAGC_MAGL )
 8001994:	b29b      	uxth	r3, r3
 8001996:	0518      	lsls	r0, r3, #20
 8001998:	d40d      	bmi.n	80019b6 <AS5047P_ReadPosition+0x1c2>
	if( diagData & AS5047P_DIAAGC_MAGH )
 800199a:	0559      	lsls	r1, r3, #21
 800199c:	d517      	bpl.n	80019ce <AS5047P_ReadPosition+0x1da>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 800199e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f af2e 	bne.w	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80019a8:	2248      	movs	r2, #72	; 0x48
	    instance->error.msg = errMesage[errCode];
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <AS5047P_ReadPosition+0x22c>)
	instance->error.errorCode = errCode;
 80019ac:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80019ae:	60e3      	str	r3, [r4, #12]
	  return -1;
 80019b0:	f04f 35ff 	mov.w	r5, #4294967295
 80019b4:	e728      	b.n	8001808 <AS5047P_ReadPosition+0x14>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80019b6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f47f af22 	bne.w	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80019c0:	2247      	movs	r2, #71	; 0x47
	    instance->error.msg = errMesage[errCode];
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <AS5047P_ReadPosition+0x230>)
	instance->error.errorCode = errCode;
 80019c4:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80019c6:	60e3      	str	r3, [r4, #12]
	  return -1;
 80019c8:	f04f 35ff 	mov.w	r5, #4294967295
 80019cc:	e71c      	b.n	8001808 <AS5047P_ReadPosition+0x14>
	if( diagData & AS5047P_DIAAGC_COF )
 80019ce:	059a      	lsls	r2, r3, #22
 80019d0:	d50b      	bpl.n	80019ea <AS5047P_ReadPosition+0x1f6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80019d2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f af14 	bne.w	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80019dc:	2249      	movs	r2, #73	; 0x49
	    instance->error.msg = errMesage[errCode];
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <AS5047P_ReadPosition+0x234>)
	instance->error.errorCode = errCode;
 80019e0:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 80019e2:	60e3      	str	r3, [r4, #12]
	  return -1;
 80019e4:	f04f 35ff 	mov.w	r5, #4294967295
 80019e8:	e70e      	b.n	8001808 <AS5047P_ReadPosition+0x14>
	if( ( diagData & AS5047P_DIAAGC_LF ) == 0 )
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	f53f af0c 	bmi.w	8001808 <AS5047P_ReadPosition+0x14>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 80019f0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f af05 	bne.w	8001804 <AS5047P_ReadPosition+0x10>
	instance->error.errorCode = errCode;
 80019fa:	224a      	movs	r2, #74	; 0x4a
	    instance->error.msg = errMesage[errCode];
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <AS5047P_ReadPosition+0x238>)
	instance->error.errorCode = errCode;
 80019fe:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001a00:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001a02:	f04f 35ff 	mov.w	r5, #4294967295
 8001a06:	e6ff      	b.n	8001808 <AS5047P_ReadPosition+0x14>
 8001a08:	200017c0 	.word	0x200017c0
 8001a0c:	200000f0 	.word	0x200000f0
 8001a10:	20001770 	.word	0x20001770
 8001a14:	200000a0 	.word	0x200000a0
 8001a18:	20000050 	.word	0x20000050
 8001a1c:	200015e0 	.word	0x200015e0
 8001a20:	20001680 	.word	0x20001680
 8001a24:	20001630 	.word	0x20001630
 8001a28:	200016d0 	.word	0x200016d0
 8001a2c:	20001720 	.word	0x20001720

08001a30 <AS5047P_SetZeroPosition>:
 *
 *	Generates error codes in range: [80-89]
 *
 ************************************************************************************/
AS5047P_ErrCode AS5047P_SetZeroPosition(AS5047P_Instance * instance)
{
 8001a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  AS5047P_Result currZPOSLContent;
  AS5047P_ErrCode errCode = 0;
  uint16_t newZPOSLContent;
  uint16_t newZPOSMContent;

  if(instance->initialized)
 8001a34:	79c3      	ldrb	r3, [r0, #7]
{
 8001a36:	b083      	sub	sp, #12
  if(instance->initialized)
 8001a38:	b993      	cbnz	r3, 8001a60 <AS5047P_SetZeroPosition+0x30>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001a3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8001a3e:	b12b      	cbz	r3, 8001a4c <AS5047P_SetZeroPosition+0x1c>
     errCode |= AS5047P_WriteRegister(instance, AS5047P_ZPOSM , 0x0000,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);

     if(errCode != 0 )
     {

	return -1;
 8001a40:	f04f 35ff 	mov.w	r5, #4294967295
      return -1;
  }

  return 0;

}
 8001a44:	4628      	mov	r0, r5
 8001a46:	b003      	add	sp, #12
 8001a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	instance->error.errorCode = errCode;
 8001a4c:	2250      	movs	r2, #80	; 0x50
	    instance->error.msg = errMesage[errCode];
 8001a4e:	4bc0      	ldr	r3, [pc, #768]	; (8001d50 <AS5047P_SetZeroPosition+0x320>)
	instance->error.errorCode = errCode;
 8001a50:	8102      	strh	r2, [r0, #8]
      return -1;
 8001a52:	f04f 35ff 	mov.w	r5, #4294967295
	    instance->error.msg = errMesage[errCode];
 8001a56:	60c3      	str	r3, [r0, #12]
}
 8001a58:	4628      	mov	r0, r5
 8001a5a:	b003      	add	sp, #12
 8001a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  instance->buffTx = frameTx;
 8001a60:	4605      	mov	r5, r0
 8001a62:	f24c 0317 	movw	r3, #49175	; 0xc017
 8001a66:	4604      	mov	r4, r0
 8001a68:	f825 3f04 	strh.w	r3, [r5, #4]!
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001a6c:	1c86      	adds	r6, r0, #2
 8001a6e:	4631      	mov	r1, r6
 8001a70:	4628      	mov	r0, r5
 8001a72:	8822      	ldrh	r2, [r4, #0]
 8001a74:	f000 fab8 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001a78:	bb78      	cbnz	r0, 8001ada <AS5047P_SetZeroPosition+0xaa>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001a7a:	8862      	ldrh	r2, [r4, #2]
 8001a7c:	0457      	lsls	r7, r2, #17
 8001a7e:	d57d      	bpl.n	8001b7c <AS5047P_SetZeroPosition+0x14c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001a80:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8246 	beq.w	8001f16 <AS5047P_SetZeroPosition+0x4e6>
  instance->buffTx = frameTx;
 8001a8a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001a8e:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001a90:	8822      	ldrh	r2, [r4, #0]
 8001a92:	4631      	mov	r1, r6
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 faa7 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001a9a:	bb38      	cbnz	r0, 8001aec <AS5047P_SetZeroPosition+0xbc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001a9c:	8867      	ldrh	r7, [r4, #2]
 8001a9e:	0478      	lsls	r0, r7, #17
 8001aa0:	d432      	bmi.n	8001b08 <AS5047P_SetZeroPosition+0xd8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001aa2:	f3c7 030e 	ubfx	r3, r7, #0, #15
  v ^= v >> 1;
 8001aa6:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001aaa:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001aae:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001ab2:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
 8001ab6:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001aba:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001abe:	ebb3 3fd7 	cmp.w	r3, r7, lsr #15
 8001ac2:	d02f      	beq.n	8001b24 <AS5047P_SetZeroPosition+0xf4>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001ac4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1b9      	bne.n	8001a40 <AS5047P_SetZeroPosition+0x10>
	instance->error.errorCode = errCode;
 8001acc:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001ace:	4ba1      	ldr	r3, [pc, #644]	; (8001d54 <AS5047P_SetZeroPosition+0x324>)
	instance->error.errorCode = errCode;
 8001ad0:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001ad2:	60e3      	str	r3, [r4, #12]
	return -1;
 8001ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8001ad8:	e7b4      	b.n	8001a44 <AS5047P_SetZeroPosition+0x14>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001ada:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1d3      	bne.n	8001a8a <AS5047P_SetZeroPosition+0x5a>
	instance->error.errorCode = errCode;
 8001ae2:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	; (8001d58 <AS5047P_SetZeroPosition+0x328>)
	instance->error.errorCode = errCode;
 8001ae6:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001ae8:	60e3      	str	r3, [r4, #12]
 8001aea:	e7ce      	b.n	8001a8a <AS5047P_SetZeroPosition+0x5a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001aec:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1a5      	bne.n	8001a40 <AS5047P_SetZeroPosition+0x10>
	    instance->error.msg = errMesage[errCode];
 8001af4:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <AS5047P_SetZeroPosition+0x328>)
 8001af6:	60e3      	str	r3, [r4, #12]
	return -1;
 8001af8:	f04f 35ff 	mov.w	r5, #4294967295
	instance->error.errorCode = errCode;
 8001afc:	2201      	movs	r2, #1
}
 8001afe:	4628      	mov	r0, r5
	instance->error.errorCode = errCode;
 8001b00:	8122      	strh	r2, [r4, #8]
}
 8001b02:	b003      	add	sp, #12
 8001b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001b08:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d197      	bne.n	8001a40 <AS5047P_SetZeroPosition+0x10>
	    instance->error.msg = errMesage[errCode];
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <AS5047P_SetZeroPosition+0x32c>)
 8001b12:	60e3      	str	r3, [r4, #12]
	return -1;
 8001b14:	f04f 35ff 	mov.w	r5, #4294967295
	instance->error.errorCode = errCode;
 8001b18:	2202      	movs	r2, #2
}
 8001b1a:	4628      	mov	r0, r5
	instance->error.errorCode = errCode;
 8001b1c:	8122      	strh	r2, [r4, #8]
}
 8001b1e:	b003      	add	sp, #12
 8001b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  instance->buffTx = frameTx;
 8001b24:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b28:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001b2a:	8822      	ldrh	r2, [r4, #0]
 8001b2c:	4631      	mov	r1, r6
 8001b2e:	4628      	mov	r0, r5
  return ( (instance->buffRx) & AS5047P_FRAME_DATA );
 8001b30:	b23f      	sxth	r7, r7
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001b32:	f000 fa59 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d1d8      	bne.n	8001aec <AS5047P_SetZeroPosition+0xbc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001b3a:	8862      	ldrh	r2, [r4, #2]
 8001b3c:	0451      	lsls	r1, r2, #17
 8001b3e:	d4e3      	bmi.n	8001b08 <AS5047P_SetZeroPosition+0xd8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001b40:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001b44:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001b48:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001b4c:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001b50:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001b54:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001b58:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001b5c:	d1b2      	bne.n	8001ac4 <AS5047P_SetZeroPosition+0x94>
    if( tmpResponse == 0 )
 8001b5e:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001b62:	bb3a      	cbnz	r2, 8001bb4 <AS5047P_SetZeroPosition+0x184>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001b64:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f af69 	bne.w	8001a40 <AS5047P_SetZeroPosition+0x10>
	instance->error.errorCode = errCode;
 8001b6e:	220b      	movs	r2, #11
	    instance->error.msg = errMesage[errCode];
 8001b70:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <AS5047P_SetZeroPosition+0x330>)
	instance->error.errorCode = errCode;
 8001b72:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001b74:	60e3      	str	r3, [r4, #12]
	return -1;
 8001b76:	f04f 35ff 	mov.w	r5, #4294967295
 8001b7a:	e763      	b.n	8001a44 <AS5047P_SetZeroPosition+0x14>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001b7c:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001b80:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001b84:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001b88:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001b8c:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8001b94:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001b98:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001b9c:	f43f af75 	beq.w	8001a8a <AS5047P_SetZeroPosition+0x5a>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001ba0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f af70 	bne.w	8001a8a <AS5047P_SetZeroPosition+0x5a>
	instance->error.errorCode = errCode;
 8001baa:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <AS5047P_SetZeroPosition+0x324>)
	instance->error.errorCode = errCode;
 8001bae:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001bb0:	60e3      	str	r3, [r4, #12]
 8001bb2:	e76a      	b.n	8001a8a <AS5047P_SetZeroPosition+0x5a>
  instance->buffTx = frameTx;
 8001bb4:	2317      	movs	r3, #23
 8001bb6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001bb8:	8822      	ldrh	r2, [r4, #0]
 8001bba:	4631      	mov	r1, r6
 8001bbc:	4628      	mov	r0, r5
     errCode = AS5047P_WriteRegister(instance, AS5047P_ZPOSL , currZPOSLContent & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN),AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001bbe:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001bc2:	f000 fa11 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	f000 8113 	beq.w	8001df2 <AS5047P_SetZeroPosition+0x3c2>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001bcc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8194 	beq.w	8001efe <AS5047P_SetZeroPosition+0x4ce>
  v ^= v >> 1;
 8001bd6:	ea87 0357 	eor.w	r3, r7, r7, lsr #1
  v ^= v >> 2;
 8001bda:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  frameTx |= AS5047P_CalcParity(frameTx) << 15;
 8001bde:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001be2:	ea47 33c3 	orr.w	r3, r7, r3, lsl #15
  instance->buffTx = frameTx;
 8001be6:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001be8:	8822      	ldrh	r2, [r4, #0]
 8001bea:	4631      	mov	r1, r6
 8001bec:	4628      	mov	r0, r5
  v = (v & 0x11111111U) * 0x11111111U;
 8001bee:	f04f 3811 	mov.w	r8, #286331153	; 0x11111111
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001bf2:	f000 f9f9 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	f040 809c 	bne.w	8001d34 <AS5047P_SetZeroPosition+0x304>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001bfc:	8861      	ldrh	r1, [r4, #2]
 8001bfe:	8822      	ldrh	r2, [r4, #0]
 8001c00:	0448      	lsls	r0, r1, #17
 8001c02:	f100 80ea 	bmi.w	8001dda <AS5047P_SetZeroPosition+0x3aa>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001c06:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8001c0a:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001c0e:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001c12:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001c16:	fb08 f303 	mul.w	r3, r8, r3
  if ( parityCalculated == parityReceived )
 8001c1a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001c1e:	ebb3 3fd1 	cmp.w	r3, r1, lsr #15
 8001c22:	f000 80a1 	beq.w	8001d68 <AS5047P_SetZeroPosition+0x338>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001c26:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 816c 	beq.w	8001f08 <AS5047P_SetZeroPosition+0x4d8>
	  return -1;
 8001c30:	f04f 38ff 	mov.w	r8, #4294967295
  instance->buffTx = frameTx;
 8001c34:	f248 0316 	movw	r3, #32790	; 0x8016
 8001c38:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001c3a:	4631      	mov	r1, r6
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	f000 f9d3 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001c42:	2800      	cmp	r0, #0
 8001c44:	f000 80e2 	beq.w	8001e0c <AS5047P_SetZeroPosition+0x3dc>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001c48:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8151 	beq.w	8001ef4 <AS5047P_SetZeroPosition+0x4c4>
  instance->buffTx = frameTx;
 8001c52:	2300      	movs	r3, #0
 8001c54:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001c56:	8822      	ldrh	r2, [r4, #0]
 8001c58:	4631      	mov	r1, r6
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f000 f9c4 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f47f af43 	bne.w	8001aec <AS5047P_SetZeroPosition+0xbc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001c66:	8862      	ldrh	r2, [r4, #2]
 8001c68:	0450      	lsls	r0, r2, #17
 8001c6a:	f53f af4d 	bmi.w	8001b08 <AS5047P_SetZeroPosition+0xd8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001c6e:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001c72:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001c76:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001c7a:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001c7e:	f04f 3911 	mov.w	r9, #286331153	; 0x11111111
 8001c82:	fb09 f303 	mul.w	r3, r9, r3
  if ( parityCalculated == parityReceived )
 8001c86:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001c8a:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001c8e:	f47f af19 	bne.w	8001ac4 <AS5047P_SetZeroPosition+0x94>
  instance->buffTx = frameTx;
 8001c92:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001c96:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001c98:	8822      	ldrh	r2, [r4, #0]
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f000 f9a3 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	f47f af22 	bne.w	8001aec <AS5047P_SetZeroPosition+0xbc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001ca8:	8862      	ldrh	r2, [r4, #2]
 8001caa:	0451      	lsls	r1, r2, #17
 8001cac:	f53f af2c 	bmi.w	8001b08 <AS5047P_SetZeroPosition+0xd8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001cb0:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001cb4:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001cb8:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001cbc:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001cc0:	fb09 f303 	mul.w	r3, r9, r3
  if ( parityCalculated == parityReceived )
 8001cc4:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001cc8:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001ccc:	f47f aefa 	bne.w	8001ac4 <AS5047P_SetZeroPosition+0x94>
      if ( curRegContent != newRegContent )
 8001cd0:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d174      	bne.n	8001dc2 <AS5047P_SetZeroPosition+0x392>
  instance->buffTx = frameTx;
 8001cd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001cdc:	4631      	mov	r1, r6
 8001cde:	4628      	mov	r0, r5
  instance->buffTx = frameTx;
 8001ce0:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001ce2:	8822      	ldrh	r2, [r4, #0]
 8001ce4:	f000 f980 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	f47f aeff 	bne.w	8001aec <AS5047P_SetZeroPosition+0xbc>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001cee:	8862      	ldrh	r2, [r4, #2]
 8001cf0:	0453      	lsls	r3, r2, #17
 8001cf2:	f53f af09 	bmi.w	8001b08 <AS5047P_SetZeroPosition+0xd8>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001cf6:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001cfa:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001cfe:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001d02:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001d06:	fb09 f903 	mul.w	r9, r9, r3
  if ( parityCalculated == parityReceived )
 8001d0a:	f3c9 7900 	ubfx	r9, r9, #28, #1
 8001d0e:	ebb9 3fd2 	cmp.w	r9, r2, lsr #15
 8001d12:	f47f aed7 	bne.w	8001ac4 <AS5047P_SetZeroPosition+0x94>
      if( tmpResponse == 0 )
 8001d16:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	f040 8100 	bne.w	8001f20 <AS5047P_SetZeroPosition+0x4f0>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001d20:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f47f ae8b 	bne.w	8001a40 <AS5047P_SetZeroPosition+0x10>
	instance->error.errorCode = errCode;
 8001d2a:	2216      	movs	r2, #22
	    instance->error.msg = errMesage[errCode];
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <AS5047P_SetZeroPosition+0x334>)
	instance->error.errorCode = errCode;
 8001d2e:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001d30:	60e3      	str	r3, [r4, #12]
 8001d32:	e685      	b.n	8001a40 <AS5047P_SetZeroPosition+0x10>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001d34:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001d38:	8822      	ldrh	r2, [r4, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f af78 	bne.w	8001c30 <AS5047P_SetZeroPosition+0x200>
	instance->error.errorCode = errCode;
 8001d40:	2101      	movs	r1, #1
	    instance->error.msg = errMesage[errCode];
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <AS5047P_SetZeroPosition+0x328>)
	instance->error.errorCode = errCode;
 8001d44:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001d46:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001d48:	f04f 38ff 	mov.w	r8, #4294967295
 8001d4c:	e772      	b.n	8001c34 <AS5047P_SetZeroPosition+0x204>
 8001d4e:	bf00      	nop
 8001d50:	20001900 	.word	0x20001900
 8001d54:	200000f0 	.word	0x200000f0
 8001d58:	20000050 	.word	0x20000050
 8001d5c:	200000a0 	.word	0x200000a0
 8001d60:	20000370 	.word	0x20000370
 8001d64:	200006e0 	.word	0x200006e0
  instance->buffTx = frameTx;
 8001d68:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001d6c:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001d6e:	4631      	mov	r1, r6
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 f939 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d1dc      	bne.n	8001d34 <AS5047P_SetZeroPosition+0x304>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001d7a:	8863      	ldrh	r3, [r4, #2]
 8001d7c:	8822      	ldrh	r2, [r4, #0]
 8001d7e:	0459      	lsls	r1, r3, #17
 8001d80:	d42b      	bmi.n	8001dda <AS5047P_SetZeroPosition+0x3aa>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001d82:	f3c3 010e 	ubfx	r1, r3, #0, #15
  v ^= v >> 1;
 8001d86:	ea81 0151 	eor.w	r1, r1, r1, lsr #1
  v ^= v >> 2;
 8001d8a:	ea81 0191 	eor.w	r1, r1, r1, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001d8e:	f001 3111 	and.w	r1, r1, #286331153	; 0x11111111
 8001d92:	fb08 f101 	mul.w	r1, r8, r1
  if ( parityCalculated == parityReceived )
 8001d96:	f3c1 7100 	ubfx	r1, r1, #28, #1
 8001d9a:	ebb1 3fd3 	cmp.w	r1, r3, lsr #15
 8001d9e:	f47f af42 	bne.w	8001c26 <AS5047P_SetZeroPosition+0x1f6>
      if ( curRegContent != newRegContent )
 8001da2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001da6:	429f      	cmp	r7, r3
 8001da8:	d03d      	beq.n	8001e26 <AS5047P_SetZeroPosition+0x3f6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001daa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f af3e 	bne.w	8001c30 <AS5047P_SetZeroPosition+0x200>
	instance->error.errorCode = errCode;
 8001db4:	2115      	movs	r1, #21
	    instance->error.msg = errMesage[errCode];
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <AS5047P_SetZeroPosition+0x554>)
	instance->error.errorCode = errCode;
 8001db8:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001dba:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001dbc:	f04f 38ff 	mov.w	r8, #4294967295
 8001dc0:	e738      	b.n	8001c34 <AS5047P_SetZeroPosition+0x204>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001dc2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f47f ae3a 	bne.w	8001a40 <AS5047P_SetZeroPosition+0x10>
	instance->error.errorCode = errCode;
 8001dcc:	2215      	movs	r2, #21
	    instance->error.msg = errMesage[errCode];
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <AS5047P_SetZeroPosition+0x554>)
	instance->error.errorCode = errCode;
 8001dd0:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001dd2:	60e3      	str	r3, [r4, #12]
	return -1;
 8001dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8001dd8:	e634      	b.n	8001a44 <AS5047P_SetZeroPosition+0x14>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001dda:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f af26 	bne.w	8001c30 <AS5047P_SetZeroPosition+0x200>
	instance->error.errorCode = errCode;
 8001de4:	2102      	movs	r1, #2
	    instance->error.msg = errMesage[errCode];
 8001de6:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <AS5047P_SetZeroPosition+0x558>)
	instance->error.errorCode = errCode;
 8001de8:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001dea:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001dec:	f04f 38ff 	mov.w	r8, #4294967295
 8001df0:	e720      	b.n	8001c34 <AS5047P_SetZeroPosition+0x204>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001df2:	8862      	ldrh	r2, [r4, #2]
 8001df4:	0453      	lsls	r3, r2, #17
 8001df6:	d547      	bpl.n	8001e88 <AS5047P_SetZeroPosition+0x458>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001df8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f aeea 	bne.w	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
	instance->error.errorCode = errCode;
 8001e02:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001e04:	4b60      	ldr	r3, [pc, #384]	; (8001f88 <AS5047P_SetZeroPosition+0x558>)
	instance->error.errorCode = errCode;
 8001e06:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001e08:	60e3      	str	r3, [r4, #12]
 8001e0a:	e6e4      	b.n	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001e0c:	8862      	ldrh	r2, [r4, #2]
 8001e0e:	0453      	lsls	r3, r2, #17
 8001e10:	d554      	bpl.n	8001ebc <AS5047P_SetZeroPosition+0x48c>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001e12:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f47f af1b 	bne.w	8001c52 <AS5047P_SetZeroPosition+0x222>
	instance->error.errorCode = errCode;
 8001e1c:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <AS5047P_SetZeroPosition+0x558>)
	instance->error.errorCode = errCode;
 8001e20:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001e22:	60e3      	str	r3, [r4, #12]
 8001e24:	e715      	b.n	8001c52 <AS5047P_SetZeroPosition+0x222>
  instance->buffTx = frameTx;
 8001e26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e2a:	80a3      	strh	r3, [r4, #4]
  lowLevHwErr = AS5047P_HAL_SPI_Transaction( &(instance->buffTx), &(instance->buffRx), instance->id);
 8001e2c:	4631      	mov	r1, r6
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f000 f8da 	bl	8001fe8 <AS5047P_HAL_SPI_Transaction>
  if( lowLevHwErr != 0 )
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f47f af7d 	bne.w	8001d34 <AS5047P_SetZeroPosition+0x304>
  if( (instance->buffRx) & AS5047P_FRAME_EF)
 8001e3a:	8861      	ldrh	r1, [r4, #2]
 8001e3c:	8822      	ldrh	r2, [r4, #0]
 8001e3e:	0448      	lsls	r0, r1, #17
 8001e40:	d4cb      	bmi.n	8001dda <AS5047P_SetZeroPosition+0x3aa>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001e42:	f3c1 030e 	ubfx	r3, r1, #0, #15
  v ^= v >> 1;
 8001e46:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001e4a:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001e4e:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001e52:	fb08 f803 	mul.w	r8, r8, r3
  if ( parityCalculated == parityReceived )
 8001e56:	f3c8 7800 	ubfx	r8, r8, #28, #1
 8001e5a:	ebb8 3fd1 	cmp.w	r8, r1, lsr #15
 8001e5e:	f47f aee2 	bne.w	8001c26 <AS5047P_SetZeroPosition+0x1f6>
      if( tmpResponse == 0 )
 8001e62:	f3c1 010d 	ubfx	r1, r1, #0, #14
    return 0;
 8001e66:	f04f 0800 	mov.w	r8, #0
      if( tmpResponse == 0 )
 8001e6a:	2900      	cmp	r1, #0
 8001e6c:	f47f aee2 	bne.w	8001c34 <AS5047P_SetZeroPosition+0x204>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001e70:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f aedb 	bne.w	8001c30 <AS5047P_SetZeroPosition+0x200>
	instance->error.errorCode = errCode;
 8001e7a:	2116      	movs	r1, #22
	    instance->error.msg = errMesage[errCode];
 8001e7c:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <AS5047P_SetZeroPosition+0x55c>)
	instance->error.errorCode = errCode;
 8001e7e:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001e80:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001e82:	f04f 38ff 	mov.w	r8, #4294967295
 8001e86:	e6d5      	b.n	8001c34 <AS5047P_SetZeroPosition+0x204>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001e88:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001e8c:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001e90:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001e94:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001e98:	fb08 f803 	mul.w	r8, r8, r3
  if ( parityCalculated == parityReceived )
 8001e9c:	f3c8 7800 	ubfx	r8, r8, #28, #1
 8001ea0:	ebb8 3fd2 	cmp.w	r8, r2, lsr #15
 8001ea4:	f43f ae97 	beq.w	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001ea8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f ae92 	bne.w	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
	instance->error.errorCode = errCode;
 8001eb2:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <AS5047P_SetZeroPosition+0x560>)
	instance->error.errorCode = errCode;
 8001eb6:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001eb8:	60e3      	str	r3, [r4, #12]
 8001eba:	e68c      	b.n	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
  parityCalculated = AS5047P_CalcParity( frameRx & (AS5047P_FRAME_DATA | AS5047P_FRAME_EF) );
 8001ebc:	f3c2 030e 	ubfx	r3, r2, #0, #15
  v ^= v >> 1;
 8001ec0:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
  v ^= v >> 2;
 8001ec4:	ea83 0393 	eor.w	r3, r3, r3, lsr #2
  v = (v & 0x11111111U) * 0x11111111U;
 8001ec8:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
 8001ecc:	f04f 3111 	mov.w	r1, #286331153	; 0x11111111
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
  if ( parityCalculated == parityReceived )
 8001ed4:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8001ed8:	ebb3 3fd2 	cmp.w	r3, r2, lsr #15
 8001edc:	f43f aeb9 	beq.w	8001c52 <AS5047P_SetZeroPosition+0x222>
    if( (instance->error.errorCode == 0) && (errCode != 0) )
 8001ee0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f aeb4 	bne.w	8001c52 <AS5047P_SetZeroPosition+0x222>
	instance->error.errorCode = errCode;
 8001eea:	2203      	movs	r2, #3
	    instance->error.msg = errMesage[errCode];
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <AS5047P_SetZeroPosition+0x560>)
	instance->error.errorCode = errCode;
 8001eee:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001ef0:	60e3      	str	r3, [r4, #12]
 8001ef2:	e6ae      	b.n	8001c52 <AS5047P_SetZeroPosition+0x222>
	instance->error.errorCode = errCode;
 8001ef4:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <AS5047P_SetZeroPosition+0x564>)
	instance->error.errorCode = errCode;
 8001ef8:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001efa:	60e3      	str	r3, [r4, #12]
 8001efc:	e6a9      	b.n	8001c52 <AS5047P_SetZeroPosition+0x222>
	instance->error.errorCode = errCode;
 8001efe:	2201      	movs	r2, #1
	    instance->error.msg = errMesage[errCode];
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <AS5047P_SetZeroPosition+0x564>)
	instance->error.errorCode = errCode;
 8001f02:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001f04:	60e3      	str	r3, [r4, #12]
 8001f06:	e666      	b.n	8001bd6 <AS5047P_SetZeroPosition+0x1a6>
	instance->error.errorCode = errCode;
 8001f08:	2103      	movs	r1, #3
	    instance->error.msg = errMesage[errCode];
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <AS5047P_SetZeroPosition+0x560>)
	instance->error.errorCode = errCode;
 8001f0c:	8121      	strh	r1, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001f0e:	60e3      	str	r3, [r4, #12]
	  return -1;
 8001f10:	f04f 38ff 	mov.w	r8, #4294967295
 8001f14:	e68e      	b.n	8001c34 <AS5047P_SetZeroPosition+0x204>
	instance->error.errorCode = errCode;
 8001f16:	2202      	movs	r2, #2
	    instance->error.msg = errMesage[errCode];
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <AS5047P_SetZeroPosition+0x558>)
	instance->error.errorCode = errCode;
 8001f1a:	8122      	strh	r2, [r4, #8]
	    instance->error.msg = errMesage[errCode];
 8001f1c:	60e3      	str	r3, [r4, #12]
 8001f1e:	e5b4      	b.n	8001a8a <AS5047P_SetZeroPosition+0x5a>
     if(errCode != 0 )
 8001f20:	f1b8 0f00 	cmp.w	r8, #0
 8001f24:	f47f ad8c 	bne.w	8001a40 <AS5047P_SetZeroPosition+0x10>
     AS5047P_HAL_Delay_ms(1);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f000 f837 	bl	8001f9c <AS5047P_HAL_Delay_ms>
    currPosition = AS5047P_ReadRegister(instance, AS5047P_ANGLECOM ,AS5047P_OPT_ENABLED);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7fe fb2b 	bl	8000590 <AS5047P_ReadRegister>
    if(currPosition < 0 )
 8001f3a:	f1b0 0800 	subs.w	r8, r0, #0
 8001f3e:	f6ff ad7f 	blt.w	8001a40 <AS5047P_SetZeroPosition+0x10>
    errCode = AS5047P_WriteRegister(instance, AS5047P_ZPOSL , newZPOSLContent,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001f42:	2601      	movs	r6, #1
    newZPOSLContent = (currZPOSLContent & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (currPosition & AS5047P_ZPOSL_ZPOSL);
 8001f44:	f008 023f 	and.w	r2, r8, #63	; 0x3f
    errCode = AS5047P_WriteRegister(instance, AS5047P_ZPOSL , newZPOSLContent,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001f48:	433a      	orrs	r2, r7
 8001f4a:	4633      	mov	r3, r6
 8001f4c:	2117      	movs	r1, #23
 8001f4e:	9600      	str	r6, [sp, #0]
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7fe fc07 	bl	8000764 <AS5047P_WriteRegister>
    errCode |= AS5047P_WriteRegister(instance, AS5047P_ZPOSM , newZPOSMContent,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001f56:	9600      	str	r6, [sp, #0]
    errCode = AS5047P_WriteRegister(instance, AS5047P_ZPOSL , newZPOSLContent,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001f58:	4605      	mov	r5, r0
    errCode |= AS5047P_WriteRegister(instance, AS5047P_ZPOSM , newZPOSMContent,AS5047P_OPT_ENABLED,AS5047P_OPT_ENABLED);
 8001f5a:	f3c8 1287 	ubfx	r2, r8, #6, #8
 8001f5e:	4633      	mov	r3, r6
 8001f60:	2116      	movs	r1, #22
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7fe fbfe 	bl	8000764 <AS5047P_WriteRegister>
 8001f68:	4305      	orrs	r5, r0
 8001f6a:	b22d      	sxth	r5, r5
    if(errCode != 0 )
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	f47f ad67 	bne.w	8001a40 <AS5047P_SetZeroPosition+0x10>
    AS5047P_HAL_Delay_ms(1);
 8001f72:	4630      	mov	r0, r6
    instance->zeroPosCalibrated = true;
 8001f74:	71a6      	strb	r6, [r4, #6]
    AS5047P_HAL_Delay_ms(1);
 8001f76:	f000 f811 	bl	8001f9c <AS5047P_HAL_Delay_ms>
}
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	b003      	add	sp, #12
 8001f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f82:	bf00      	nop
 8001f84:	20000690 	.word	0x20000690
 8001f88:	200000a0 	.word	0x200000a0
 8001f8c:	200006e0 	.word	0x200006e0
 8001f90:	200000f0 	.word	0x200000f0
 8001f94:	20000050 	.word	0x20000050

08001f98 <AS5047P_GetID>:
 *
 ************************************************************************************/
uint16_t AS5047P_GetID(AS5047P_Instance * instance)
{
  return instance->id;
}
 8001f98:	8800      	ldrh	r0, [r0, #0]
 8001f9a:	4770      	bx	lr

08001f9c <AS5047P_HAL_Delay_ms>:
 * 	Function stalls program execution for 'ms' miliseconds.
 *
 ************************************************************************************/
void AS5047P_HAL_Delay_ms(uint32_t ms)
{
  HAL_Delay(ms);
 8001f9c:	f000 bbc2 	b.w	8002724 <HAL_Delay>

08001fa0 <AS5047P_HAL_Init>:
 * 	Description:
 * 	Function used to initialize low level hardware (CS lines, GPIO, etc).
 *
 ************************************************************************************/
uint8_t AS5047P_HAL_Init(uint16_t id)
{
 8001fa0:	b510      	push	{r4, lr}
  switch (id)
 8001fa2:	b140      	cbz	r0, 8001fb6 <AS5047P_HAL_Init+0x16>
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <AS5047P_HAL_Init+0x34>)
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <AS5047P_HAL_Init+0x38>)
 8001fa8:	8819      	ldrh	r1, [r3, #0]
 8001faa:	6810      	ldr	r0, [r2, #0]
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f000 fd55 	bl	8002a5c <HAL_GPIO_WritePin>
  {   //--- Slave with this id doesn't exist
      return -1;
  }

  return 0;
}
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	bd10      	pop	{r4, pc}
       handlerSPI = &hspi4;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <AS5047P_HAL_Init+0x3c>)
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <AS5047P_HAL_Init+0x38>)
 8001fba:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <AS5047P_HAL_Init+0x40>)
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8001fbc:	4c05      	ldr	r4, [pc, #20]	; (8001fd4 <AS5047P_HAL_Init+0x34>)
       handlerSPI = &hspi4;
 8001fbe:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <AS5047P_HAL_Init+0x44>)
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 8001fc0:	6008      	str	r0, [r1, #0]
       handlerSPI = &hspi4;
 8001fc2:	601a      	str	r2, [r3, #0]
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8001fc4:	2110      	movs	r1, #16
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 8001fc6:	2201      	movs	r2, #1
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8001fc8:	8021      	strh	r1, [r4, #0]
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 8001fca:	f000 fd47 	bl	8002a5c <HAL_GPIO_WritePin>
}
 8001fce:	2000      	movs	r0, #0
 8001fd0:	bd10      	pop	{r4, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20002c4c 	.word	0x20002c4c
 8001fd8:	20002c50 	.word	0x20002c50
 8001fdc:	20002c54 	.word	0x20002c54
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	20002c78 	.word	0x20002c78

08001fe8 <AS5047P_HAL_SPI_Transaction>:
 * 	Description:
 * 	Function is used for full-duplex SPI transactions as well as slave selection.
 *
 ************************************************************************************/
uint8_t AS5047P_HAL_SPI_Transaction(uint16_t * pTx, uint16_t * pRx, uint16_t id)
{
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	4606      	mov	r6, r0
 8001fee:	b083      	sub	sp, #12
 8001ff0:	460f      	mov	r7, r1
  switch (id)
 8001ff2:	b1ca      	cbz	r2, 8002028 <AS5047P_HAL_SPI_Transaction+0x40>
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 8001ff4:	4c20      	ldr	r4, [pc, #128]	; (8002078 <AS5047P_HAL_SPI_Transaction+0x90>)
 8001ff6:	4d21      	ldr	r5, [pc, #132]	; (800207c <AS5047P_HAL_SPI_Transaction+0x94>)
 8001ff8:	8821      	ldrh	r1, [r4, #0]
 8001ffa:	6828      	ldr	r0, [r5, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f000 fd2d 	bl	8002a5c <HAL_GPIO_WritePin>
  spiStatus = HAL_SPI_TransmitReceive(handlerSPI, (uint8_t *)pTx, (uint8_t *)pRx, 1, HAL_MAX_DELAY);
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <AS5047P_HAL_SPI_Transaction+0x98>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	4631      	mov	r1, r6
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	463a      	mov	r2, r7
 8002010:	2301      	movs	r3, #1
 8002012:	f001 f877 	bl	8003104 <HAL_SPI_TransmitReceive>
 8002016:	6828      	ldr	r0, [r5, #0]
 8002018:	8821      	ldrh	r1, [r4, #0]
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 800201a:	2201      	movs	r2, #1
 800201c:	f000 fd1e 	bl	8002a5c <HAL_GPIO_WritePin>
  {
      return -1;
  }

  return 0;
}
 8002020:	2000      	movs	r0, #0
 8002022:	b003      	add	sp, #12
 8002024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 8002028:	4d16      	ldr	r5, [pc, #88]	; (8002084 <AS5047P_HAL_SPI_Transaction+0x9c>)
       handlerSPI = &hspi4;
 800202a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002080 <AS5047P_HAL_SPI_Transaction+0x98>
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 800202e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 800207c <AS5047P_HAL_SPI_Transaction+0x94>
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8002032:	f8df a044 	ldr.w	sl, [pc, #68]	; 8002078 <AS5047P_HAL_SPI_Transaction+0x90>
       handlerSPI = &hspi4;
 8002036:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002088 <AS5047P_HAL_SPI_Transaction+0xa0>
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 800203a:	f8cb 5000 	str.w	r5, [fp]
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 800203e:	2410      	movs	r4, #16
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 8002040:	4628      	mov	r0, r5
 8002042:	4621      	mov	r1, r4
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8002044:	f8aa 4000 	strh.w	r4, [sl]
       handlerSPI = &hspi4;
 8002048:	f8c8 9000 	str.w	r9, [r8]
   HAL_GPIO_WritePin(gpioPort, gpioPin, state);
 800204c:	f000 fd06 	bl	8002a5c <HAL_GPIO_WritePin>
  spiStatus = HAL_SPI_TransmitReceive(handlerSPI, (uint8_t *)pTx, (uint8_t *)pRx, 1, HAL_MAX_DELAY);
 8002050:	f04f 33ff 	mov.w	r3, #4294967295
 8002054:	4631      	mov	r1, r6
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f8d8 0000 	ldr.w	r0, [r8]
 800205c:	463a      	mov	r2, r7
 800205e:	2301      	movs	r3, #1
 8002060:	f001 f850 	bl	8003104 <HAL_SPI_TransmitReceive>
       gpioPort = SPI4_AS5047P_A_CS_GPIO_Port;
 8002064:	f8cb 5000 	str.w	r5, [fp]
       gpioPin = SPI4_AS5047P_A_CS_Pin;
 8002068:	f8aa 4000 	strh.w	r4, [sl]
       handlerSPI = &hspi4;
 800206c:	f8c8 9000 	str.w	r9, [r8]
 8002070:	4621      	mov	r1, r4
 8002072:	4628      	mov	r0, r5
 8002074:	e7d1      	b.n	800201a <AS5047P_HAL_SPI_Transaction+0x32>
 8002076:	bf00      	nop
 8002078:	20002c4c 	.word	0x20002c4c
 800207c:	20002c50 	.word	0x20002c50
 8002080:	20002c54 	.word	0x20002c54
 8002084:	40021000 	.word	0x40021000
 8002088:	20002c78 	.word	0x20002c78

0800208c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	2600      	movs	r6, #0
{
 8002092:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8002098:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209c:	4a6b      	ldr	r2, [pc, #428]	; (800224c <MX_GPIO_Init+0x1c0>)
 800209e:	9600      	str	r6, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	960b      	str	r6, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_AS5047P_A_CS_GPIO_Port, SPI4_AS5047P_A_CS_Pin, GPIO_PIN_SET);
 80020a4:	4c6a      	ldr	r4, [pc, #424]	; (8002250 <MX_GPIO_Init+0x1c4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020a6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002260 <MX_GPIO_Init+0x1d4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020aa:	4f6a      	ldr	r7, [pc, #424]	; (8002254 <MX_GPIO_Init+0x1c8>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8002264 <MX_GPIO_Init+0x1d8>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b0:	f041 0110 	orr.w	r1, r1, #16
 80020b4:	6311      	str	r1, [r2, #48]	; 0x30
 80020b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020b8:	f001 0110 	and.w	r1, r1, #16
 80020bc:	9100      	str	r1, [sp, #0]
 80020be:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c0:	9601      	str	r6, [sp, #4]
 80020c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020c4:	f041 0104 	orr.w	r1, r1, #4
 80020c8:	6311      	str	r1, [r2, #48]	; 0x30
 80020ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020cc:	f001 0104 	and.w	r1, r1, #4
 80020d0:	9101      	str	r1, [sp, #4]
 80020d2:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d4:	9602      	str	r6, [sp, #8]
 80020d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80020dc:	6311      	str	r1, [r2, #48]	; 0x30
 80020de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80020e4:	9102      	str	r1, [sp, #8]
 80020e6:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	9603      	str	r6, [sp, #12]
 80020ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020ec:	f041 0101 	orr.w	r1, r1, #1
 80020f0:	6311      	str	r1, [r2, #48]	; 0x30
 80020f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020f4:	f001 0101 	and.w	r1, r1, #1
 80020f8:	9103      	str	r1, [sp, #12]
 80020fa:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fc:	9604      	str	r6, [sp, #16]
 80020fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002100:	f041 0102 	orr.w	r1, r1, #2
 8002104:	6311      	str	r1, [r2, #48]	; 0x30
 8002106:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002108:	f001 0102 	and.w	r1, r1, #2
 800210c:	9104      	str	r1, [sp, #16]
 800210e:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002110:	9605      	str	r6, [sp, #20]
 8002112:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002114:	f041 0108 	orr.w	r1, r1, #8
 8002118:	6311      	str	r1, [r2, #48]	; 0x30
 800211a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800211c:	f001 0108 	and.w	r1, r1, #8
 8002120:	9105      	str	r1, [sp, #20]
 8002122:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002124:	9606      	str	r6, [sp, #24]
 8002126:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002128:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800212c:	6311      	str	r1, [r2, #48]	; 0x30
 800212e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002130:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002134:	9206      	str	r2, [sp, #24]
  HAL_GPIO_WritePin(SPI4_AS5047P_A_CS_GPIO_Port, SPI4_AS5047P_A_CS_Pin, GPIO_PIN_SET);
 8002136:	4620      	mov	r0, r4
 8002138:	2201      	movs	r2, #1
 800213a:	2110      	movs	r1, #16
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800213c:	9d06      	ldr	r5, [sp, #24]
  HAL_GPIO_WritePin(SPI4_AS5047P_A_CS_GPIO_Port, SPI4_AS5047P_A_CS_Pin, GPIO_PIN_SET);
 800213e:	f000 fc8d 	bl	8002a5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002142:	4632      	mov	r2, r6
 8002144:	4648      	mov	r0, r9
 8002146:	f244 0181 	movw	r1, #16513	; 0x4081
 800214a:	f000 fc87 	bl	8002a5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	f04f 0b01 	mov.w	fp, #1
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002152:	4632      	mov	r2, r6
 8002154:	4638      	mov	r0, r7
 8002156:	2140      	movs	r1, #64	; 0x40
  GPIO_InitStruct.Pin = SPI4_AS5047P_A_CS_Pin;
 8002158:	2510      	movs	r5, #16
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800215a:	f000 fc7f 	bl	8002a5c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SPI4_AS5047P_A_CS_GPIO_Port, &GPIO_InitStruct);
 800215e:	4620      	mov	r0, r4
 8002160:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2403      	movs	r4, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002164:	e9cd 5b07 	strd	r5, fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002168:	4d3b      	ldr	r5, [pc, #236]	; (8002258 <MX_GPIO_Init+0x1cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(SPI4_AS5047P_A_CS_GPIO_Port, &GPIO_InitStruct);
 800216e:	f000 fb4d 	bl	800280c <HAL_GPIO_Init>
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002172:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002178:	4838      	ldr	r0, [pc, #224]	; (800225c <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800217c:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002180:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002184:	f000 fb42 	bl	800280c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2502      	movs	r5, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800218c:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218e:	4833      	ldr	r0, [pc, #204]	; (800225c <MX_GPIO_Init+0x1d0>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002190:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f000 fb36 	bl	800280c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	a907      	add	r1, sp, #28
 80021a2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021a4:	2386      	movs	r3, #134	; 0x86
 80021a6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	e9cd 5608 	strd	r5, r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021ac:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f000 fb2c 	bl	800280c <HAL_GPIO_Init>
  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	a907      	add	r1, sp, #28
 80021b6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80021b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80021bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	e9cd b608 	strd	fp, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f000 fb22 	bl	800280c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021c8:	4648      	mov	r0, r9
 80021ca:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021d8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f000 fb16 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021e0:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021e2:	a907      	add	r1, sp, #28
 80021e4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	e9cd b608 	strd	fp, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f000 fb0d 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021f2:	a907      	add	r1, sp, #28
 80021f4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f000 fb05 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002202:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	a907      	add	r1, sp, #28
 8002208:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800220a:	220a      	movs	r2, #10
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800220c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800220e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	e9cd 5608 	strd	r5, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f000 faf9 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800221a:	4640      	mov	r0, r8
 800221c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800221e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002222:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	e9cd 6608 	strd	r6, r6, [sp, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002228:	f000 faf0 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800222c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002230:	a907      	add	r1, sp, #28
 8002232:	4638      	mov	r0, r7
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002234:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	e9cd 5608 	strd	r5, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800223e:	9207      	str	r2, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002240:	f000 fae4 	bl	800280c <HAL_GPIO_Init>

}
 8002244:	b00d      	add	sp, #52	; 0x34
 8002246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40021000 	.word	0x40021000
 8002254:	40021800 	.word	0x40021800
 8002258:	10110000 	.word	0x10110000
 800225c:	40020800 	.word	0x40020800
 8002260:	40020400 	.word	0x40020400
 8002264:	40020000 	.word	0x40020000

08002268 <_write>:
 * 	Description:
 *	Overloaded function used by printf.
 *
 ************************************************************************************/
int _write(int file, char *ptr, int len)
{
 8002268:	b510      	push	{r4, lr}

    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
{
 800226e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <_write+0x14>)
 8002272:	b292      	uxth	r2, r2
 8002274:	f001 f9a6 	bl	80035c4 <HAL_UART_Transmit>
    return len;
}
 8002278:	4620      	mov	r0, r4
 800227a:	bd10      	pop	{r4, pc}
 800227c:	20002cd0 	.word	0x20002cd0

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002282:	2400      	movs	r4, #0
{
 8002284:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800228a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002292:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <SystemClock_Config+0x90>)
 8002298:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80022a6:	6411      	str	r1, [r2, #64]	; 0x40
 80022a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022aa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80022ae:	9201      	str	r2, [sp, #4]
 80022b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b2:	9402      	str	r4, [sp, #8]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022be:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022c4:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ca:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 360;
 80022cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022d0:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022d6:	2204      	movs	r2, #4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80022dc:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022de:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e4:	9512      	str	r5, [sp, #72]	; 0x48
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e6:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e8:	f000 fbfa 	bl	8002ae0 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022ec:	f000 fbba 	bl	8002a64 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022f8:	a803      	add	r0, sp, #12
 80022fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fc:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fe:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002300:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002302:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002306:	f000 fdff 	bl	8002f08 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800230a:	b014      	add	sp, #80	; 0x50
 800230c:	bd70      	pop	{r4, r5, r6, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000

08002318 <main>:
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
  HAL_Init();
 800231c:	f000 f9d6 	bl	80026cc <HAL_Init>
  SystemClock_Config();
 8002320:	f7ff ffae 	bl	8002280 <SystemClock_Config>
  MX_GPIO_Init();
 8002324:	f7ff feb2 	bl	800208c <MX_GPIO_Init>
  MX_SPI4_Init();
 8002328:	f000 f85a 	bl	80023e0 <MX_SPI4_Init>
  MX_USART3_UART_Init();
 800232c:	f000 f92a 	bl	8002584 <MX_USART3_UART_Init>
  AS5047P_Init(&encInstanceA, 0); // Bind encoder with id = 0
 8002330:	4825      	ldr	r0, [pc, #148]	; (80023c8 <main+0xb0>)
 8002332:	4d26      	ldr	r5, [pc, #152]	; (80023cc <main+0xb4>)
	printf("Encoder ID[%d]> Error %d: %s\n",AS5047P_GetID(&encInstanceA),AS5047P_GetError(&encInstanceA).errorCode, AS5047P_GetError(&encInstanceA).msg);
 8002334:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80023d8 <main+0xc0>
     if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 8002338:	4e25      	ldr	r6, [pc, #148]	; (80023d0 <main+0xb8>)
     encPositionA = AS5047P_ReadPosition(&encInstanceA, AS5047P_OPT_ENABLED);
 800233a:	4604      	mov	r4, r0
  AS5047P_Init(&encInstanceA, 0); // Bind encoder with id = 0
 800233c:	2100      	movs	r1, #0
 800233e:	f7fe fb3b 	bl	80009b8 <AS5047P_Init>
  AS5047P_SetFactorySettings(&encInstanceA);
 8002342:	4620      	mov	r0, r4
 8002344:	f7fe fce2 	bl	8000d0c <AS5047P_SetFactorySettings>
  AS5047P_SetZeroPosition(&encInstanceA);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fb71 	bl	8001a30 <AS5047P_SetZeroPosition>
 800234e:	e011      	b.n	8002374 <main+0x5c>
	printf("Encoder ID[%d]> Position: %d\n",AS5047P_GetID(&encInstanceA), encPositionA);
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff fe21 	bl	8001f98 <AS5047P_GetID>
 8002356:	f9b5 2000 	ldrsh.w	r2, [r5]
 800235a:	4601      	mov	r1, r0
 800235c:	481d      	ldr	r0, [pc, #116]	; (80023d4 <main+0xbc>)
 800235e:	f001 f9f1 	bl	8003744 <iprintf>
     if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 8002362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002366:	4630      	mov	r0, r6
 8002368:	f000 fb72 	bl	8002a50 <HAL_GPIO_ReadPin>
 800236c:	bb38      	cbnz	r0, 80023be <main+0xa6>
     HAL_Delay(100);
 800236e:	2064      	movs	r0, #100	; 0x64
 8002370:	f000 f9d8 	bl	8002724 <HAL_Delay>
     encPositionA = AS5047P_ReadPosition(&encInstanceA, AS5047P_OPT_ENABLED);
 8002374:	2101      	movs	r1, #1
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff fa3c 	bl	80017f4 <AS5047P_ReadPosition>
 800237c:	8028      	strh	r0, [r5, #0]
     if( !AS5047P_ErrorPending(&encInstanceA) )
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff f888 	bl	8001494 <AS5047P_ErrorPending>
 8002384:	2800      	cmp	r0, #0
 8002386:	d0e3      	beq.n	8002350 <main+0x38>
	printf("Encoder ID[%d]> Error %d: %s\n",AS5047P_GetID(&encInstanceA),AS5047P_GetError(&encInstanceA).errorCode, AS5047P_GetError(&encInstanceA).msg);
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff fe05 	bl	8001f98 <AS5047P_GetID>
 800238e:	4621      	mov	r1, r4
 8002390:	4607      	mov	r7, r0
 8002392:	4668      	mov	r0, sp
 8002394:	f7ff f884 	bl	80014a0 <AS5047P_GetError>
 8002398:	f9bd 8000 	ldrsh.w	r8, [sp]
 800239c:	4621      	mov	r1, r4
 800239e:	a802      	add	r0, sp, #8
 80023a0:	f7ff f87e 	bl	80014a0 <AS5047P_GetError>
 80023a4:	4639      	mov	r1, r7
 80023a6:	4642      	mov	r2, r8
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	4648      	mov	r0, r9
 80023ac:	f001 f9ca 	bl	8003744 <iprintf>
     if( HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) )
 80023b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b4:	4630      	mov	r0, r6
 80023b6:	f000 fb4b 	bl	8002a50 <HAL_GPIO_ReadPin>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d0d7      	beq.n	800236e <main+0x56>
	 AS5047P_ErrorAck(&encInstanceA);
 80023be:	4620      	mov	r0, r4
 80023c0:	f7ff f876 	bl	80014b0 <AS5047P_ErrorAck>
 80023c4:	e7d3      	b.n	800236e <main+0x56>
 80023c6:	bf00      	nop
 80023c8:	20002c58 	.word	0x20002c58
 80023cc:	20002c74 	.word	0x20002c74
 80023d0:	40020800 	.word	0x40020800
 80023d4:	08004524 	.word	0x08004524
 80023d8:	08004544 	.word	0x08004544

080023dc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop

080023e0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80023e0:	b538      	push	{r3, r4, r5, lr}

  hspi4.Instance = SPI4;
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <MX_SPI4_Init+0x44>)
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <MX_SPI4_Init+0x48>)
 80023e6:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80023e8:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80023ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023f0:	2201      	movs	r2, #1
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80023f2:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f6:	2410      	movs	r4, #16
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80023f8:	6059      	str	r1, [r3, #4]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80023fa:	60d8      	str	r0, [r3, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 10;
 80023fc:	210a      	movs	r1, #10
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80023fe:	615a      	str	r2, [r3, #20]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002400:	4618      	mov	r0, r3
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	2200      	movs	r2, #0
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002404:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi4.Init.CRCPolynomial = 10;
 8002408:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800240a:	609a      	str	r2, [r3, #8]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800240c:	611a      	str	r2, [r3, #16]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800240e:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002414:	f000 fe36 	bl	8003084 <HAL_SPI_Init>
 8002418:	b900      	cbnz	r0, 800241c <MX_SPI4_Init+0x3c>
  {
    Error_Handler();
  }

}
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002420:	f7ff bfdc 	b.w	80023dc <Error_Handler>
 8002424:	20002c78 	.word	0x20002c78
 8002428:	40013400 	.word	0x40013400

0800242c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800242c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI4)
 800242e:	6801      	ldr	r1, [r0, #0]
 8002430:	4a17      	ldr	r2, [pc, #92]	; (8002490 <HAL_SPI_MspInit+0x64>)
{
 8002432:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI4)
 8002436:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800243c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002440:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI4)
 8002442:	d001      	beq.n	8002448 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002444:	b008      	add	sp, #32
 8002446:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002448:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002450:	4810      	ldr	r0, [pc, #64]	; (8002494 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002452:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002456:	6451      	str	r1, [r2, #68]	; 0x44
 8002458:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800245a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800245e:	9101      	str	r1, [sp, #4]
 8002460:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002476:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002478:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800247a:	2564      	movs	r5, #100	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800247e:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002484:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002488:	f000 f9c0 	bl	800280c <HAL_GPIO_Init>
}
 800248c:	b008      	add	sp, #32
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	40013400 	.word	0x40013400
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_MspInit+0x34>)
 800249c:	2100      	movs	r1, #0
 800249e:	9100      	str	r1, [sp, #0]
 80024a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
 80024a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	9101      	str	r1, [sp, #4]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	b002      	add	sp, #8
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d4:	e7fe      	b.n	80024d4 <HardFault_Handler>
 80024d6:	bf00      	nop

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	e7fe      	b.n	80024d8 <MemManage_Handler>
 80024da:	bf00      	nop

080024dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024dc:	e7fe      	b.n	80024dc <BusFault_Handler>
 80024de:	bf00      	nop

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler>
 80024e2:	bf00      	nop

080024e4 <SVC_Handler>:
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <DebugMon_Handler>:
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop

080024ec <PendSV_Handler>:
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop

080024f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f0:	f000 b906 	b.w	8002700 <HAL_IncTick>

080024f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	1e16      	subs	r6, r2, #0
 80024f8:	dd07      	ble.n	800250a <_read+0x16>
 80024fa:	460c      	mov	r4, r1
 80024fc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80024fe:	f3af 8000 	nop.w
 8002502:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	42a5      	cmp	r5, r4
 8002508:	d1f9      	bne.n	80024fe <_read+0xa>
	}

return len;
}
 800250a:	4630      	mov	r0, r6
 800250c:	bd70      	pop	{r4, r5, r6, pc}
 800250e:	bf00      	nop

08002510 <_close>:
}

int _close(int file)
{
	return -1;
}
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800251e:	2000      	movs	r0, #0
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002524:	2001      	movs	r0, #1
 8002526:	4770      	bx	lr

08002528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002528:	2000      	movs	r0, #0
 800252a:	4770      	bx	lr

0800252c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <_sbrk+0x34>)
{
 800252e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	b133      	cbz	r3, 8002542 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002534:	4418      	add	r0, r3
 8002536:	4669      	mov	r1, sp
 8002538:	4288      	cmp	r0, r1
 800253a:	d808      	bhi.n	800254e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800253c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <_sbrk+0x38>)
 8002544:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002546:	4418      	add	r0, r3
 8002548:	4669      	mov	r1, sp
 800254a:	4288      	cmp	r0, r1
 800254c:	d9f6      	bls.n	800253c <_sbrk+0x10>
		errno = ENOMEM;
 800254e:	f001 f8c7 	bl	80036e0 <__errno>
 8002552:	230c      	movs	r3, #12
 8002554:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd08      	pop	{r3, pc}
 800255e:	bf00      	nop
 8002560:	20002c68 	.word	0x20002c68
 8002564:	20002d18 	.word	0x20002d18

08002568 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <SystemInit+0x18>)
 800256a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800256e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002572:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800257a:	6099      	str	r1, [r3, #8]
#endif
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002584:	b538      	push	{r3, r4, r5, lr}

  huart3.Instance = USART3;
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_USART3_UART_Init+0x34>)
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <MX_USART3_UART_Init+0x38>)
 800258a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258c:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002590:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX;
 8002592:	2408      	movs	r4, #8
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8002594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002598:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 800259a:	605d      	str	r5, [r3, #4]
  huart3.Init.Mode = UART_MODE_TX;
 800259c:	615c      	str	r4, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 800259e:	61d9      	str	r1, [r3, #28]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025a0:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a4:	611a      	str	r2, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	619a      	str	r2, [r3, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025a8:	f000 ff6a 	bl	8003480 <HAL_UART_Init>
 80025ac:	b900      	cbnz	r0, 80025b0 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80025ae:	bd38      	pop	{r3, r4, r5, pc}
 80025b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80025b4:	f7ff bf12 	b.w	80023dc <Error_Handler>
 80025b8:	20002cd0 	.word	0x20002cd0
 80025bc:	40004800 	.word	0x40004800

080025c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART3)
 80025c2:	6801      	ldr	r1, [r0, #0]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_UART_MspInit+0x68>)
{
 80025c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART3)
 80025ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80025d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80025d4:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 80025d6:	d001      	beq.n	80025dc <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025d8:	b008      	add	sp, #32
 80025da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80025dc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e6:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80025ea:	6411      	str	r1, [r2, #64]	; 0x40
 80025ec:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80025ee:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 80025f2:	9101      	str	r1, [sp, #4]
 80025f4:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002600:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800260e:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2402      	movs	r4, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002614:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800261a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f000 f8f5 	bl	800280c <HAL_GPIO_Init>
}
 8002622:	b008      	add	sp, #32
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	bf00      	nop
 8002628:	40004800 	.word	0x40004800
 800262c:	40020c00 	.word	0x40020c00

08002630 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002668 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002636:	e003      	b.n	8002640 <LoopCopyDataInit>

08002638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800263a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800263c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800263e:	3104      	adds	r1, #4

08002640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002640:	480b      	ldr	r0, [pc, #44]	; (8002670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002648:	d3f6      	bcc.n	8002638 <CopyDataInit>
  ldr  r2, =_sbss
 800264a:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800264c:	e002      	b.n	8002654 <LoopFillZerobss>

0800264e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800264e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002650:	f842 3b04 	str.w	r3, [r2], #4

08002654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002658:	d3f9      	bcc.n	800264e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800265a:	f7ff ff85 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265e:	f001 f845 	bl	80036ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7ff fe59 	bl	8002318 <main>
  bx  lr    
 8002666:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack       /* set stack pointer */
 8002668:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800266c:	08004624 	.word	0x08004624
  ldr  r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002674:	20002c30 	.word	0x20002c30
  ldr  r2, =_sbss
 8002678:	20002c30 	.word	0x20002c30
  ldr  r3, = _ebss
 800267c:	20002d18 	.word	0x20002d18

08002680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC_IRQHandler>
	...

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_InitTick+0x3c>)
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_InitTick+0x40>)
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
{
 800268e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002694:	fbb0 f0f2 	udiv	r0, r0, r2
 8002698:	fbb3 f0f0 	udiv	r0, r3, r0
 800269c:	f000 f89c 	bl	80027d8 <HAL_SYSTICK_Config>
 80026a0:	b908      	cbnz	r0, 80026a6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	2d0f      	cmp	r5, #15
 80026a4:	d901      	bls.n	80026aa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80026a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80026a8:	bd38      	pop	{r3, r4, r5, pc}
 80026aa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	4602      	mov	r2, r0
 80026ae:	4629      	mov	r1, r5
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 f85a 	bl	800276c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_InitTick+0x44>)
 80026ba:	4620      	mov	r0, r4
 80026bc:	601d      	str	r5, [r3, #0]
}
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	20002bc4 	.word	0x20002bc4
 80026c4:	20002bc0 	.word	0x20002bc0
 80026c8:	20002bc8 	.word	0x20002bc8

080026cc <HAL_Init>:
{
 80026cc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_Init+0x30>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 f82d 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7ff ffc8 	bl	8002684 <HAL_InitTick>
  HAL_MspInit();
 80026f4:	f7ff fed0 	bl	8002498 <HAL_MspInit>
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	bd08      	pop	{r3, pc}
 80026fc:	40023c00 	.word	0x40023c00

08002700 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_IncTick+0x10>)
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_IncTick+0x14>)
 8002704:	6811      	ldr	r1, [r2, #0]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	440b      	add	r3, r1
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20002d10 	.word	0x20002d10
 8002714:	20002bc4 	.word	0x20002bc4

08002718 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002718:	4b01      	ldr	r3, [pc, #4]	; (8002720 <HAL_GetTick+0x8>)
 800271a:	6818      	ldr	r0, [r3, #0]
}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20002d10 	.word	0x20002d10

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff fff6 	bl	8002718 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800272e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002730:	d002      	beq.n	8002738 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_Delay+0x20>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002738:	f7ff ffee 	bl	8002718 <HAL_GetTick>
 800273c:	1b40      	subs	r0, r0, r5
 800273e:	42a0      	cmp	r0, r4
 8002740:	d3fa      	bcc.n	8002738 <HAL_Delay+0x14>
  {
  }
}
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	20002bc4 	.word	0x20002bc4

08002748 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800274a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002750:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002752:	0200      	lsls	r0, r0, #8
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800275c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002760:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002762:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_NVIC_SetPriority+0x64>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002774:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002776:	f1c3 0507 	rsb	r5, r3, #7
 800277a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	bf28      	it	cs
 8002782:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002784:	2c06      	cmp	r4, #6
 8002786:	d919      	bls.n	80027bc <HAL_NVIC_SetPriority+0x50>
 8002788:	3b03      	subs	r3, #3
 800278a:	f04f 34ff 	mov.w	r4, #4294967295
 800278e:	409c      	lsls	r4, r3
 8002790:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	40aa      	lsls	r2, r5
 800279a:	ea21 0102 	bic.w	r1, r1, r2
 800279e:	fa01 f203 	lsl.w	r2, r1, r3
 80027a2:	4322      	orrs	r2, r4
 80027a4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80027a6:	2800      	cmp	r0, #0
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	db0a      	blt.n	80027c2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80027b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80027b4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027b8:	bc30      	pop	{r4, r5}
 80027ba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027bc:	2400      	movs	r4, #0
 80027be:	4623      	mov	r3, r4
 80027c0:	e7e8      	b.n	8002794 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <HAL_NVIC_SetPriority+0x68>)
 80027c4:	f000 000f 	and.w	r0, r0, #15
 80027c8:	4403      	add	r3, r0
 80027ca:	761a      	strb	r2, [r3, #24]
 80027cc:	bc30      	pop	{r4, r5}
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	e000ecfc 	.word	0xe000ecfc

080027d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	3801      	subs	r0, #1
 80027da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80027de:	d20e      	bcs.n	80027fe <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	4c08      	ldr	r4, [pc, #32]	; (8002808 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	20f0      	movs	r0, #240	; 0xf0
 80027ea:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80027f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2001      	movs	r0, #1
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e010 	.word	0xe000e010
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002810:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	f8df e228 	ldr.w	lr, [pc, #552]	; 8002a40 <HAL_GPIO_Init+0x234>
{
 8002818:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2400      	movs	r4, #0
 800281c:	e003      	b.n	8002826 <HAL_GPIO_Init+0x1a>
 800281e:	3401      	adds	r4, #1
 8002820:	2c10      	cmp	r4, #16
 8002822:	f000 809b 	beq.w	800295c <HAL_GPIO_Init+0x150>
    ioposition = 0x01U << position;
 8002826:	2301      	movs	r3, #1
 8002828:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 800282e:	4293      	cmp	r3, r2
 8002830:	d1f5      	bne.n	800281e <HAL_GPIO_Init+0x12>
 8002832:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002836:	f026 0910 	bic.w	r9, r6, #16
 800283a:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 800283e:	2303      	movs	r3, #3
 8002840:	f109 37ff 	add.w	r7, r9, #4294967295
 8002844:	fa03 f30c 	lsl.w	r3, r3, ip
 8002848:	2f01      	cmp	r7, #1
 800284a:	ea6f 0303 	mvn.w	r3, r3
 800284e:	fa05 f50c 	lsl.w	r5, r5, ip
 8002852:	f240 8086 	bls.w	8002962 <HAL_GPIO_Init+0x156>
      temp = GPIOx->PUPDR;
 8002856:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002858:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800285c:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 800285e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002860:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002864:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002866:	fa05 f30c 	lsl.w	r3, r5, ip
 800286a:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 800286c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800286e:	00f3      	lsls	r3, r6, #3
 8002870:	d5d5      	bpl.n	800281e <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	4d6c      	ldr	r5, [pc, #432]	; (8002a24 <HAL_GPIO_Init+0x218>)
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800287a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800287e:	646b      	str	r3, [r5, #68]	; 0x44
 8002880:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8002882:	f024 0303 	bic.w	r3, r4, #3
 8002886:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800288a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800288e:	9501      	str	r5, [sp, #4]
 8002890:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	f004 0503 	and.w	r5, r4, #3
 8002898:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289c:	4d62      	ldr	r5, [pc, #392]	; (8002a28 <HAL_GPIO_Init+0x21c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028a0:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a4:	270f      	movs	r7, #15
 80028a6:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ac:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b0:	d02d      	beq.n	800290e <HAL_GPIO_Init+0x102>
 80028b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028b6:	42a8      	cmp	r0, r5
 80028b8:	f000 8084 	beq.w	80029c4 <HAL_GPIO_Init+0x1b8>
 80028bc:	4d5b      	ldr	r5, [pc, #364]	; (8002a2c <HAL_GPIO_Init+0x220>)
 80028be:	42a8      	cmp	r0, r5
 80028c0:	f000 8086 	beq.w	80029d0 <HAL_GPIO_Init+0x1c4>
 80028c4:	4d5a      	ldr	r5, [pc, #360]	; (8002a30 <HAL_GPIO_Init+0x224>)
 80028c6:	42a8      	cmp	r0, r5
 80028c8:	f000 8088 	beq.w	80029dc <HAL_GPIO_Init+0x1d0>
 80028cc:	4d59      	ldr	r5, [pc, #356]	; (8002a34 <HAL_GPIO_Init+0x228>)
 80028ce:	42a8      	cmp	r0, r5
 80028d0:	f000 808a 	beq.w	80029e8 <HAL_GPIO_Init+0x1dc>
 80028d4:	4d58      	ldr	r5, [pc, #352]	; (8002a38 <HAL_GPIO_Init+0x22c>)
 80028d6:	42a8      	cmp	r0, r5
 80028d8:	f000 8092 	beq.w	8002a00 <HAL_GPIO_Init+0x1f4>
 80028dc:	4d57      	ldr	r5, [pc, #348]	; (8002a3c <HAL_GPIO_Init+0x230>)
 80028de:	42a8      	cmp	r0, r5
 80028e0:	f000 8094 	beq.w	8002a0c <HAL_GPIO_Init+0x200>
 80028e4:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8002a44 <HAL_GPIO_Init+0x238>
 80028e8:	4560      	cmp	r0, ip
 80028ea:	f000 8083 	beq.w	80029f4 <HAL_GPIO_Init+0x1e8>
 80028ee:	f8df c158 	ldr.w	ip, [pc, #344]	; 8002a48 <HAL_GPIO_Init+0x23c>
 80028f2:	4560      	cmp	r0, ip
 80028f4:	f000 8090 	beq.w	8002a18 <HAL_GPIO_Init+0x20c>
 80028f8:	f8df c150 	ldr.w	ip, [pc, #336]	; 8002a4c <HAL_GPIO_Init+0x240>
 80028fc:	4560      	cmp	r0, ip
 80028fe:	bf0c      	ite	eq
 8002900:	f04f 0c09 	moveq.w	ip, #9
 8002904:	f04f 0c0a 	movne.w	ip, #10
 8002908:	fa0c f509 	lsl.w	r5, ip, r9
 800290c:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290e:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8002910:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002914:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002916:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8002918:	bf54      	ite	pl
 800291a:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800291c:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800291e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8002922:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002926:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8002928:	bf54      	ite	pl
 800292a:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800292c:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 800292e:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002936:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8002938:	bf54      	ite	pl
 800293a:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800293c:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 800293e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8002942:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002946:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002948:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 800294c:	bf54      	ite	pl
 800294e:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002950:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8002954:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002958:	f47f af65 	bne.w	8002826 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 800295c:	b003      	add	sp, #12
 800295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002962:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002968:	68cf      	ldr	r7, [r1, #12]
 800296a:	fa07 f70c 	lsl.w	r7, r7, ip
 800296e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002972:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002974:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002978:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002980:	40a7      	lsls	r7, r4
 8002982:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002986:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002988:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800298c:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298e:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8002992:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002994:	f47f af63 	bne.w	800285e <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3U];
 8002998:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800299c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a0:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80029a4:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a8:	00bf      	lsls	r7, r7, #2
 80029aa:	f04f 0b0f 	mov.w	fp, #15
 80029ae:	fa0b fb07 	lsl.w	fp, fp, r7
 80029b2:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b6:	690d      	ldr	r5, [r1, #16]
 80029b8:	40bd      	lsls	r5, r7
 80029ba:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	f8c9 5020 	str.w	r5, [r9, #32]
 80029c2:	e74c      	b.n	800285e <HAL_GPIO_Init+0x52>
 80029c4:	f04f 0c01 	mov.w	ip, #1
 80029c8:	fa0c f509 	lsl.w	r5, ip, r9
 80029cc:	432f      	orrs	r7, r5
 80029ce:	e79e      	b.n	800290e <HAL_GPIO_Init+0x102>
 80029d0:	f04f 0c02 	mov.w	ip, #2
 80029d4:	fa0c f509 	lsl.w	r5, ip, r9
 80029d8:	432f      	orrs	r7, r5
 80029da:	e798      	b.n	800290e <HAL_GPIO_Init+0x102>
 80029dc:	f04f 0c03 	mov.w	ip, #3
 80029e0:	fa0c f509 	lsl.w	r5, ip, r9
 80029e4:	432f      	orrs	r7, r5
 80029e6:	e792      	b.n	800290e <HAL_GPIO_Init+0x102>
 80029e8:	f04f 0c04 	mov.w	ip, #4
 80029ec:	fa0c f509 	lsl.w	r5, ip, r9
 80029f0:	432f      	orrs	r7, r5
 80029f2:	e78c      	b.n	800290e <HAL_GPIO_Init+0x102>
 80029f4:	f04f 0c07 	mov.w	ip, #7
 80029f8:	fa0c f509 	lsl.w	r5, ip, r9
 80029fc:	432f      	orrs	r7, r5
 80029fe:	e786      	b.n	800290e <HAL_GPIO_Init+0x102>
 8002a00:	f04f 0c05 	mov.w	ip, #5
 8002a04:	fa0c f509 	lsl.w	r5, ip, r9
 8002a08:	432f      	orrs	r7, r5
 8002a0a:	e780      	b.n	800290e <HAL_GPIO_Init+0x102>
 8002a0c:	f04f 0c06 	mov.w	ip, #6
 8002a10:	fa0c f509 	lsl.w	r5, ip, r9
 8002a14:	432f      	orrs	r7, r5
 8002a16:	e77a      	b.n	800290e <HAL_GPIO_Init+0x102>
 8002a18:	f04f 0c08 	mov.w	ip, #8
 8002a1c:	fa0c f509 	lsl.w	r5, ip, r9
 8002a20:	432f      	orrs	r7, r5
 8002a22:	e774      	b.n	800290e <HAL_GPIO_Init+0x102>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40021400 	.word	0x40021400
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	40013c00 	.word	0x40013c00
 8002a44:	40021c00 	.word	0x40021c00
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40022400 	.word	0x40022400

08002a50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a50:	6903      	ldr	r3, [r0, #16]
 8002a52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002a54:	bf14      	ite	ne
 8002a56:	2001      	movne	r0, #1
 8002a58:	2000      	moveq	r0, #0
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	b902      	cbnz	r2, 8002a60 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a5e:	0409      	lsls	r1, r1, #16
 8002a60:	6181      	str	r1, [r0, #24]
  }
}
 8002a62:	4770      	bx	lr

08002a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a64:	b530      	push	{r4, r5, lr}
 8002a66:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a6a:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a6c:	4c1a      	ldr	r4, [pc, #104]	; (8002ad8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2200      	movs	r2, #0
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a82:	2301      	movs	r3, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a86:	600b      	str	r3, [r1, #0]
  tickstart = HAL_GetTick();
 8002a88:	f7ff fe46 	bl	8002718 <HAL_GetTick>
 8002a8c:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a8e:	e005      	b.n	8002a9c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a90:	f7ff fe42 	bl	8002718 <HAL_GetTick>
 8002a94:	1b40      	subs	r0, r0, r5
 8002a96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a9a:	d816      	bhi.n	8002aca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a9c:	6863      	ldr	r3, [r4, #4]
 8002a9e:	03da      	lsls	r2, r3, #15
 8002aa0:	d5f6      	bpl.n	8002a90 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_PWREx_EnableOverDrive+0x78>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aa4:	4c0c      	ldr	r4, [pc, #48]	; (8002ad8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002aaa:	f7ff fe35 	bl	8002718 <HAL_GetTick>
 8002aae:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ab0:	e005      	b.n	8002abe <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ab2:	f7ff fe31 	bl	8002718 <HAL_GetTick>
 8002ab6:	1b40      	subs	r0, r0, r5
 8002ab8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002abc:	d805      	bhi.n	8002aca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	039b      	lsls	r3, r3, #14
 8002ac2:	d5f6      	bpl.n	8002ab2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002ac4:	2000      	movs	r0, #0
}
 8002ac6:	b003      	add	sp, #12
 8002ac8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002aca:	2003      	movs	r0, #3
}
 8002acc:	b003      	add	sp, #12
 8002ace:	bd30      	pop	{r4, r5, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	420e0040 	.word	0x420e0040
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	420e0044 	.word	0x420e0044

08002ae0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f000 8132 	beq.w	8002d4a <HAL_RCC_OscConfig+0x26a>
{
 8002ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	6803      	ldr	r3, [r0, #0]
 8002aec:	07dd      	lsls	r5, r3, #31
{
 8002aee:	b082      	sub	sp, #8
 8002af0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	d52f      	bpl.n	8002b54 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af4:	49ac      	ldr	r1, [pc, #688]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002af6:	688a      	ldr	r2, [r1, #8]
 8002af8:	f002 020c 	and.w	r2, r2, #12
 8002afc:	2a04      	cmp	r2, #4
 8002afe:	f000 80ea 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	688a      	ldr	r2, [r1, #8]
 8002b04:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b08:	2a08      	cmp	r2, #8
 8002b0a:	f000 80e0 	beq.w	8002cce <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	f000 80e9 	beq.w	8002cea <HAL_RCC_OscConfig+0x20a>
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	f000 8178 	beq.w	8002e10 <HAL_RCC_OscConfig+0x330>
 8002b20:	4da1      	ldr	r5, [pc, #644]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002b22:	682a      	ldr	r2, [r5, #0]
 8002b24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b28:	602a      	str	r2, [r5, #0]
 8002b2a:	682a      	ldr	r2, [r5, #0]
 8002b2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b30:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80de 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7ff fdee 	bl	8002718 <HAL_GetTick>
 8002b3c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e005      	b.n	8002b4c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7ff fdea 	bl	8002718 <HAL_GetTick>
 8002b44:	1b80      	subs	r0, r0, r6
 8002b46:	2864      	cmp	r0, #100	; 0x64
 8002b48:	f200 80f2 	bhi.w	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	039b      	lsls	r3, r3, #14
 8002b50:	d4f6      	bmi.n	8002b40 <HAL_RCC_OscConfig+0x60>
 8002b52:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b54:	079f      	lsls	r7, r3, #30
 8002b56:	d475      	bmi.n	8002c44 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b58:	071a      	lsls	r2, r3, #28
 8002b5a:	d515      	bpl.n	8002b88 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5c:	6963      	ldr	r3, [r4, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a5 	beq.w	8002cae <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b64:	4b91      	ldr	r3, [pc, #580]	; (8002dac <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	4d90      	ldr	r5, [pc, #576]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b6c:	f7ff fdd4 	bl	8002718 <HAL_GetTick>
 8002b70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	e005      	b.n	8002b80 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7ff fdd0 	bl	8002718 <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	2802      	cmp	r0, #2
 8002b7c:	f200 80d8 	bhi.w	8002d30 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b82:	079b      	lsls	r3, r3, #30
 8002b84:	d5f6      	bpl.n	8002b74 <HAL_RCC_OscConfig+0x94>
 8002b86:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b88:	0758      	lsls	r0, r3, #29
 8002b8a:	d53b      	bpl.n	8002c04 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8c:	4a86      	ldr	r2, [pc, #536]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002b8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b90:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002b94:	f040 80db 	bne.w	8002d4e <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bac:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4d80      	ldr	r5, [pc, #512]	; (8002db0 <HAL_RCC_OscConfig+0x2d0>)
 8002bb0:	682a      	ldr	r2, [r5, #0]
 8002bb2:	05d1      	lsls	r1, r2, #23
 8002bb4:	f140 80ac 	bpl.w	8002d10 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	68a3      	ldr	r3, [r4, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f000 80c9 	beq.w	8002d52 <HAL_RCC_OscConfig+0x272>
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	f000 812f 	beq.w	8002e24 <HAL_RCC_OscConfig+0x344>
 8002bc6:	4d78      	ldr	r5, [pc, #480]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002bc8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	672a      	str	r2, [r5, #112]	; 0x70
 8002bd0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 80bf 	bne.w	8002d5c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fd9b 	bl	8002718 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002be6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	e006      	b.n	8002bf8 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7ff fd95 	bl	8002718 <HAL_GetTick>
 8002bee:	eba0 0008 	sub.w	r0, r0, r8
 8002bf2:	42b8      	cmp	r0, r7
 8002bf4:	f200 809c 	bhi.w	8002d30 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bfa:	0798      	lsls	r0, r3, #30
 8002bfc:	d4f5      	bmi.n	8002bea <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfe:	2e00      	cmp	r6, #0
 8002c00:	f040 80dc 	bne.w	8002dbc <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c04:	69a0      	ldr	r0, [r4, #24]
 8002c06:	b1c8      	cbz	r0, 8002c3c <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c08:	4d67      	ldr	r5, [pc, #412]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002c0a:	68aa      	ldr	r2, [r5, #8]
 8002c0c:	f002 020c 	and.w	r2, r2, #12
 8002c10:	2a08      	cmp	r2, #8
 8002c12:	f000 80d9 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4a67      	ldr	r2, [pc, #412]	; (8002db4 <HAL_RCC_OscConfig+0x2d4>)
 8002c18:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	f000 810b 	beq.w	8002e38 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff fd79 	bl	8002718 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002c28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	e004      	b.n	8002c36 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7ff fd74 	bl	8002718 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	2802      	cmp	r0, #2
 8002c34:	d87c      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	d4f7      	bmi.n	8002c2c <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2000      	movs	r0, #0
}
 8002c3e:	b002      	add	sp, #8
 8002c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002c46:	6891      	ldr	r1, [r2, #8]
 8002c48:	f011 0f0c 	tst.w	r1, #12
 8002c4c:	d024      	beq.n	8002c98 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	6891      	ldr	r1, [r2, #8]
 8002c50:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c54:	2908      	cmp	r1, #8
 8002c56:	d01c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c58:	68e3      	ldr	r3, [r4, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8092 	beq.w	8002d84 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	4d51      	ldr	r5, [pc, #324]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c68:	f7ff fd56 	bl	8002718 <HAL_GetTick>
 8002c6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	e004      	b.n	8002c7a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7ff fd52 	bl	8002718 <HAL_GetTick>
 8002c74:	1b80      	subs	r0, r0, r6
 8002c76:	2802      	cmp	r0, #2
 8002c78:	d85a      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	682b      	ldr	r3, [r5, #0]
 8002c7c:	0798      	lsls	r0, r3, #30
 8002c7e:	d5f7      	bpl.n	8002c70 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	6922      	ldr	r2, [r4, #16]
 8002c84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	e762      	b.n	8002b58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	6852      	ldr	r2, [r2, #4]
 8002c94:	0256      	lsls	r6, r2, #9
 8002c96:	d4df      	bmi.n	8002c58 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c98:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	0795      	lsls	r5, r2, #30
 8002c9e:	d54b      	bpl.n	8002d38 <HAL_RCC_OscConfig+0x258>
 8002ca0:	68e2      	ldr	r2, [r4, #12]
 8002ca2:	2a01      	cmp	r2, #1
 8002ca4:	d048      	beq.n	8002d38 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
}
 8002ca8:	b002      	add	sp, #8
 8002caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4d3d      	ldr	r5, [pc, #244]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002cb2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cb4:	f7ff fd30 	bl	8002718 <HAL_GetTick>
 8002cb8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cba:	e004      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7ff fd2c 	bl	8002718 <HAL_GetTick>
 8002cc0:	1b80      	subs	r0, r0, r6
 8002cc2:	2802      	cmp	r0, #2
 8002cc4:	d834      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002cc8:	079f      	lsls	r7, r3, #30
 8002cca:	d4f7      	bmi.n	8002cbc <HAL_RCC_OscConfig+0x1dc>
 8002ccc:	e75b      	b.n	8002b86 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	684a      	ldr	r2, [r1, #4]
 8002cd0:	0250      	lsls	r0, r2, #9
 8002cd2:	f57f af1c 	bpl.w	8002b0e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd6:	4a34      	ldr	r2, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	0391      	lsls	r1, r2, #14
 8002cdc:	f57f af3a 	bpl.w	8002b54 <HAL_RCC_OscConfig+0x74>
 8002ce0:	6862      	ldr	r2, [r4, #4]
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	f47f af36 	bne.w	8002b54 <HAL_RCC_OscConfig+0x74>
 8002ce8:	e7dd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cea:	4a2f      	ldr	r2, [pc, #188]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fd10 	bl	8002718 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf8:	4d2b      	ldr	r5, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfc:	e004      	b.n	8002d08 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfe:	f7ff fd0b 	bl	8002718 <HAL_GetTick>
 8002d02:	1b80      	subs	r0, r0, r6
 8002d04:	2864      	cmp	r0, #100	; 0x64
 8002d06:	d813      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	039a      	lsls	r2, r3, #14
 8002d0c:	d5f7      	bpl.n	8002cfe <HAL_RCC_OscConfig+0x21e>
 8002d0e:	e720      	b.n	8002b52 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d10:	682a      	ldr	r2, [r5, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d16:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8002d18:	f7ff fcfe 	bl	8002718 <HAL_GetTick>
 8002d1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	05da      	lsls	r2, r3, #23
 8002d22:	f53f af49 	bmi.w	8002bb8 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff fcf7 	bl	8002718 <HAL_GetTick>
 8002d2a:	1bc0      	subs	r0, r0, r7
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d9f6      	bls.n	8002d1e <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8002d30:	2003      	movs	r0, #3
}
 8002d32:	b002      	add	sp, #8
 8002d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	491b      	ldr	r1, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002d3a:	6920      	ldr	r0, [r4, #16]
 8002d3c:	680a      	ldr	r2, [r1, #0]
 8002d3e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d42:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002d46:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d48:	e706      	b.n	8002b58 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8002d4a:	2001      	movs	r0, #1
}
 8002d4c:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2600      	movs	r6, #0
 8002d50:	e72d      	b.n	8002bae <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
 8002d54:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d5c:	f7ff fcdc 	bl	8002718 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4d11      	ldr	r5, [pc, #68]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002d62:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e005      	b.n	8002d76 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7ff fcd5 	bl	8002718 <HAL_GetTick>
 8002d6e:	eba0 0008 	sub.w	r0, r0, r8
 8002d72:	42b8      	cmp	r0, r7
 8002d74:	d8dc      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d78:	079b      	lsls	r3, r3, #30
 8002d7a:	d5f6      	bpl.n	8002d6a <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8002d7c:	2e00      	cmp	r6, #0
 8002d7e:	f43f af41 	beq.w	8002c04 <HAL_RCC_OscConfig+0x124>
 8002d82:	e01b      	b.n	8002dbc <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4d08      	ldr	r5, [pc, #32]	; (8002da8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8002d88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fcc5 	bl	8002718 <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d90:	e004      	b.n	8002d9c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7ff fcc1 	bl	8002718 <HAL_GetTick>
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d8c9      	bhi.n	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	0799      	lsls	r1, r3, #30
 8002da0:	d4f7      	bmi.n	8002d92 <HAL_RCC_OscConfig+0x2b2>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	e6d8      	b.n	8002b58 <HAL_RCC_OscConfig+0x78>
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	42470e80 	.word	0x42470e80
 8002db0:	40007000 	.word	0x40007000
 8002db4:	42470060 	.word	0x42470060
 8002db8:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_RCC_OscConfig+0x3b4>)
 8002dbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	e71d      	b.n	8002c04 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc8:	2801      	cmp	r0, #1
 8002dca:	f43f af6d 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002dce:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	69e2      	ldr	r2, [r4, #28]
 8002dd2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002dd6:	4291      	cmp	r1, r2
 8002dd8:	f47f af65 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x1c6>
 8002ddc:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dde:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	4291      	cmp	r1, r2
 8002de4:	f47f af5f 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002de8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dec:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dee:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df0:	428a      	cmp	r2, r1
 8002df2:	f47f af58 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002df6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002df8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dfc:	4291      	cmp	r1, r2
 8002dfe:	f47f af52 	bne.w	8002ca6 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8002e08:	1a18      	subs	r0, r3, r0
 8002e0a:	bf18      	it	ne
 8002e0c:	2001      	movne	r0, #1
 8002e0e:	e74b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_OscConfig+0x3b4>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e767      	b.n	8002cf4 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x3b4>)
 8002e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e28:	f042 0204 	orr.w	r2, r2, #4
 8002e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	671a      	str	r2, [r3, #112]	; 0x70
 8002e36:	e791      	b.n	8002d5c <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8002e38:	f7ff fc6e 	bl	8002718 <HAL_GetTick>
 8002e3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7ff fc6a 	bl	8002718 <HAL_GetTick>
 8002e44:	1b80      	subs	r0, r0, r6
 8002e46:	2802      	cmp	r0, #2
 8002e48:	f63f af72 	bhi.w	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	0199      	lsls	r1, r3, #6
 8002e50:	d4f6      	bmi.n	8002e40 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e52:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8002e56:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002e5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e5e:	4333      	orrs	r3, r6
 8002e60:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002e64:	0852      	lsrs	r2, r2, #1
 8002e66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e6a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	490a      	ldr	r1, [pc, #40]	; (8002e98 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002e72:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e74:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e76:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002e78:	f7ff fc4e 	bl	8002718 <HAL_GetTick>
 8002e7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	e005      	b.n	8002e8c <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7ff fc4a 	bl	8002718 <HAL_GetTick>
 8002e84:	1b40      	subs	r0, r0, r5
 8002e86:	2802      	cmp	r0, #2
 8002e88:	f63f af52 	bhi.w	8002d30 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	019a      	lsls	r2, r3, #6
 8002e90:	d5f6      	bpl.n	8002e80 <HAL_RCC_OscConfig+0x3a0>
 8002e92:	e6d3      	b.n	8002c3c <HAL_RCC_OscConfig+0x15c>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	42470060 	.word	0x42470060

08002e9c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9c:	4917      	ldr	r1, [pc, #92]	; (8002efc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002e9e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea0:	688b      	ldr	r3, [r1, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d01b      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x46>
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d117      	bne.n	8002ede <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb0:	684b      	ldr	r3, [r1, #4]
 8002eb2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	d114      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	6849      	ldr	r1, [r1, #4]
 8002ebe:	4810      	ldr	r0, [pc, #64]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ec0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ec4:	fba1 0100 	umull	r0, r1, r1, r0
 8002ec8:	f7fd f9e2 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_GetSysClockFreq+0x60>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002ed8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002edc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002ede:	4808      	ldr	r0, [pc, #32]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002ee0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002ee2:	4808      	ldr	r0, [pc, #32]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002ee4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	684b      	ldr	r3, [r1, #4]
 8002ee8:	4806      	ldr	r0, [pc, #24]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x68>)
 8002eea:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002eee:	fba3 0100 	umull	r0, r1, r3, r0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f7fd f9cc 	bl	8000290 <__aeabi_uldivmod>
 8002ef8:	e7e8      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x30>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f08:	b160      	cbz	r0, 8002f24 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0a:	4a49      	ldr	r2, [pc, #292]	; (8003030 <HAL_RCC_ClockConfig+0x128>)
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	428b      	cmp	r3, r1
 8002f14:	d208      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	b2cb      	uxtb	r3, r1
 8002f18:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8002f24:	2001      	movs	r0, #1
}
 8002f26:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	6803      	ldr	r3, [r0, #0]
{
 8002f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2e:	079d      	lsls	r5, r3, #30
 8002f30:	d514      	bpl.n	8002f5c <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f32:	075c      	lsls	r4, r3, #29
 8002f34:	d504      	bpl.n	8002f40 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f36:	4c3f      	ldr	r4, [pc, #252]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002f38:	68a2      	ldr	r2, [r4, #8]
 8002f3a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002f3e:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	071a      	lsls	r2, r3, #28
 8002f42:	d504      	bpl.n	8002f4e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f44:	4c3b      	ldr	r4, [pc, #236]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002f46:	68a2      	ldr	r2, [r4, #8]
 8002f48:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002f4c:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	4c39      	ldr	r4, [pc, #228]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002f50:	6885      	ldr	r5, [r0, #8]
 8002f52:	68a2      	ldr	r2, [r4, #8]
 8002f54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f58:	432a      	orrs	r2, r5
 8002f5a:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5c:	07df      	lsls	r7, r3, #31
 8002f5e:	4604      	mov	r4, r0
 8002f60:	460d      	mov	r5, r1
 8002f62:	d522      	bpl.n	8002faa <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f64:	6842      	ldr	r2, [r0, #4]
 8002f66:	2a01      	cmp	r2, #1
 8002f68:	d057      	beq.n	800301a <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	1e93      	subs	r3, r2, #2
 8002f6c:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	d959      	bls.n	8003028 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	0799      	lsls	r1, r3, #30
 8002f76:	d525      	bpl.n	8002fc4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f78:	4e2e      	ldr	r6, [pc, #184]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002f7a:	68b3      	ldr	r3, [r6, #8]
 8002f7c:	f023 0303 	bic.w	r3, r3, #3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f84:	f7ff fbc8 	bl	8002718 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f8c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7ff fbc2 	bl	8002718 <HAL_GetTick>
 8002f94:	eba0 0008 	sub.w	r0, r0, r8
 8002f98:	42b8      	cmp	r0, r7
 8002f9a:	d843      	bhi.n	8003024 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9c:	68b3      	ldr	r3, [r6, #8]
 8002f9e:	6862      	ldr	r2, [r4, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_RCC_ClockConfig+0x128>)
 8002fac:	6813      	ldr	r3, [r2, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	42ab      	cmp	r3, r5
 8002fb4:	d909      	bls.n	8002fca <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	b2eb      	uxtb	r3, r5
 8002fb8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	d002      	beq.n	8002fca <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
}
 8002fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	075a      	lsls	r2, r3, #29
 8002fce:	d506      	bpl.n	8002fde <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4918      	ldr	r1, [pc, #96]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002fd2:	68e0      	ldr	r0, [r4, #12]
 8002fd4:	688a      	ldr	r2, [r1, #8]
 8002fd6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002fda:	4302      	orrs	r2, r0
 8002fdc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	d412      	bmi.n	8003008 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe2:	f7ff ff5b 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 8002fe8:	4c13      	ldr	r4, [pc, #76]	; (8003038 <HAL_RCC_ClockConfig+0x130>)
 8002fea:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8002fec:	4913      	ldr	r1, [pc, #76]	; (800303c <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_RCC_ClockConfig+0x138>)
 8002ff0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ff4:	5ce3      	ldrb	r3, [r4, r3]
 8002ff6:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8002ffa:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002ffe:	f7ff fb41 	bl	8002684 <HAL_InitTick>
  return HAL_OK;
 8003002:	2000      	movs	r0, #0
}
 8003004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 800300a:	6921      	ldr	r1, [r4, #16]
 800300c:	6893      	ldr	r3, [r2, #8]
 800300e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003012:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003016:	6093      	str	r3, [r2, #8]
 8003018:	e7e3      	b.n	8002fe2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_ClockConfig+0x12c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	039e      	lsls	r6, r3, #14
 8003020:	d4aa      	bmi.n	8002f78 <HAL_RCC_ClockConfig+0x70>
 8003022:	e7cf      	b.n	8002fc4 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003024:	2003      	movs	r0, #3
 8003026:	e7ed      	b.n	8003004 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	0198      	lsls	r0, r3, #6
 800302a:	d4a5      	bmi.n	8002f78 <HAL_RCC_ClockConfig+0x70>
 800302c:	e7ca      	b.n	8002fc4 <HAL_RCC_ClockConfig+0xbc>
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00
 8003034:	40023800 	.word	0x40023800
 8003038:	08004564 	.word	0x08004564
 800303c:	20002bc8 	.word	0x20002bc8
 8003040:	20002bc0 	.word	0x20002bc0

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003048:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800304a:	4905      	ldr	r1, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800304c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003050:	6808      	ldr	r0, [r1, #0]
 8003052:	5cd3      	ldrb	r3, [r2, r3]
}
 8003054:	40d8      	lsrs	r0, r3
 8003056:	4770      	bx	lr
 8003058:	40023800 	.word	0x40023800
 800305c:	08004574 	.word	0x08004574
 8003060:	20002bc0 	.word	0x20002bc0

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003068:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800306a:	4905      	ldr	r1, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800306c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003070:	6808      	ldr	r0, [r1, #0]
 8003072:	5cd3      	ldrb	r3, [r2, r3]
}
 8003074:	40d8      	lsrs	r0, r3
 8003076:	4770      	bx	lr
 8003078:	40023800 	.word	0x40023800
 800307c:	08004574 	.word	0x08004574
 8003080:	20002bc0 	.word	0x20002bc0

08003084 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	d03b      	beq.n	8003100 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003088:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308c:	2300      	movs	r3, #0
{
 800308e:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003090:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8003094:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003096:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003098:	b362      	cbz	r2, 80030f4 <HAL_SPI_Init+0x70>
 800309a:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800309c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80030a0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80030a4:	432b      	orrs	r3, r5
 80030a6:	4313      	orrs	r3, r2
 80030a8:	6962      	ldr	r2, [r4, #20]
 80030aa:	69e5      	ldr	r5, [r4, #28]
 80030ac:	6a26      	ldr	r6, [r4, #32]
 80030ae:	430b      	orrs	r3, r1
 80030b0:	4313      	orrs	r3, r2
 80030b2:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 80030b4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030b6:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80030b8:	2502      	movs	r5, #2
 80030ba:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030be:	4333      	orrs	r3, r6
 80030c0:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80030c4:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030c6:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030c8:	0c12      	lsrs	r2, r2, #16
 80030ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030cc:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030d0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030d2:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80030d4:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80030d8:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030da:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030dc:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030de:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e0:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80030e6:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030e8:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 80030ea:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ec:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ee:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80030f4:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80030f8:	f7ff f998 	bl	800242c <HAL_SPI_MspInit>
 80030fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030fe:	e7cd      	b.n	800309c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003100:	2001      	movs	r0, #1
}
 8003102:	4770      	bx	lr

08003104 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003108:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800310c:	2c01      	cmp	r4, #1
{
 800310e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003110:	f000 80aa 	beq.w	8003268 <HAL_SPI_TransmitReceive+0x164>
 8003114:	461e      	mov	r6, r3
 8003116:	2301      	movs	r3, #1
 8003118:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800311c:	4604      	mov	r4, r0
 800311e:	4617      	mov	r7, r2
 8003120:	460d      	mov	r5, r1

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003122:	f7ff faf9 	bl	8002718 <HAL_GetTick>
 8003126:	4680      	mov	r8, r0

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003128:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800312c:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800312e:	b2c0      	uxtb	r0, r0
  initial_TxXferCount = Size;

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003130:	2801      	cmp	r0, #1
 8003132:	d011      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x54>
 8003134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003138:	d009      	beq.n	800314e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800313a:	2002      	movs	r0, #2
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800313c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800313e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003140:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003144:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
}
 8003148:	b002      	add	sp, #8
 800314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800314e:	68a2      	ldr	r2, [r4, #8]
 8003150:	2a00      	cmp	r2, #0
 8003152:	d1f2      	bne.n	800313a <HAL_SPI_TransmitReceive+0x36>
 8003154:	2804      	cmp	r0, #4
 8003156:	d1f0      	bne.n	800313a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003158:	2d00      	cmp	r5, #0
 800315a:	f000 8089 	beq.w	8003270 <HAL_SPI_TransmitReceive+0x16c>
 800315e:	2f00      	cmp	r7, #0
 8003160:	f000 8086 	beq.w	8003270 <HAL_SPI_TransmitReceive+0x16c>
 8003164:	2e00      	cmp	r6, #0
 8003166:	f000 8083 	beq.w	8003270 <HAL_SPI_TransmitReceive+0x16c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800316a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800316e:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003170:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003172:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003174:	bf1c      	itt	ne
 8003176:	2205      	movne	r2, #5
 8003178:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317c:	2200      	movs	r2, #0
 800317e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8003180:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003182:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003184:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8003186:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8003188:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318c:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800318e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003190:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003192:	d403      	bmi.n	800319c <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8003194:	6802      	ldr	r2, [r0, #0]
 8003196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319a:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800319c:	68e2      	ldr	r2, [r4, #12]
 800319e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80031a2:	f000 809d 	beq.w	80032e0 <HAL_SPI_TransmitReceive+0x1dc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8102 	beq.w	80033b0 <HAL_SPI_TransmitReceive+0x2ac>
 80031ac:	2e01      	cmp	r6, #1
 80031ae:	f000 80ff 	beq.w	80033b0 <HAL_SPI_TransmitReceive+0x2ac>
 80031b2:	9b08      	ldr	r3, [sp, #32]
 80031b4:	3301      	adds	r3, #1
        txallowed = 1U;
 80031b6:	f04f 0501 	mov.w	r5, #1
 80031ba:	d027      	beq.n	800320c <HAL_SPI_TransmitReceive+0x108>
 80031bc:	e05a      	b.n	8003274 <HAL_SPI_TransmitReceive+0x170>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	0792      	lsls	r2, r2, #30
 80031c4:	d50f      	bpl.n	80031e6 <HAL_SPI_TransmitReceive+0xe2>
 80031c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80031c8:	b292      	uxth	r2, r2
 80031ca:	b162      	cbz	r2, 80031e6 <HAL_SPI_TransmitReceive+0xe2>
 80031cc:	b15d      	cbz	r5, 80031e6 <HAL_SPI_TransmitReceive+0xe2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80031d4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80031d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031d8:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 80031da:	3a01      	subs	r2, #1
 80031dc:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 80031de:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80031e0:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80031e2:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80031e4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	07d7      	lsls	r7, r2, #31
 80031ea:	d50d      	bpl.n	8003208 <HAL_SPI_TransmitReceive+0x104>
 80031ec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80031ee:	b292      	uxth	r2, r2
 80031f0:	b152      	cbz	r2, 8003208 <HAL_SPI_TransmitReceive+0x104>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80031f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80031fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8003200:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8003202:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8003204:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8003206:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003208:	f7ff fa86 	bl	8002718 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1d4      	bne.n	80031be <HAL_SPI_TransmitReceive+0xba>
 8003214:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1d0      	bne.n	80031be <HAL_SPI_TransmitReceive+0xba>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800321c:	4b90      	ldr	r3, [pc, #576]	; (8003460 <HAL_SPI_TransmitReceive+0x35c>)
 800321e:	4a91      	ldr	r2, [pc, #580]	; (8003464 <HAL_SPI_TransmitReceive+0x360>)
 8003220:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003222:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	0d5b      	lsrs	r3, r3, #21
 800322a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800322e:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003232:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003236:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003238:	d107      	bne.n	800324a <HAL_SPI_TransmitReceive+0x146>
 800323a:	e0ce      	b.n	80033da <HAL_SPI_TransmitReceive+0x2d6>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800323c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800323e:	6822      	ldr	r2, [r4, #0]
      count--;
 8003240:	3b01      	subs	r3, #1
 8003242:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003244:	6893      	ldr	r3, [r2, #8]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	d502      	bpl.n	8003250 <HAL_SPI_TransmitReceive+0x14c>
      if (count == 0U)
 800324a:	9b01      	ldr	r3, [sp, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f5      	bne.n	800323c <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003250:	68a0      	ldr	r0, [r4, #8]
 8003252:	2800      	cmp	r0, #0
 8003254:	f040 80bf 	bne.w	80033d6 <HAL_SPI_TransmitReceive+0x2d2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	9000      	str	r0, [sp, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	9b00      	ldr	r3, [sp, #0]
 8003266:	e769      	b.n	800313c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8003268:	2002      	movs	r0, #2
}
 800326a:	b002      	add	sp, #8
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 8003270:	2001      	movs	r0, #1
 8003272:	e763      	b.n	800313c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003274:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	b923      	cbnz	r3, 8003284 <HAL_SPI_TransmitReceive+0x180>
 800327a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80b0 	beq.w	80033e4 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	0796      	lsls	r6, r2, #30
 800328a:	d50f      	bpl.n	80032ac <HAL_SPI_TransmitReceive+0x1a8>
 800328c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800328e:	b292      	uxth	r2, r2
 8003290:	b162      	cbz	r2, 80032ac <HAL_SPI_TransmitReceive+0x1a8>
 8003292:	b15d      	cbz	r5, 80032ac <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003294:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003296:	7812      	ldrb	r2, [r2, #0]
 8003298:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800329a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800329c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800329e:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 80032a0:	3a01      	subs	r2, #1
 80032a2:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 80032a4:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80032a6:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80032a8:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80032aa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	07d0      	lsls	r0, r2, #31
 80032b0:	d50d      	bpl.n	80032ce <HAL_SPI_TransmitReceive+0x1ca>
 80032b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80032b4:	b292      	uxth	r2, r2
 80032b6:	b152      	cbz	r2, 80032ce <HAL_SPI_TransmitReceive+0x1ca>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 80032be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80032c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80032c6:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80032c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80032ca:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 80032cc:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ce:	f7ff fa23 	bl	8002718 <HAL_GetTick>
 80032d2:	9b08      	ldr	r3, [sp, #32]
 80032d4:	eba0 0008 	sub.w	r0, r0, r8
 80032d8:	4283      	cmp	r3, r0
 80032da:	d8cb      	bhi.n	8003274 <HAL_SPI_TransmitReceive+0x170>
        errorcode = HAL_TIMEOUT;
 80032dc:	2003      	movs	r0, #3
 80032de:	e72d      	b.n	800313c <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06f      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x2c0>
 80032e4:	2e01      	cmp	r6, #1
 80032e6:	d06d      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x2c0>
 80032e8:	9b08      	ldr	r3, [sp, #32]
 80032ea:	3301      	adds	r3, #1
{
 80032ec:	f04f 0501 	mov.w	r5, #1
 80032f0:	d024      	beq.n	800333c <HAL_SPI_TransmitReceive+0x238>
 80032f2:	e02c      	b.n	800334e <HAL_SPI_TransmitReceive+0x24a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	0797      	lsls	r7, r2, #30
 80032fa:	d50d      	bpl.n	8003318 <HAL_SPI_TransmitReceive+0x214>
 80032fc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80032fe:	b292      	uxth	r2, r2
 8003300:	b152      	cbz	r2, 8003318 <HAL_SPI_TransmitReceive+0x214>
 8003302:	b14d      	cbz	r5, 8003318 <HAL_SPI_TransmitReceive+0x214>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003304:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003306:	f831 2b02 	ldrh.w	r2, [r1], #2
 800330a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800330c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800330e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003310:	3a01      	subs	r2, #1
 8003312:	b292      	uxth	r2, r2
 8003314:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8003316:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	07d6      	lsls	r6, r2, #31
 800331c:	d50c      	bpl.n	8003338 <HAL_SPI_TransmitReceive+0x234>
 800331e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003320:	b292      	uxth	r2, r2
 8003322:	b14a      	cbz	r2, 8003338 <HAL_SPI_TransmitReceive+0x234>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003324:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800332c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800332e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003330:	3b01      	subs	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003336:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003338:	f7ff f9ee 	bl	8002718 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800333c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1d7      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1f0>
 8003344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1d3      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x1f0>
 800334c:	e766      	b.n	800321c <HAL_SPI_TransmitReceive+0x118>
 800334e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	b91b      	cbnz	r3, 800335c <HAL_SPI_TransmitReceive+0x258>
 8003354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x2e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	0790      	lsls	r0, r2, #30
 8003362:	d50d      	bpl.n	8003380 <HAL_SPI_TransmitReceive+0x27c>
 8003364:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003366:	b292      	uxth	r2, r2
 8003368:	b152      	cbz	r2, 8003380 <HAL_SPI_TransmitReceive+0x27c>
 800336a:	b14d      	cbz	r5, 8003380 <HAL_SPI_TransmitReceive+0x27c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800336e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003372:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8003374:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003376:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003378:	3a01      	subs	r2, #1
 800337a:	b292      	uxth	r2, r2
 800337c:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 800337e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	07d1      	lsls	r1, r2, #31
 8003384:	d50c      	bpl.n	80033a0 <HAL_SPI_TransmitReceive+0x29c>
 8003386:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003388:	b292      	uxth	r2, r2
 800338a:	b14a      	cbz	r2, 80033a0 <HAL_SPI_TransmitReceive+0x29c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800338c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8003394:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003396:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003398:	3b01      	subs	r3, #1
 800339a:	b29b      	uxth	r3, r3
 800339c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800339e:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033a0:	f7ff f9ba 	bl	8002718 <HAL_GetTick>
 80033a4:	9b08      	ldr	r3, [sp, #32]
 80033a6:	eba0 0008 	sub.w	r0, r0, r8
 80033aa:	4283      	cmp	r3, r0
 80033ac:	d8cf      	bhi.n	800334e <HAL_SPI_TransmitReceive+0x24a>
 80033ae:	e795      	b.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b0:	782b      	ldrb	r3, [r5, #0]
 80033b2:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80033b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033bc:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80033be:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c0:	6322      	str	r2, [r4, #48]	; 0x30
 80033c2:	e6f6      	b.n	80031b2 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80033c8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80033ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80033d4:	e788      	b.n	80032e8 <HAL_SPI_TransmitReceive+0x1e4>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033d6:	2000      	movs	r0, #0
 80033d8:	e6b0      	b.n	800313c <HAL_SPI_TransmitReceive+0x38>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	6893      	ldr	r3, [r2, #8]
 80033de:	0619      	lsls	r1, r3, #24
 80033e0:	d4fc      	bmi.n	80033dc <HAL_SPI_TransmitReceive+0x2d8>
 80033e2:	e735      	b.n	8003250 <HAL_SPI_TransmitReceive+0x14c>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033e4:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_SPI_TransmitReceive+0x35c>)
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_SPI_TransmitReceive+0x360>)
 80033e8:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ea:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	0d5b      	lsrs	r3, r3, #21
 80033f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033fe:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003400:	f47f af23 	bne.w	800324a <HAL_SPI_TransmitReceive+0x146>
 8003404:	9b08      	ldr	r3, [sp, #32]
 8003406:	e006      	b.n	8003416 <HAL_SPI_TransmitReceive+0x312>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003408:	f7ff f986 	bl	8002718 <HAL_GetTick>
 800340c:	9b08      	ldr	r3, [sp, #32]
 800340e:	eba0 0008 	sub.w	r0, r0, r8
 8003412:	4283      	cmp	r3, r0
 8003414:	d906      	bls.n	8003424 <HAL_SPI_TransmitReceive+0x320>
 8003416:	3301      	adds	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	d0df      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x2d8>
 800341c:	6893      	ldr	r3, [r2, #8]
 800341e:	061a      	lsls	r2, r3, #24
 8003420:	d4f2      	bmi.n	8003408 <HAL_SPI_TransmitReceive+0x304>
 8003422:	e715      	b.n	8003250 <HAL_SPI_TransmitReceive+0x14c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003424:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003428:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800342e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003432:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003434:	d018      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x364>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003436:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003438:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800343c:	d107      	bne.n	800344e <HAL_SPI_TransmitReceive+0x34a>
          SPI_RESET_CRC(hspi);
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800344c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800344e:	2001      	movs	r0, #1
 8003450:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003454:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003456:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003458:	4313      	orrs	r3, r2
 800345a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800345c:	6562      	str	r2, [r4, #84]	; 0x54
 800345e:	e66d      	b.n	800313c <HAL_SPI_TransmitReceive+0x38>
 8003460:	20002bc0 	.word	0x20002bc0
 8003464:	165e9f81 	.word	0x165e9f81
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800346e:	d002      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x372>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003470:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003474:	d1df      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x332>
          __HAL_SPI_DISABLE(hspi);
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e7da      	b.n	8003436 <HAL_SPI_TransmitReceive+0x332>

08003480 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003480:	2800      	cmp	r0, #0
 8003482:	f000 8093 	beq.w	80035ac <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800348a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800348c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003490:	4604      	mov	r4, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8085 	beq.w	80035a2 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003498:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800349a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80034a2:	68d8      	ldr	r0, [r3, #12]
 80034a4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034a8:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80034ac:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ae:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034b0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80034b6:	4329      	orrs	r1, r5
 80034b8:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80034ba:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034bc:	6965      	ldr	r5, [r4, #20]
 80034be:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 80034c0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034c4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80034c6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ca:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	69a1      	ldr	r1, [r4, #24]
 80034d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034d8:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034de:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	d034      	beq.n	800354e <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d063      	beq.n	80035b0 <HAL_UART_Init+0x130>
 80034e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d05f      	beq.n	80035b0 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7ff fda8 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	4d32      	ldr	r5, [pc, #200]	; (80035c0 <HAL_UART_Init+0x140>)
 80034f8:	2219      	movs	r2, #25
 80034fa:	fba0 0102 	umull	r0, r1, r0, r2
 80034fe:	009a      	lsls	r2, r3, #2
 8003500:	0f9b      	lsrs	r3, r3, #30
 8003502:	f7fc fec5 	bl	8000290 <__aeabi_uldivmod>
 8003506:	fba5 2100 	umull	r2, r1, r5, r0
 800350a:	0949      	lsrs	r1, r1, #5
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	fb02 0211 	mls	r2, r2, r1, r0
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	3232      	adds	r2, #50	; 0x32
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	fba5 0202 	umull	r0, r2, r5, r2
 800351c:	0109      	lsls	r1, r1, #4
 800351e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8003522:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800352a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003532:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003534:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003538:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800353a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8003540:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003542:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003544:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800354c:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_UART_Init+0x136>
 8003552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003556:	4293      	cmp	r3, r2
 8003558:	d02d      	beq.n	80035b6 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 800355a:	f7ff fd73 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800355e:	6862      	ldr	r2, [r4, #4]
 8003560:	2600      	movs	r6, #0
 8003562:	1892      	adds	r2, r2, r2
 8003564:	f04f 0119 	mov.w	r1, #25
 8003568:	eb46 0306 	adc.w	r3, r6, r6
 800356c:	fba0 0101 	umull	r0, r1, r0, r1
 8003570:	f7fc fe8e 	bl	8000290 <__aeabi_uldivmod>
 8003574:	4e12      	ldr	r6, [pc, #72]	; (80035c0 <HAL_UART_Init+0x140>)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	fba6 2100 	umull	r2, r1, r6, r0
 800357c:	094d      	lsrs	r5, r1, #5
 800357e:	2264      	movs	r2, #100	; 0x64
 8003580:	fb02 0215 	mls	r2, r2, r5, r0
 8003584:	00d2      	lsls	r2, r2, #3
 8003586:	3232      	adds	r2, #50	; 0x32
 8003588:	fba6 1202 	umull	r1, r2, r6, r2
 800358c:	0952      	lsrs	r2, r2, #5
 800358e:	f002 0107 	and.w	r1, r2, #7
 8003592:	0052      	lsls	r2, r2, #1
 8003594:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003598:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800359c:	440a      	add	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e7c0      	b.n	8003524 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80035a2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80035a6:	f7ff f80b 	bl	80025c0 <HAL_UART_MspInit>
 80035aa:	e775      	b.n	8003498 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80035ac:	2001      	movs	r0, #1
}
 80035ae:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7ff fd58 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 80035b4:	e79e      	b.n	80034f4 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b6:	f7ff fd55 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 80035ba:	e7d0      	b.n	800355e <HAL_UART_Init+0xde>
 80035bc:	40011000 	.word	0x40011000
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <HAL_UART_Transmit>:
{
 80035c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c8:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80035ca:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80035ce:	2920      	cmp	r1, #32
{
 80035d0:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 80035d2:	d132      	bne.n	800363a <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d034      	beq.n	8003642 <HAL_UART_Transmit+0x7e>
 80035d8:	9201      	str	r2, [sp, #4]
 80035da:	2a00      	cmp	r2, #0
 80035dc:	d031      	beq.n	8003642 <HAL_UART_Transmit+0x7e>
 80035de:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 80035e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	4604      	mov	r4, r0
 80035e8:	d027      	beq.n	800363a <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 80035ee:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 80035f6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80035fe:	f7ff f88b 	bl	8002718 <HAL_GetTick>
    huart->TxXferSize = Size;
 8003602:	9a01      	ldr	r2, [sp, #4]
 8003604:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003606:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003608:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 800360a:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 800360e:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8003610:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d03b      	beq.n	8003690 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8003618:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800361a:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 800361c:	3801      	subs	r0, #1
 800361e:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003620:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8003624:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003626:	d01b      	beq.n	8003660 <HAL_UART_Transmit+0x9c>
 8003628:	1c78      	adds	r0, r7, #1
 800362a:	d13b      	bne.n	80036a4 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	6810      	ldr	r0, [r2, #0]
 800362e:	0601      	lsls	r1, r0, #24
 8003630:	d5fc      	bpl.n	800362c <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003632:	7833      	ldrb	r3, [r6, #0]
 8003634:	6053      	str	r3, [r2, #4]
 8003636:	3601      	adds	r6, #1
 8003638:	e7ea      	b.n	8003610 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 800363a:	2002      	movs	r0, #2
}
 800363c:	b002      	add	sp, #8
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003642:	2001      	movs	r0, #1
}
 8003644:	b002      	add	sp, #8
 8003646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	d40c      	bmi.n	800366a <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003650:	2f00      	cmp	r7, #0
 8003652:	d031      	beq.n	80036b8 <HAL_UART_Transmit+0xf4>
 8003654:	f7ff f860 	bl	8002718 <HAL_GetTick>
 8003658:	1b40      	subs	r0, r0, r5
 800365a:	4287      	cmp	r7, r0
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	d32b      	bcc.n	80036b8 <HAL_UART_Transmit+0xf4>
 8003660:	1c78      	adds	r0, r7, #1
 8003662:	d1f2      	bne.n	800364a <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	6810      	ldr	r0, [r2, #0]
 8003666:	0601      	lsls	r1, r0, #24
 8003668:	d5fc      	bpl.n	8003664 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800366a:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800366c:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003674:	2900      	cmp	r1, #0
 8003676:	d1de      	bne.n	8003636 <HAL_UART_Transmit+0x72>
          pData += 2U;
 8003678:	3602      	adds	r6, #2
 800367a:	e7c9      	b.n	8003610 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	065b      	lsls	r3, r3, #25
 8003680:	d40b      	bmi.n	800369a <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003682:	b1cf      	cbz	r7, 80036b8 <HAL_UART_Transmit+0xf4>
 8003684:	f7ff f848 	bl	8002718 <HAL_GetTick>
 8003688:	1b40      	subs	r0, r0, r5
 800368a:	4287      	cmp	r7, r0
 800368c:	6822      	ldr	r2, [r4, #0]
 800368e:	d313      	bcc.n	80036b8 <HAL_UART_Transmit+0xf4>
 8003690:	1c78      	adds	r0, r7, #1
 8003692:	d1f3      	bne.n	800367c <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	0659      	lsls	r1, r3, #25
 8003698:	d5fc      	bpl.n	8003694 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 800369a:	2320      	movs	r3, #32
 800369c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80036a0:	2000      	movs	r0, #0
 80036a2:	e7cb      	b.n	800363c <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a4:	6813      	ldr	r3, [r2, #0]
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	d4c3      	bmi.n	8003632 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036aa:	b12f      	cbz	r7, 80036b8 <HAL_UART_Transmit+0xf4>
 80036ac:	f7ff f834 	bl	8002718 <HAL_GetTick>
 80036b0:	1b40      	subs	r0, r0, r5
 80036b2:	4287      	cmp	r7, r0
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	d2b7      	bcs.n	8003628 <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b8:	68d3      	ldr	r3, [r2, #12]
 80036ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036be:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80036c2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c4:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80036c8:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 80036ca:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80036ce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 80036d2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 80036d6:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80036da:	b002      	add	sp, #8
 80036dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036e0 <__errno>:
 80036e0:	4b01      	ldr	r3, [pc, #4]	; (80036e8 <__errno+0x8>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20002bcc 	.word	0x20002bcc

080036ec <__libc_init_array>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0d      	ldr	r6, [pc, #52]	; (8003724 <__libc_init_array+0x38>)
 80036f0:	4c0d      	ldr	r4, [pc, #52]	; (8003728 <__libc_init_array+0x3c>)
 80036f2:	1ba4      	subs	r4, r4, r6
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	2500      	movs	r5, #0
 80036f8:	42a5      	cmp	r5, r4
 80036fa:	d109      	bne.n	8003710 <__libc_init_array+0x24>
 80036fc:	4e0b      	ldr	r6, [pc, #44]	; (800372c <__libc_init_array+0x40>)
 80036fe:	4c0c      	ldr	r4, [pc, #48]	; (8003730 <__libc_init_array+0x44>)
 8003700:	f000 ff04 	bl	800450c <_init>
 8003704:	1ba4      	subs	r4, r4, r6
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	2500      	movs	r5, #0
 800370a:	42a5      	cmp	r5, r4
 800370c:	d105      	bne.n	800371a <__libc_init_array+0x2e>
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003714:	4798      	blx	r3
 8003716:	3501      	adds	r5, #1
 8003718:	e7ee      	b.n	80036f8 <__libc_init_array+0xc>
 800371a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800371e:	4798      	blx	r3
 8003720:	3501      	adds	r5, #1
 8003722:	e7f2      	b.n	800370a <__libc_init_array+0x1e>
 8003724:	0800461c 	.word	0x0800461c
 8003728:	0800461c 	.word	0x0800461c
 800372c:	0800461c 	.word	0x0800461c
 8003730:	08004620 	.word	0x08004620

08003734 <memset>:
 8003734:	4402      	add	r2, r0
 8003736:	4603      	mov	r3, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	d100      	bne.n	800373e <memset+0xa>
 800373c:	4770      	bx	lr
 800373e:	f803 1b01 	strb.w	r1, [r3], #1
 8003742:	e7f9      	b.n	8003738 <memset+0x4>

08003744 <iprintf>:
 8003744:	b40f      	push	{r0, r1, r2, r3}
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <iprintf+0x2c>)
 8003748:	b513      	push	{r0, r1, r4, lr}
 800374a:	681c      	ldr	r4, [r3, #0]
 800374c:	b124      	cbz	r4, 8003758 <iprintf+0x14>
 800374e:	69a3      	ldr	r3, [r4, #24]
 8003750:	b913      	cbnz	r3, 8003758 <iprintf+0x14>
 8003752:	4620      	mov	r0, r4
 8003754:	f000 f84e 	bl	80037f4 <__sinit>
 8003758:	ab05      	add	r3, sp, #20
 800375a:	9a04      	ldr	r2, [sp, #16]
 800375c:	68a1      	ldr	r1, [r4, #8]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	4620      	mov	r0, r4
 8003762:	f000 f955 	bl	8003a10 <_vfiprintf_r>
 8003766:	b002      	add	sp, #8
 8003768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800376c:	b004      	add	sp, #16
 800376e:	4770      	bx	lr
 8003770:	20002bcc 	.word	0x20002bcc

08003774 <std>:
 8003774:	2300      	movs	r3, #0
 8003776:	b510      	push	{r4, lr}
 8003778:	4604      	mov	r4, r0
 800377a:	e9c0 3300 	strd	r3, r3, [r0]
 800377e:	6083      	str	r3, [r0, #8]
 8003780:	8181      	strh	r1, [r0, #12]
 8003782:	6643      	str	r3, [r0, #100]	; 0x64
 8003784:	81c2      	strh	r2, [r0, #14]
 8003786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800378a:	6183      	str	r3, [r0, #24]
 800378c:	4619      	mov	r1, r3
 800378e:	2208      	movs	r2, #8
 8003790:	305c      	adds	r0, #92	; 0x5c
 8003792:	f7ff ffcf 	bl	8003734 <memset>
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <std+0x38>)
 8003798:	6263      	str	r3, [r4, #36]	; 0x24
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <std+0x3c>)
 800379c:	62a3      	str	r3, [r4, #40]	; 0x28
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <std+0x40>)
 80037a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x44>)
 80037a4:	6224      	str	r4, [r4, #32]
 80037a6:	6323      	str	r3, [r4, #48]	; 0x30
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	bf00      	nop
 80037ac:	08003f6d 	.word	0x08003f6d
 80037b0:	08003f8f 	.word	0x08003f8f
 80037b4:	08003fc7 	.word	0x08003fc7
 80037b8:	08003feb 	.word	0x08003feb

080037bc <_cleanup_r>:
 80037bc:	4901      	ldr	r1, [pc, #4]	; (80037c4 <_cleanup_r+0x8>)
 80037be:	f000 b885 	b.w	80038cc <_fwalk_reent>
 80037c2:	bf00      	nop
 80037c4:	080042c5 	.word	0x080042c5

080037c8 <__sfmoreglue>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	1e4a      	subs	r2, r1, #1
 80037cc:	2568      	movs	r5, #104	; 0x68
 80037ce:	4355      	muls	r5, r2
 80037d0:	460e      	mov	r6, r1
 80037d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037d6:	f000 f897 	bl	8003908 <_malloc_r>
 80037da:	4604      	mov	r4, r0
 80037dc:	b140      	cbz	r0, 80037f0 <__sfmoreglue+0x28>
 80037de:	2100      	movs	r1, #0
 80037e0:	e9c0 1600 	strd	r1, r6, [r0]
 80037e4:	300c      	adds	r0, #12
 80037e6:	60a0      	str	r0, [r4, #8]
 80037e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037ec:	f7ff ffa2 	bl	8003734 <memset>
 80037f0:	4620      	mov	r0, r4
 80037f2:	bd70      	pop	{r4, r5, r6, pc}

080037f4 <__sinit>:
 80037f4:	6983      	ldr	r3, [r0, #24]
 80037f6:	b510      	push	{r4, lr}
 80037f8:	4604      	mov	r4, r0
 80037fa:	bb33      	cbnz	r3, 800384a <__sinit+0x56>
 80037fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003800:	6503      	str	r3, [r0, #80]	; 0x50
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <__sinit+0x58>)
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <__sinit+0x5c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6282      	str	r2, [r0, #40]	; 0x28
 800380a:	4298      	cmp	r0, r3
 800380c:	bf04      	itt	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	6183      	streq	r3, [r0, #24]
 8003812:	f000 f81f 	bl	8003854 <__sfp>
 8003816:	6060      	str	r0, [r4, #4]
 8003818:	4620      	mov	r0, r4
 800381a:	f000 f81b 	bl	8003854 <__sfp>
 800381e:	60a0      	str	r0, [r4, #8]
 8003820:	4620      	mov	r0, r4
 8003822:	f000 f817 	bl	8003854 <__sfp>
 8003826:	2200      	movs	r2, #0
 8003828:	60e0      	str	r0, [r4, #12]
 800382a:	2104      	movs	r1, #4
 800382c:	6860      	ldr	r0, [r4, #4]
 800382e:	f7ff ffa1 	bl	8003774 <std>
 8003832:	2201      	movs	r2, #1
 8003834:	2109      	movs	r1, #9
 8003836:	68a0      	ldr	r0, [r4, #8]
 8003838:	f7ff ff9c 	bl	8003774 <std>
 800383c:	2202      	movs	r2, #2
 800383e:	2112      	movs	r1, #18
 8003840:	68e0      	ldr	r0, [r4, #12]
 8003842:	f7ff ff97 	bl	8003774 <std>
 8003846:	2301      	movs	r3, #1
 8003848:	61a3      	str	r3, [r4, #24]
 800384a:	bd10      	pop	{r4, pc}
 800384c:	0800457c 	.word	0x0800457c
 8003850:	080037bd 	.word	0x080037bd

08003854 <__sfp>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <__sfp+0x70>)
 8003858:	681e      	ldr	r6, [r3, #0]
 800385a:	69b3      	ldr	r3, [r6, #24]
 800385c:	4607      	mov	r7, r0
 800385e:	b913      	cbnz	r3, 8003866 <__sfp+0x12>
 8003860:	4630      	mov	r0, r6
 8003862:	f7ff ffc7 	bl	80037f4 <__sinit>
 8003866:	3648      	adds	r6, #72	; 0x48
 8003868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800386c:	3b01      	subs	r3, #1
 800386e:	d503      	bpl.n	8003878 <__sfp+0x24>
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	b133      	cbz	r3, 8003882 <__sfp+0x2e>
 8003874:	6836      	ldr	r6, [r6, #0]
 8003876:	e7f7      	b.n	8003868 <__sfp+0x14>
 8003878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800387c:	b16d      	cbz	r5, 800389a <__sfp+0x46>
 800387e:	3468      	adds	r4, #104	; 0x68
 8003880:	e7f4      	b.n	800386c <__sfp+0x18>
 8003882:	2104      	movs	r1, #4
 8003884:	4638      	mov	r0, r7
 8003886:	f7ff ff9f 	bl	80037c8 <__sfmoreglue>
 800388a:	6030      	str	r0, [r6, #0]
 800388c:	2800      	cmp	r0, #0
 800388e:	d1f1      	bne.n	8003874 <__sfp+0x20>
 8003890:	230c      	movs	r3, #12
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4604      	mov	r4, r0
 8003896:	4620      	mov	r0, r4
 8003898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <__sfp+0x74>)
 800389c:	6665      	str	r5, [r4, #100]	; 0x64
 800389e:	e9c4 5500 	strd	r5, r5, [r4]
 80038a2:	60a5      	str	r5, [r4, #8]
 80038a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038ac:	2208      	movs	r2, #8
 80038ae:	4629      	mov	r1, r5
 80038b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038b4:	f7ff ff3e 	bl	8003734 <memset>
 80038b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038c0:	e7e9      	b.n	8003896 <__sfp+0x42>
 80038c2:	bf00      	nop
 80038c4:	0800457c 	.word	0x0800457c
 80038c8:	ffff0001 	.word	0xffff0001

080038cc <_fwalk_reent>:
 80038cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d0:	4680      	mov	r8, r0
 80038d2:	4689      	mov	r9, r1
 80038d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038d8:	2600      	movs	r6, #0
 80038da:	b914      	cbnz	r4, 80038e2 <_fwalk_reent+0x16>
 80038dc:	4630      	mov	r0, r6
 80038de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80038e6:	3f01      	subs	r7, #1
 80038e8:	d501      	bpl.n	80038ee <_fwalk_reent+0x22>
 80038ea:	6824      	ldr	r4, [r4, #0]
 80038ec:	e7f5      	b.n	80038da <_fwalk_reent+0xe>
 80038ee:	89ab      	ldrh	r3, [r5, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d907      	bls.n	8003904 <_fwalk_reent+0x38>
 80038f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038f8:	3301      	adds	r3, #1
 80038fa:	d003      	beq.n	8003904 <_fwalk_reent+0x38>
 80038fc:	4629      	mov	r1, r5
 80038fe:	4640      	mov	r0, r8
 8003900:	47c8      	blx	r9
 8003902:	4306      	orrs	r6, r0
 8003904:	3568      	adds	r5, #104	; 0x68
 8003906:	e7ee      	b.n	80038e6 <_fwalk_reent+0x1a>

08003908 <_malloc_r>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	1ccd      	adds	r5, r1, #3
 800390c:	f025 0503 	bic.w	r5, r5, #3
 8003910:	3508      	adds	r5, #8
 8003912:	2d0c      	cmp	r5, #12
 8003914:	bf38      	it	cc
 8003916:	250c      	movcc	r5, #12
 8003918:	2d00      	cmp	r5, #0
 800391a:	4606      	mov	r6, r0
 800391c:	db01      	blt.n	8003922 <_malloc_r+0x1a>
 800391e:	42a9      	cmp	r1, r5
 8003920:	d903      	bls.n	800392a <_malloc_r+0x22>
 8003922:	230c      	movs	r3, #12
 8003924:	6033      	str	r3, [r6, #0]
 8003926:	2000      	movs	r0, #0
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	f000 fd6b 	bl	8004404 <__malloc_lock>
 800392e:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <_malloc_r+0xac>)
 8003930:	6814      	ldr	r4, [r2, #0]
 8003932:	4621      	mov	r1, r4
 8003934:	b991      	cbnz	r1, 800395c <_malloc_r+0x54>
 8003936:	4c20      	ldr	r4, [pc, #128]	; (80039b8 <_malloc_r+0xb0>)
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	b91b      	cbnz	r3, 8003944 <_malloc_r+0x3c>
 800393c:	4630      	mov	r0, r6
 800393e:	f000 fb05 	bl	8003f4c <_sbrk_r>
 8003942:	6020      	str	r0, [r4, #0]
 8003944:	4629      	mov	r1, r5
 8003946:	4630      	mov	r0, r6
 8003948:	f000 fb00 	bl	8003f4c <_sbrk_r>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d124      	bne.n	800399a <_malloc_r+0x92>
 8003950:	230c      	movs	r3, #12
 8003952:	6033      	str	r3, [r6, #0]
 8003954:	4630      	mov	r0, r6
 8003956:	f000 fd56 	bl	8004406 <__malloc_unlock>
 800395a:	e7e4      	b.n	8003926 <_malloc_r+0x1e>
 800395c:	680b      	ldr	r3, [r1, #0]
 800395e:	1b5b      	subs	r3, r3, r5
 8003960:	d418      	bmi.n	8003994 <_malloc_r+0x8c>
 8003962:	2b0b      	cmp	r3, #11
 8003964:	d90f      	bls.n	8003986 <_malloc_r+0x7e>
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	50cd      	str	r5, [r1, r3]
 800396a:	18cc      	adds	r4, r1, r3
 800396c:	4630      	mov	r0, r6
 800396e:	f000 fd4a 	bl	8004406 <__malloc_unlock>
 8003972:	f104 000b 	add.w	r0, r4, #11
 8003976:	1d23      	adds	r3, r4, #4
 8003978:	f020 0007 	bic.w	r0, r0, #7
 800397c:	1ac3      	subs	r3, r0, r3
 800397e:	d0d3      	beq.n	8003928 <_malloc_r+0x20>
 8003980:	425a      	negs	r2, r3
 8003982:	50e2      	str	r2, [r4, r3]
 8003984:	e7d0      	b.n	8003928 <_malloc_r+0x20>
 8003986:	428c      	cmp	r4, r1
 8003988:	684b      	ldr	r3, [r1, #4]
 800398a:	bf16      	itet	ne
 800398c:	6063      	strne	r3, [r4, #4]
 800398e:	6013      	streq	r3, [r2, #0]
 8003990:	460c      	movne	r4, r1
 8003992:	e7eb      	b.n	800396c <_malloc_r+0x64>
 8003994:	460c      	mov	r4, r1
 8003996:	6849      	ldr	r1, [r1, #4]
 8003998:	e7cc      	b.n	8003934 <_malloc_r+0x2c>
 800399a:	1cc4      	adds	r4, r0, #3
 800399c:	f024 0403 	bic.w	r4, r4, #3
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d005      	beq.n	80039b0 <_malloc_r+0xa8>
 80039a4:	1a21      	subs	r1, r4, r0
 80039a6:	4630      	mov	r0, r6
 80039a8:	f000 fad0 	bl	8003f4c <_sbrk_r>
 80039ac:	3001      	adds	r0, #1
 80039ae:	d0cf      	beq.n	8003950 <_malloc_r+0x48>
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	e7db      	b.n	800396c <_malloc_r+0x64>
 80039b4:	20002c6c 	.word	0x20002c6c
 80039b8:	20002c70 	.word	0x20002c70

080039bc <__sfputc_r>:
 80039bc:	6893      	ldr	r3, [r2, #8]
 80039be:	3b01      	subs	r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	b410      	push	{r4}
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	da08      	bge.n	80039da <__sfputc_r+0x1e>
 80039c8:	6994      	ldr	r4, [r2, #24]
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	db01      	blt.n	80039d2 <__sfputc_r+0x16>
 80039ce:	290a      	cmp	r1, #10
 80039d0:	d103      	bne.n	80039da <__sfputc_r+0x1e>
 80039d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039d6:	f000 bb0d 	b.w	8003ff4 <__swbuf_r>
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	1c58      	adds	r0, r3, #1
 80039de:	6010      	str	r0, [r2, #0]
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	4608      	mov	r0, r1
 80039e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <__sfputs_r>:
 80039ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ec:	4606      	mov	r6, r0
 80039ee:	460f      	mov	r7, r1
 80039f0:	4614      	mov	r4, r2
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	42ac      	cmp	r4, r5
 80039f6:	d101      	bne.n	80039fc <__sfputs_r+0x12>
 80039f8:	2000      	movs	r0, #0
 80039fa:	e007      	b.n	8003a0c <__sfputs_r+0x22>
 80039fc:	463a      	mov	r2, r7
 80039fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a02:	4630      	mov	r0, r6
 8003a04:	f7ff ffda 	bl	80039bc <__sfputc_r>
 8003a08:	1c43      	adds	r3, r0, #1
 8003a0a:	d1f3      	bne.n	80039f4 <__sfputs_r+0xa>
 8003a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a10 <_vfiprintf_r>:
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	460c      	mov	r4, r1
 8003a16:	b09d      	sub	sp, #116	; 0x74
 8003a18:	4617      	mov	r7, r2
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	b118      	cbz	r0, 8003a28 <_vfiprintf_r+0x18>
 8003a20:	6983      	ldr	r3, [r0, #24]
 8003a22:	b90b      	cbnz	r3, 8003a28 <_vfiprintf_r+0x18>
 8003a24:	f7ff fee6 	bl	80037f4 <__sinit>
 8003a28:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <_vfiprintf_r+0x20c>)
 8003a2a:	429c      	cmp	r4, r3
 8003a2c:	d158      	bne.n	8003ae0 <_vfiprintf_r+0xd0>
 8003a2e:	6874      	ldr	r4, [r6, #4]
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	0718      	lsls	r0, r3, #28
 8003a34:	d55e      	bpl.n	8003af4 <_vfiprintf_r+0xe4>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d05b      	beq.n	8003af4 <_vfiprintf_r+0xe4>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	2320      	movs	r3, #32
 8003a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a46:	2330      	movs	r3, #48	; 0x30
 8003a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4c:	9503      	str	r5, [sp, #12]
 8003a4e:	f04f 0b01 	mov.w	fp, #1
 8003a52:	46b8      	mov	r8, r7
 8003a54:	4645      	mov	r5, r8
 8003a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a5a:	b10b      	cbz	r3, 8003a60 <_vfiprintf_r+0x50>
 8003a5c:	2b25      	cmp	r3, #37	; 0x25
 8003a5e:	d154      	bne.n	8003b0a <_vfiprintf_r+0xfa>
 8003a60:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a64:	d00b      	beq.n	8003a7e <_vfiprintf_r+0x6e>
 8003a66:	4653      	mov	r3, sl
 8003a68:	463a      	mov	r2, r7
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7ff ffbc 	bl	80039ea <__sfputs_r>
 8003a72:	3001      	adds	r0, #1
 8003a74:	f000 80c2 	beq.w	8003bfc <_vfiprintf_r+0x1ec>
 8003a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7a:	4453      	add	r3, sl
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7e:	f898 3000 	ldrb.w	r3, [r8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80ba 	beq.w	8003bfc <_vfiprintf_r+0x1ec>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9c:	46a8      	mov	r8, r5
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003aa4:	485e      	ldr	r0, [pc, #376]	; (8003c20 <_vfiprintf_r+0x210>)
 8003aa6:	f7fc fba3 	bl	80001f0 <memchr>
 8003aaa:	9b04      	ldr	r3, [sp, #16]
 8003aac:	bb78      	cbnz	r0, 8003b0e <_vfiprintf_r+0xfe>
 8003aae:	06d9      	lsls	r1, r3, #27
 8003ab0:	bf44      	itt	mi
 8003ab2:	2220      	movmi	r2, #32
 8003ab4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ab8:	071a      	lsls	r2, r3, #28
 8003aba:	bf44      	itt	mi
 8003abc:	222b      	movmi	r2, #43	; 0x2b
 8003abe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ac2:	782a      	ldrb	r2, [r5, #0]
 8003ac4:	2a2a      	cmp	r2, #42	; 0x2a
 8003ac6:	d02a      	beq.n	8003b1e <_vfiprintf_r+0x10e>
 8003ac8:	9a07      	ldr	r2, [sp, #28]
 8003aca:	46a8      	mov	r8, r5
 8003acc:	2000      	movs	r0, #0
 8003ace:	250a      	movs	r5, #10
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad6:	3b30      	subs	r3, #48	; 0x30
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d969      	bls.n	8003bb0 <_vfiprintf_r+0x1a0>
 8003adc:	b360      	cbz	r0, 8003b38 <_vfiprintf_r+0x128>
 8003ade:	e024      	b.n	8003b2a <_vfiprintf_r+0x11a>
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <_vfiprintf_r+0x214>)
 8003ae2:	429c      	cmp	r4, r3
 8003ae4:	d101      	bne.n	8003aea <_vfiprintf_r+0xda>
 8003ae6:	68b4      	ldr	r4, [r6, #8]
 8003ae8:	e7a2      	b.n	8003a30 <_vfiprintf_r+0x20>
 8003aea:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <_vfiprintf_r+0x218>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	bf08      	it	eq
 8003af0:	68f4      	ldreq	r4, [r6, #12]
 8003af2:	e79d      	b.n	8003a30 <_vfiprintf_r+0x20>
 8003af4:	4621      	mov	r1, r4
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 fae0 	bl	80040bc <__swsetup_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d09d      	beq.n	8003a3c <_vfiprintf_r+0x2c>
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	b01d      	add	sp, #116	; 0x74
 8003b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0a:	46a8      	mov	r8, r5
 8003b0c:	e7a2      	b.n	8003a54 <_vfiprintf_r+0x44>
 8003b0e:	4a44      	ldr	r2, [pc, #272]	; (8003c20 <_vfiprintf_r+0x210>)
 8003b10:	1a80      	subs	r0, r0, r2
 8003b12:	fa0b f000 	lsl.w	r0, fp, r0
 8003b16:	4318      	orrs	r0, r3
 8003b18:	9004      	str	r0, [sp, #16]
 8003b1a:	4645      	mov	r5, r8
 8003b1c:	e7be      	b.n	8003a9c <_vfiprintf_r+0x8c>
 8003b1e:	9a03      	ldr	r2, [sp, #12]
 8003b20:	1d11      	adds	r1, r2, #4
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	9103      	str	r1, [sp, #12]
 8003b26:	2a00      	cmp	r2, #0
 8003b28:	db01      	blt.n	8003b2e <_vfiprintf_r+0x11e>
 8003b2a:	9207      	str	r2, [sp, #28]
 8003b2c:	e004      	b.n	8003b38 <_vfiprintf_r+0x128>
 8003b2e:	4252      	negs	r2, r2
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	9207      	str	r2, [sp, #28]
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	f898 3000 	ldrb.w	r3, [r8]
 8003b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b3e:	d10e      	bne.n	8003b5e <_vfiprintf_r+0x14e>
 8003b40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003b44:	2b2a      	cmp	r3, #42	; 0x2a
 8003b46:	d138      	bne.n	8003bba <_vfiprintf_r+0x1aa>
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	9203      	str	r2, [sp, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bfb8      	it	lt
 8003b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b58:	f108 0802 	add.w	r8, r8, #2
 8003b5c:	9305      	str	r3, [sp, #20]
 8003b5e:	4d33      	ldr	r5, [pc, #204]	; (8003c2c <_vfiprintf_r+0x21c>)
 8003b60:	f898 1000 	ldrb.w	r1, [r8]
 8003b64:	2203      	movs	r2, #3
 8003b66:	4628      	mov	r0, r5
 8003b68:	f7fc fb42 	bl	80001f0 <memchr>
 8003b6c:	b140      	cbz	r0, 8003b80 <_vfiprintf_r+0x170>
 8003b6e:	2340      	movs	r3, #64	; 0x40
 8003b70:	1b40      	subs	r0, r0, r5
 8003b72:	fa03 f000 	lsl.w	r0, r3, r0
 8003b76:	9b04      	ldr	r3, [sp, #16]
 8003b78:	4303      	orrs	r3, r0
 8003b7a:	f108 0801 	add.w	r8, r8, #1
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	f898 1000 	ldrb.w	r1, [r8]
 8003b84:	482a      	ldr	r0, [pc, #168]	; (8003c30 <_vfiprintf_r+0x220>)
 8003b86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b8a:	2206      	movs	r2, #6
 8003b8c:	f108 0701 	add.w	r7, r8, #1
 8003b90:	f7fc fb2e 	bl	80001f0 <memchr>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d037      	beq.n	8003c08 <_vfiprintf_r+0x1f8>
 8003b98:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <_vfiprintf_r+0x224>)
 8003b9a:	bb1b      	cbnz	r3, 8003be4 <_vfiprintf_r+0x1d4>
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	3307      	adds	r3, #7
 8003ba0:	f023 0307 	bic.w	r3, r3, #7
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003baa:	444b      	add	r3, r9
 8003bac:	9309      	str	r3, [sp, #36]	; 0x24
 8003bae:	e750      	b.n	8003a52 <_vfiprintf_r+0x42>
 8003bb0:	fb05 3202 	mla	r2, r5, r2, r3
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	4688      	mov	r8, r1
 8003bb8:	e78a      	b.n	8003ad0 <_vfiprintf_r+0xc0>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f108 0801 	add.w	r8, r8, #1
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	250a      	movs	r5, #10
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bcc:	3a30      	subs	r2, #48	; 0x30
 8003bce:	2a09      	cmp	r2, #9
 8003bd0:	d903      	bls.n	8003bda <_vfiprintf_r+0x1ca>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0c3      	beq.n	8003b5e <_vfiprintf_r+0x14e>
 8003bd6:	9105      	str	r1, [sp, #20]
 8003bd8:	e7c1      	b.n	8003b5e <_vfiprintf_r+0x14e>
 8003bda:	fb05 2101 	mla	r1, r5, r1, r2
 8003bde:	2301      	movs	r3, #1
 8003be0:	4680      	mov	r8, r0
 8003be2:	e7f0      	b.n	8003bc6 <_vfiprintf_r+0x1b6>
 8003be4:	ab03      	add	r3, sp, #12
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4622      	mov	r2, r4
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <_vfiprintf_r+0x228>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f3af 8000 	nop.w
 8003bf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bf8:	4681      	mov	r9, r0
 8003bfa:	d1d5      	bne.n	8003ba8 <_vfiprintf_r+0x198>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	065b      	lsls	r3, r3, #25
 8003c00:	f53f af7e 	bmi.w	8003b00 <_vfiprintf_r+0xf0>
 8003c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c06:	e77d      	b.n	8003b04 <_vfiprintf_r+0xf4>
 8003c08:	ab03      	add	r3, sp, #12
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <_vfiprintf_r+0x228>)
 8003c10:	a904      	add	r1, sp, #16
 8003c12:	4630      	mov	r0, r6
 8003c14:	f000 f888 	bl	8003d28 <_printf_i>
 8003c18:	e7ec      	b.n	8003bf4 <_vfiprintf_r+0x1e4>
 8003c1a:	bf00      	nop
 8003c1c:	080045a0 	.word	0x080045a0
 8003c20:	080045e0 	.word	0x080045e0
 8003c24:	080045c0 	.word	0x080045c0
 8003c28:	08004580 	.word	0x08004580
 8003c2c:	080045e6 	.word	0x080045e6
 8003c30:	080045ea 	.word	0x080045ea
 8003c34:	00000000 	.word	0x00000000
 8003c38:	080039eb 	.word	0x080039eb

08003c3c <_printf_common>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	4691      	mov	r9, r2
 8003c42:	461f      	mov	r7, r3
 8003c44:	688a      	ldr	r2, [r1, #8]
 8003c46:	690b      	ldr	r3, [r1, #16]
 8003c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bfb8      	it	lt
 8003c50:	4613      	movlt	r3, r2
 8003c52:	f8c9 3000 	str.w	r3, [r9]
 8003c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	b112      	cbz	r2, 8003c66 <_printf_common+0x2a>
 8003c60:	3301      	adds	r3, #1
 8003c62:	f8c9 3000 	str.w	r3, [r9]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	0699      	lsls	r1, r3, #26
 8003c6a:	bf42      	ittt	mi
 8003c6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c70:	3302      	addmi	r3, #2
 8003c72:	f8c9 3000 	strmi.w	r3, [r9]
 8003c76:	6825      	ldr	r5, [r4, #0]
 8003c78:	f015 0506 	ands.w	r5, r5, #6
 8003c7c:	d107      	bne.n	8003c8e <_printf_common+0x52>
 8003c7e:	f104 0a19 	add.w	sl, r4, #25
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	f8d9 2000 	ldr.w	r2, [r9]
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	42ab      	cmp	r3, r5
 8003c8c:	dc28      	bgt.n	8003ce0 <_printf_common+0xa4>
 8003c8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c92:	6822      	ldr	r2, [r4, #0]
 8003c94:	3300      	adds	r3, #0
 8003c96:	bf18      	it	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	0692      	lsls	r2, r2, #26
 8003c9c:	d42d      	bmi.n	8003cfa <_printf_common+0xbe>
 8003c9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	47c0      	blx	r8
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d020      	beq.n	8003cee <_printf_common+0xb2>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	68e5      	ldr	r5, [r4, #12]
 8003cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8003cb4:	f003 0306 	and.w	r3, r3, #6
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	bf08      	it	eq
 8003cbc:	1aad      	subeq	r5, r5, r2
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	6922      	ldr	r2, [r4, #16]
 8003cc2:	bf0c      	ite	eq
 8003cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc8:	2500      	movne	r5, #0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bfc4      	itt	gt
 8003cce:	1a9b      	subgt	r3, r3, r2
 8003cd0:	18ed      	addgt	r5, r5, r3
 8003cd2:	f04f 0900 	mov.w	r9, #0
 8003cd6:	341a      	adds	r4, #26
 8003cd8:	454d      	cmp	r5, r9
 8003cda:	d11a      	bne.n	8003d12 <_printf_common+0xd6>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	e008      	b.n	8003cf2 <_printf_common+0xb6>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4652      	mov	r2, sl
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	47c0      	blx	r8
 8003cea:	3001      	adds	r0, #1
 8003cec:	d103      	bne.n	8003cf6 <_printf_common+0xba>
 8003cee:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	3501      	adds	r5, #1
 8003cf8:	e7c3      	b.n	8003c82 <_printf_common+0x46>
 8003cfa:	18e1      	adds	r1, r4, r3
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	2030      	movs	r0, #48	; 0x30
 8003d00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d04:	4422      	add	r2, r4
 8003d06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d0e:	3302      	adds	r3, #2
 8003d10:	e7c5      	b.n	8003c9e <_printf_common+0x62>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4622      	mov	r2, r4
 8003d16:	4639      	mov	r1, r7
 8003d18:	4630      	mov	r0, r6
 8003d1a:	47c0      	blx	r8
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d0e6      	beq.n	8003cee <_printf_common+0xb2>
 8003d20:	f109 0901 	add.w	r9, r9, #1
 8003d24:	e7d8      	b.n	8003cd8 <_printf_common+0x9c>
	...

08003d28 <_printf_i>:
 8003d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d30:	460c      	mov	r4, r1
 8003d32:	7e09      	ldrb	r1, [r1, #24]
 8003d34:	b085      	sub	sp, #20
 8003d36:	296e      	cmp	r1, #110	; 0x6e
 8003d38:	4617      	mov	r7, r2
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	4698      	mov	r8, r3
 8003d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d40:	f000 80b3 	beq.w	8003eaa <_printf_i+0x182>
 8003d44:	d822      	bhi.n	8003d8c <_printf_i+0x64>
 8003d46:	2963      	cmp	r1, #99	; 0x63
 8003d48:	d036      	beq.n	8003db8 <_printf_i+0x90>
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x3a>
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	f000 80b9 	beq.w	8003ec4 <_printf_i+0x19c>
 8003d52:	2958      	cmp	r1, #88	; 0x58
 8003d54:	f000 8083 	beq.w	8003e5e <_printf_i+0x136>
 8003d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d60:	e032      	b.n	8003dc8 <_printf_i+0xa0>
 8003d62:	2964      	cmp	r1, #100	; 0x64
 8003d64:	d001      	beq.n	8003d6a <_printf_i+0x42>
 8003d66:	2969      	cmp	r1, #105	; 0x69
 8003d68:	d1f6      	bne.n	8003d58 <_printf_i+0x30>
 8003d6a:	6820      	ldr	r0, [r4, #0]
 8003d6c:	6813      	ldr	r3, [r2, #0]
 8003d6e:	0605      	lsls	r5, r0, #24
 8003d70:	f103 0104 	add.w	r1, r3, #4
 8003d74:	d52a      	bpl.n	8003dcc <_printf_i+0xa4>
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da03      	bge.n	8003d86 <_printf_i+0x5e>
 8003d7e:	222d      	movs	r2, #45	; 0x2d
 8003d80:	425b      	negs	r3, r3
 8003d82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d86:	486f      	ldr	r0, [pc, #444]	; (8003f44 <_printf_i+0x21c>)
 8003d88:	220a      	movs	r2, #10
 8003d8a:	e039      	b.n	8003e00 <_printf_i+0xd8>
 8003d8c:	2973      	cmp	r1, #115	; 0x73
 8003d8e:	f000 809d 	beq.w	8003ecc <_printf_i+0x1a4>
 8003d92:	d808      	bhi.n	8003da6 <_printf_i+0x7e>
 8003d94:	296f      	cmp	r1, #111	; 0x6f
 8003d96:	d020      	beq.n	8003dda <_printf_i+0xb2>
 8003d98:	2970      	cmp	r1, #112	; 0x70
 8003d9a:	d1dd      	bne.n	8003d58 <_printf_i+0x30>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f043 0320 	orr.w	r3, r3, #32
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	e003      	b.n	8003dae <_printf_i+0x86>
 8003da6:	2975      	cmp	r1, #117	; 0x75
 8003da8:	d017      	beq.n	8003dda <_printf_i+0xb2>
 8003daa:	2978      	cmp	r1, #120	; 0x78
 8003dac:	d1d4      	bne.n	8003d58 <_printf_i+0x30>
 8003dae:	2378      	movs	r3, #120	; 0x78
 8003db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db4:	4864      	ldr	r0, [pc, #400]	; (8003f48 <_printf_i+0x220>)
 8003db6:	e055      	b.n	8003e64 <_printf_i+0x13c>
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	1d19      	adds	r1, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6011      	str	r1, [r2, #0]
 8003dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e08c      	b.n	8003ee6 <_printf_i+0x1be>
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dd4:	bf18      	it	ne
 8003dd6:	b21b      	sxthne	r3, r3
 8003dd8:	e7cf      	b.n	8003d7a <_printf_i+0x52>
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	6825      	ldr	r5, [r4, #0]
 8003dde:	1d18      	adds	r0, r3, #4
 8003de0:	6010      	str	r0, [r2, #0]
 8003de2:	0628      	lsls	r0, r5, #24
 8003de4:	d501      	bpl.n	8003dea <_printf_i+0xc2>
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	e002      	b.n	8003df0 <_printf_i+0xc8>
 8003dea:	0668      	lsls	r0, r5, #25
 8003dec:	d5fb      	bpl.n	8003de6 <_printf_i+0xbe>
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	4854      	ldr	r0, [pc, #336]	; (8003f44 <_printf_i+0x21c>)
 8003df2:	296f      	cmp	r1, #111	; 0x6f
 8003df4:	bf14      	ite	ne
 8003df6:	220a      	movne	r2, #10
 8003df8:	2208      	moveq	r2, #8
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e00:	6865      	ldr	r5, [r4, #4]
 8003e02:	60a5      	str	r5, [r4, #8]
 8003e04:	2d00      	cmp	r5, #0
 8003e06:	f2c0 8095 	blt.w	8003f34 <_printf_i+0x20c>
 8003e0a:	6821      	ldr	r1, [r4, #0]
 8003e0c:	f021 0104 	bic.w	r1, r1, #4
 8003e10:	6021      	str	r1, [r4, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d13d      	bne.n	8003e92 <_printf_i+0x16a>
 8003e16:	2d00      	cmp	r5, #0
 8003e18:	f040 808e 	bne.w	8003f38 <_printf_i+0x210>
 8003e1c:	4665      	mov	r5, ip
 8003e1e:	2a08      	cmp	r2, #8
 8003e20:	d10b      	bne.n	8003e3a <_printf_i+0x112>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	d508      	bpl.n	8003e3a <_printf_i+0x112>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	6862      	ldr	r2, [r4, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	bfde      	ittt	le
 8003e30:	2330      	movle	r3, #48	; 0x30
 8003e32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e3a:	ebac 0305 	sub.w	r3, ip, r5
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	f8cd 8000 	str.w	r8, [sp]
 8003e44:	463b      	mov	r3, r7
 8003e46:	aa03      	add	r2, sp, #12
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f7ff fef6 	bl	8003c3c <_printf_common>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d14d      	bne.n	8003ef0 <_printf_i+0x1c8>
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	b005      	add	sp, #20
 8003e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e5e:	4839      	ldr	r0, [pc, #228]	; (8003f44 <_printf_i+0x21c>)
 8003e60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	1d1d      	adds	r5, r3, #4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6015      	str	r5, [r2, #0]
 8003e6e:	060a      	lsls	r2, r1, #24
 8003e70:	d50b      	bpl.n	8003e8a <_printf_i+0x162>
 8003e72:	07ca      	lsls	r2, r1, #31
 8003e74:	bf44      	itt	mi
 8003e76:	f041 0120 	orrmi.w	r1, r1, #32
 8003e7a:	6021      	strmi	r1, [r4, #0]
 8003e7c:	b91b      	cbnz	r3, 8003e86 <_printf_i+0x15e>
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	f022 0220 	bic.w	r2, r2, #32
 8003e84:	6022      	str	r2, [r4, #0]
 8003e86:	2210      	movs	r2, #16
 8003e88:	e7b7      	b.n	8003dfa <_printf_i+0xd2>
 8003e8a:	064d      	lsls	r5, r1, #25
 8003e8c:	bf48      	it	mi
 8003e8e:	b29b      	uxthmi	r3, r3
 8003e90:	e7ef      	b.n	8003e72 <_printf_i+0x14a>
 8003e92:	4665      	mov	r5, ip
 8003e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e98:	fb02 3311 	mls	r3, r2, r1, r3
 8003e9c:	5cc3      	ldrb	r3, [r0, r3]
 8003e9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d1f5      	bne.n	8003e94 <_printf_i+0x16c>
 8003ea8:	e7b9      	b.n	8003e1e <_printf_i+0xf6>
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	6825      	ldr	r5, [r4, #0]
 8003eae:	6961      	ldr	r1, [r4, #20]
 8003eb0:	1d18      	adds	r0, r3, #4
 8003eb2:	6010      	str	r0, [r2, #0]
 8003eb4:	0628      	lsls	r0, r5, #24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	d501      	bpl.n	8003ebe <_printf_i+0x196>
 8003eba:	6019      	str	r1, [r3, #0]
 8003ebc:	e002      	b.n	8003ec4 <_printf_i+0x19c>
 8003ebe:	066a      	lsls	r2, r5, #25
 8003ec0:	d5fb      	bpl.n	8003eba <_printf_i+0x192>
 8003ec2:	8019      	strh	r1, [r3, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	4665      	mov	r5, ip
 8003eca:	e7b9      	b.n	8003e40 <_printf_i+0x118>
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	1d19      	adds	r1, r3, #4
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	681d      	ldr	r5, [r3, #0]
 8003ed4:	6862      	ldr	r2, [r4, #4]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7fc f989 	bl	80001f0 <memchr>
 8003ede:	b108      	cbz	r0, 8003ee4 <_printf_i+0x1bc>
 8003ee0:	1b40      	subs	r0, r0, r5
 8003ee2:	6060      	str	r0, [r4, #4]
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eee:	e7a7      	b.n	8003e40 <_printf_i+0x118>
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	462a      	mov	r2, r5
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	47c0      	blx	r8
 8003efa:	3001      	adds	r0, #1
 8003efc:	d0aa      	beq.n	8003e54 <_printf_i+0x12c>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	079b      	lsls	r3, r3, #30
 8003f02:	d413      	bmi.n	8003f2c <_printf_i+0x204>
 8003f04:	68e0      	ldr	r0, [r4, #12]
 8003f06:	9b03      	ldr	r3, [sp, #12]
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	bfb8      	it	lt
 8003f0c:	4618      	movlt	r0, r3
 8003f0e:	e7a3      	b.n	8003e58 <_printf_i+0x130>
 8003f10:	2301      	movs	r3, #1
 8003f12:	464a      	mov	r2, r9
 8003f14:	4639      	mov	r1, r7
 8003f16:	4630      	mov	r0, r6
 8003f18:	47c0      	blx	r8
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d09a      	beq.n	8003e54 <_printf_i+0x12c>
 8003f1e:	3501      	adds	r5, #1
 8003f20:	68e3      	ldr	r3, [r4, #12]
 8003f22:	9a03      	ldr	r2, [sp, #12]
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	42ab      	cmp	r3, r5
 8003f28:	dcf2      	bgt.n	8003f10 <_printf_i+0x1e8>
 8003f2a:	e7eb      	b.n	8003f04 <_printf_i+0x1dc>
 8003f2c:	2500      	movs	r5, #0
 8003f2e:	f104 0919 	add.w	r9, r4, #25
 8003f32:	e7f5      	b.n	8003f20 <_printf_i+0x1f8>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ac      	bne.n	8003e92 <_printf_i+0x16a>
 8003f38:	7803      	ldrb	r3, [r0, #0]
 8003f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f42:	e76c      	b.n	8003e1e <_printf_i+0xf6>
 8003f44:	080045f1 	.word	0x080045f1
 8003f48:	08004602 	.word	0x08004602

08003f4c <_sbrk_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	4c06      	ldr	r4, [pc, #24]	; (8003f68 <_sbrk_r+0x1c>)
 8003f50:	2300      	movs	r3, #0
 8003f52:	4605      	mov	r5, r0
 8003f54:	4608      	mov	r0, r1
 8003f56:	6023      	str	r3, [r4, #0]
 8003f58:	f7fe fae8 	bl	800252c <_sbrk>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_sbrk_r+0x1a>
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_sbrk_r+0x1a>
 8003f64:	602b      	str	r3, [r5, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	20002d14 	.word	0x20002d14

08003f6c <__sread>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	460c      	mov	r4, r1
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	f000 fa96 	bl	80044a4 <_read_r>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	bfab      	itete	ge
 8003f7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f80:	181b      	addge	r3, r3, r0
 8003f82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f86:	bfac      	ite	ge
 8003f88:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f8a:	81a3      	strhlt	r3, [r4, #12]
 8003f8c:	bd10      	pop	{r4, pc}

08003f8e <__swrite>:
 8003f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f92:	461f      	mov	r7, r3
 8003f94:	898b      	ldrh	r3, [r1, #12]
 8003f96:	05db      	lsls	r3, r3, #23
 8003f98:	4605      	mov	r5, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	d505      	bpl.n	8003fac <__swrite+0x1e>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa8:	f000 f9b6 	bl	8004318 <_lseek_r>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	4632      	mov	r2, r6
 8003fba:	463b      	mov	r3, r7
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	f000 b869 	b.w	8004098 <_write_r>

08003fc6 <__sseek>:
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	460c      	mov	r4, r1
 8003fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fce:	f000 f9a3 	bl	8004318 <_lseek_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	bf15      	itete	ne
 8003fd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fe2:	81a3      	strheq	r3, [r4, #12]
 8003fe4:	bf18      	it	ne
 8003fe6:	81a3      	strhne	r3, [r4, #12]
 8003fe8:	bd10      	pop	{r4, pc}

08003fea <__sclose>:
 8003fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fee:	f000 b8d3 	b.w	8004198 <_close_r>
	...

08003ff4 <__swbuf_r>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	460e      	mov	r6, r1
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	b118      	cbz	r0, 8004006 <__swbuf_r+0x12>
 8003ffe:	6983      	ldr	r3, [r0, #24]
 8004000:	b90b      	cbnz	r3, 8004006 <__swbuf_r+0x12>
 8004002:	f7ff fbf7 	bl	80037f4 <__sinit>
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <__swbuf_r+0x98>)
 8004008:	429c      	cmp	r4, r3
 800400a:	d12a      	bne.n	8004062 <__swbuf_r+0x6e>
 800400c:	686c      	ldr	r4, [r5, #4]
 800400e:	69a3      	ldr	r3, [r4, #24]
 8004010:	60a3      	str	r3, [r4, #8]
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	071a      	lsls	r2, r3, #28
 8004016:	d52e      	bpl.n	8004076 <__swbuf_r+0x82>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	b363      	cbz	r3, 8004076 <__swbuf_r+0x82>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	6820      	ldr	r0, [r4, #0]
 8004020:	1ac0      	subs	r0, r0, r3
 8004022:	6963      	ldr	r3, [r4, #20]
 8004024:	b2f6      	uxtb	r6, r6
 8004026:	4283      	cmp	r3, r0
 8004028:	4637      	mov	r7, r6
 800402a:	dc04      	bgt.n	8004036 <__swbuf_r+0x42>
 800402c:	4621      	mov	r1, r4
 800402e:	4628      	mov	r0, r5
 8004030:	f000 f948 	bl	80042c4 <_fflush_r>
 8004034:	bb28      	cbnz	r0, 8004082 <__swbuf_r+0x8e>
 8004036:	68a3      	ldr	r3, [r4, #8]
 8004038:	3b01      	subs	r3, #1
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	701e      	strb	r6, [r3, #0]
 8004044:	6963      	ldr	r3, [r4, #20]
 8004046:	3001      	adds	r0, #1
 8004048:	4283      	cmp	r3, r0
 800404a:	d004      	beq.n	8004056 <__swbuf_r+0x62>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	d519      	bpl.n	8004086 <__swbuf_r+0x92>
 8004052:	2e0a      	cmp	r6, #10
 8004054:	d117      	bne.n	8004086 <__swbuf_r+0x92>
 8004056:	4621      	mov	r1, r4
 8004058:	4628      	mov	r0, r5
 800405a:	f000 f933 	bl	80042c4 <_fflush_r>
 800405e:	b190      	cbz	r0, 8004086 <__swbuf_r+0x92>
 8004060:	e00f      	b.n	8004082 <__swbuf_r+0x8e>
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <__swbuf_r+0x9c>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d101      	bne.n	800406c <__swbuf_r+0x78>
 8004068:	68ac      	ldr	r4, [r5, #8]
 800406a:	e7d0      	b.n	800400e <__swbuf_r+0x1a>
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <__swbuf_r+0xa0>)
 800406e:	429c      	cmp	r4, r3
 8004070:	bf08      	it	eq
 8004072:	68ec      	ldreq	r4, [r5, #12]
 8004074:	e7cb      	b.n	800400e <__swbuf_r+0x1a>
 8004076:	4621      	mov	r1, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f81f 	bl	80040bc <__swsetup_r>
 800407e:	2800      	cmp	r0, #0
 8004080:	d0cc      	beq.n	800401c <__swbuf_r+0x28>
 8004082:	f04f 37ff 	mov.w	r7, #4294967295
 8004086:	4638      	mov	r0, r7
 8004088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408a:	bf00      	nop
 800408c:	080045a0 	.word	0x080045a0
 8004090:	080045c0 	.word	0x080045c0
 8004094:	08004580 	.word	0x08004580

08004098 <_write_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4c07      	ldr	r4, [pc, #28]	; (80040b8 <_write_r+0x20>)
 800409c:	4605      	mov	r5, r0
 800409e:	4608      	mov	r0, r1
 80040a0:	4611      	mov	r1, r2
 80040a2:	2200      	movs	r2, #0
 80040a4:	6022      	str	r2, [r4, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7fe f8de 	bl	8002268 <_write>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_write_r+0x1e>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_write_r+0x1e>
 80040b4:	602b      	str	r3, [r5, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20002d14 	.word	0x20002d14

080040bc <__swsetup_r>:
 80040bc:	4b32      	ldr	r3, [pc, #200]	; (8004188 <__swsetup_r+0xcc>)
 80040be:	b570      	push	{r4, r5, r6, lr}
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	4606      	mov	r6, r0
 80040c4:	460c      	mov	r4, r1
 80040c6:	b125      	cbz	r5, 80040d2 <__swsetup_r+0x16>
 80040c8:	69ab      	ldr	r3, [r5, #24]
 80040ca:	b913      	cbnz	r3, 80040d2 <__swsetup_r+0x16>
 80040cc:	4628      	mov	r0, r5
 80040ce:	f7ff fb91 	bl	80037f4 <__sinit>
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <__swsetup_r+0xd0>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d10f      	bne.n	80040f8 <__swsetup_r+0x3c>
 80040d8:	686c      	ldr	r4, [r5, #4]
 80040da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	0715      	lsls	r5, r2, #28
 80040e2:	d42c      	bmi.n	800413e <__swsetup_r+0x82>
 80040e4:	06d0      	lsls	r0, r2, #27
 80040e6:	d411      	bmi.n	800410c <__swsetup_r+0x50>
 80040e8:	2209      	movs	r2, #9
 80040ea:	6032      	str	r2, [r6, #0]
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	e03e      	b.n	8004176 <__swsetup_r+0xba>
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <__swsetup_r+0xd4>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d101      	bne.n	8004102 <__swsetup_r+0x46>
 80040fe:	68ac      	ldr	r4, [r5, #8]
 8004100:	e7eb      	b.n	80040da <__swsetup_r+0x1e>
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <__swsetup_r+0xd8>)
 8004104:	429c      	cmp	r4, r3
 8004106:	bf08      	it	eq
 8004108:	68ec      	ldreq	r4, [r5, #12]
 800410a:	e7e6      	b.n	80040da <__swsetup_r+0x1e>
 800410c:	0751      	lsls	r1, r2, #29
 800410e:	d512      	bpl.n	8004136 <__swsetup_r+0x7a>
 8004110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004112:	b141      	cbz	r1, 8004126 <__swsetup_r+0x6a>
 8004114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004118:	4299      	cmp	r1, r3
 800411a:	d002      	beq.n	8004122 <__swsetup_r+0x66>
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f973 	bl	8004408 <_free_r>
 8004122:	2300      	movs	r3, #0
 8004124:	6363      	str	r3, [r4, #52]	; 0x34
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	6063      	str	r3, [r4, #4]
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	b94b      	cbnz	r3, 8004156 <__swsetup_r+0x9a>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d003      	beq.n	8004156 <__swsetup_r+0x9a>
 800414e:	4621      	mov	r1, r4
 8004150:	4630      	mov	r0, r6
 8004152:	f000 f917 	bl	8004384 <__smakebuf_r>
 8004156:	89a2      	ldrh	r2, [r4, #12]
 8004158:	f012 0301 	ands.w	r3, r2, #1
 800415c:	d00c      	beq.n	8004178 <__swsetup_r+0xbc>
 800415e:	2300      	movs	r3, #0
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	6963      	ldr	r3, [r4, #20]
 8004164:	425b      	negs	r3, r3
 8004166:	61a3      	str	r3, [r4, #24]
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b953      	cbnz	r3, 8004182 <__swsetup_r+0xc6>
 800416c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004170:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004174:	d1ba      	bne.n	80040ec <__swsetup_r+0x30>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	0792      	lsls	r2, r2, #30
 800417a:	bf58      	it	pl
 800417c:	6963      	ldrpl	r3, [r4, #20]
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	e7f2      	b.n	8004168 <__swsetup_r+0xac>
 8004182:	2000      	movs	r0, #0
 8004184:	e7f7      	b.n	8004176 <__swsetup_r+0xba>
 8004186:	bf00      	nop
 8004188:	20002bcc 	.word	0x20002bcc
 800418c:	080045a0 	.word	0x080045a0
 8004190:	080045c0 	.word	0x080045c0
 8004194:	08004580 	.word	0x08004580

08004198 <_close_r>:
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4c06      	ldr	r4, [pc, #24]	; (80041b4 <_close_r+0x1c>)
 800419c:	2300      	movs	r3, #0
 800419e:	4605      	mov	r5, r0
 80041a0:	4608      	mov	r0, r1
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	f7fe f9b4 	bl	8002510 <_close>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_close_r+0x1a>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_close_r+0x1a>
 80041b0:	602b      	str	r3, [r5, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	20002d14 	.word	0x20002d14

080041b8 <__sflush_r>:
 80041b8:	898a      	ldrh	r2, [r1, #12]
 80041ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041be:	4605      	mov	r5, r0
 80041c0:	0710      	lsls	r0, r2, #28
 80041c2:	460c      	mov	r4, r1
 80041c4:	d458      	bmi.n	8004278 <__sflush_r+0xc0>
 80041c6:	684b      	ldr	r3, [r1, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	dc05      	bgt.n	80041d8 <__sflush_r+0x20>
 80041cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dc02      	bgt.n	80041d8 <__sflush_r+0x20>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041da:	2e00      	cmp	r6, #0
 80041dc:	d0f9      	beq.n	80041d2 <__sflush_r+0x1a>
 80041de:	2300      	movs	r3, #0
 80041e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041e4:	682f      	ldr	r7, [r5, #0]
 80041e6:	6a21      	ldr	r1, [r4, #32]
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	d032      	beq.n	8004252 <__sflush_r+0x9a>
 80041ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	075a      	lsls	r2, r3, #29
 80041f2:	d505      	bpl.n	8004200 <__sflush_r+0x48>
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	1ac0      	subs	r0, r0, r3
 80041f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041fa:	b10b      	cbz	r3, 8004200 <__sflush_r+0x48>
 80041fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041fe:	1ac0      	subs	r0, r0, r3
 8004200:	2300      	movs	r3, #0
 8004202:	4602      	mov	r2, r0
 8004204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004206:	6a21      	ldr	r1, [r4, #32]
 8004208:	4628      	mov	r0, r5
 800420a:	47b0      	blx	r6
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	d106      	bne.n	8004220 <__sflush_r+0x68>
 8004212:	6829      	ldr	r1, [r5, #0]
 8004214:	291d      	cmp	r1, #29
 8004216:	d848      	bhi.n	80042aa <__sflush_r+0xf2>
 8004218:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <__sflush_r+0x108>)
 800421a:	40ca      	lsrs	r2, r1
 800421c:	07d6      	lsls	r6, r2, #31
 800421e:	d544      	bpl.n	80042aa <__sflush_r+0xf2>
 8004220:	2200      	movs	r2, #0
 8004222:	6062      	str	r2, [r4, #4]
 8004224:	04d9      	lsls	r1, r3, #19
 8004226:	6922      	ldr	r2, [r4, #16]
 8004228:	6022      	str	r2, [r4, #0]
 800422a:	d504      	bpl.n	8004236 <__sflush_r+0x7e>
 800422c:	1c42      	adds	r2, r0, #1
 800422e:	d101      	bne.n	8004234 <__sflush_r+0x7c>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b903      	cbnz	r3, 8004236 <__sflush_r+0x7e>
 8004234:	6560      	str	r0, [r4, #84]	; 0x54
 8004236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004238:	602f      	str	r7, [r5, #0]
 800423a:	2900      	cmp	r1, #0
 800423c:	d0c9      	beq.n	80041d2 <__sflush_r+0x1a>
 800423e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004242:	4299      	cmp	r1, r3
 8004244:	d002      	beq.n	800424c <__sflush_r+0x94>
 8004246:	4628      	mov	r0, r5
 8004248:	f000 f8de 	bl	8004408 <_free_r>
 800424c:	2000      	movs	r0, #0
 800424e:	6360      	str	r0, [r4, #52]	; 0x34
 8004250:	e7c0      	b.n	80041d4 <__sflush_r+0x1c>
 8004252:	2301      	movs	r3, #1
 8004254:	4628      	mov	r0, r5
 8004256:	47b0      	blx	r6
 8004258:	1c41      	adds	r1, r0, #1
 800425a:	d1c8      	bne.n	80041ee <__sflush_r+0x36>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0c5      	beq.n	80041ee <__sflush_r+0x36>
 8004262:	2b1d      	cmp	r3, #29
 8004264:	d001      	beq.n	800426a <__sflush_r+0xb2>
 8004266:	2b16      	cmp	r3, #22
 8004268:	d101      	bne.n	800426e <__sflush_r+0xb6>
 800426a:	602f      	str	r7, [r5, #0]
 800426c:	e7b1      	b.n	80041d2 <__sflush_r+0x1a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	e7ad      	b.n	80041d4 <__sflush_r+0x1c>
 8004278:	690f      	ldr	r7, [r1, #16]
 800427a:	2f00      	cmp	r7, #0
 800427c:	d0a9      	beq.n	80041d2 <__sflush_r+0x1a>
 800427e:	0793      	lsls	r3, r2, #30
 8004280:	680e      	ldr	r6, [r1, #0]
 8004282:	bf08      	it	eq
 8004284:	694b      	ldreq	r3, [r1, #20]
 8004286:	600f      	str	r7, [r1, #0]
 8004288:	bf18      	it	ne
 800428a:	2300      	movne	r3, #0
 800428c:	eba6 0807 	sub.w	r8, r6, r7
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	f1b8 0f00 	cmp.w	r8, #0
 8004296:	dd9c      	ble.n	80041d2 <__sflush_r+0x1a>
 8004298:	4643      	mov	r3, r8
 800429a:	463a      	mov	r2, r7
 800429c:	6a21      	ldr	r1, [r4, #32]
 800429e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b0      	blx	r6
 80042a4:	2800      	cmp	r0, #0
 80042a6:	dc06      	bgt.n	80042b6 <__sflush_r+0xfe>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	e78e      	b.n	80041d4 <__sflush_r+0x1c>
 80042b6:	4407      	add	r7, r0
 80042b8:	eba8 0800 	sub.w	r8, r8, r0
 80042bc:	e7e9      	b.n	8004292 <__sflush_r+0xda>
 80042be:	bf00      	nop
 80042c0:	20400001 	.word	0x20400001

080042c4 <_fflush_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	690b      	ldr	r3, [r1, #16]
 80042c8:	4605      	mov	r5, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	b1db      	cbz	r3, 8004306 <_fflush_r+0x42>
 80042ce:	b118      	cbz	r0, 80042d8 <_fflush_r+0x14>
 80042d0:	6983      	ldr	r3, [r0, #24]
 80042d2:	b90b      	cbnz	r3, 80042d8 <_fflush_r+0x14>
 80042d4:	f7ff fa8e 	bl	80037f4 <__sinit>
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <_fflush_r+0x48>)
 80042da:	429c      	cmp	r4, r3
 80042dc:	d109      	bne.n	80042f2 <_fflush_r+0x2e>
 80042de:	686c      	ldr	r4, [r5, #4]
 80042e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e4:	b17b      	cbz	r3, 8004306 <_fflush_r+0x42>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ee:	f7ff bf63 	b.w	80041b8 <__sflush_r>
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <_fflush_r+0x4c>)
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d101      	bne.n	80042fc <_fflush_r+0x38>
 80042f8:	68ac      	ldr	r4, [r5, #8]
 80042fa:	e7f1      	b.n	80042e0 <_fflush_r+0x1c>
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_fflush_r+0x50>)
 80042fe:	429c      	cmp	r4, r3
 8004300:	bf08      	it	eq
 8004302:	68ec      	ldreq	r4, [r5, #12]
 8004304:	e7ec      	b.n	80042e0 <_fflush_r+0x1c>
 8004306:	2000      	movs	r0, #0
 8004308:	bd38      	pop	{r3, r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	080045a0 	.word	0x080045a0
 8004310:	080045c0 	.word	0x080045c0
 8004314:	08004580 	.word	0x08004580

08004318 <_lseek_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4c07      	ldr	r4, [pc, #28]	; (8004338 <_lseek_r+0x20>)
 800431c:	4605      	mov	r5, r0
 800431e:	4608      	mov	r0, r1
 8004320:	4611      	mov	r1, r2
 8004322:	2200      	movs	r2, #0
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fe f8fe 	bl	8002528 <_lseek>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_lseek_r+0x1e>
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	b103      	cbz	r3, 8004336 <_lseek_r+0x1e>
 8004334:	602b      	str	r3, [r5, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	20002d14 	.word	0x20002d14

0800433c <__swhatbuf_r>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	460e      	mov	r6, r1
 8004340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004344:	2900      	cmp	r1, #0
 8004346:	b096      	sub	sp, #88	; 0x58
 8004348:	4614      	mov	r4, r2
 800434a:	461d      	mov	r5, r3
 800434c:	da07      	bge.n	800435e <__swhatbuf_r+0x22>
 800434e:	2300      	movs	r3, #0
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	89b3      	ldrh	r3, [r6, #12]
 8004354:	061a      	lsls	r2, r3, #24
 8004356:	d410      	bmi.n	800437a <__swhatbuf_r+0x3e>
 8004358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435c:	e00e      	b.n	800437c <__swhatbuf_r+0x40>
 800435e:	466a      	mov	r2, sp
 8004360:	f000 f8b2 	bl	80044c8 <_fstat_r>
 8004364:	2800      	cmp	r0, #0
 8004366:	dbf2      	blt.n	800434e <__swhatbuf_r+0x12>
 8004368:	9a01      	ldr	r2, [sp, #4]
 800436a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800436e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004372:	425a      	negs	r2, r3
 8004374:	415a      	adcs	r2, r3
 8004376:	602a      	str	r2, [r5, #0]
 8004378:	e7ee      	b.n	8004358 <__swhatbuf_r+0x1c>
 800437a:	2340      	movs	r3, #64	; 0x40
 800437c:	2000      	movs	r0, #0
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	b016      	add	sp, #88	; 0x58
 8004382:	bd70      	pop	{r4, r5, r6, pc}

08004384 <__smakebuf_r>:
 8004384:	898b      	ldrh	r3, [r1, #12]
 8004386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004388:	079d      	lsls	r5, r3, #30
 800438a:	4606      	mov	r6, r0
 800438c:	460c      	mov	r4, r1
 800438e:	d507      	bpl.n	80043a0 <__smakebuf_r+0x1c>
 8004390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	2301      	movs	r3, #1
 800439a:	6163      	str	r3, [r4, #20]
 800439c:	b002      	add	sp, #8
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	ab01      	add	r3, sp, #4
 80043a2:	466a      	mov	r2, sp
 80043a4:	f7ff ffca 	bl	800433c <__swhatbuf_r>
 80043a8:	9900      	ldr	r1, [sp, #0]
 80043aa:	4605      	mov	r5, r0
 80043ac:	4630      	mov	r0, r6
 80043ae:	f7ff faab 	bl	8003908 <_malloc_r>
 80043b2:	b948      	cbnz	r0, 80043c8 <__smakebuf_r+0x44>
 80043b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b8:	059a      	lsls	r2, r3, #22
 80043ba:	d4ef      	bmi.n	800439c <__smakebuf_r+0x18>
 80043bc:	f023 0303 	bic.w	r3, r3, #3
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	81a3      	strh	r3, [r4, #12]
 80043c6:	e7e3      	b.n	8004390 <__smakebuf_r+0xc>
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <__smakebuf_r+0x7c>)
 80043ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	6020      	str	r0, [r4, #0]
 80043d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	9b00      	ldr	r3, [sp, #0]
 80043d8:	6163      	str	r3, [r4, #20]
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	6120      	str	r0, [r4, #16]
 80043de:	b15b      	cbz	r3, 80043f8 <__smakebuf_r+0x74>
 80043e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e4:	4630      	mov	r0, r6
 80043e6:	f000 f881 	bl	80044ec <_isatty_r>
 80043ea:	b128      	cbz	r0, 80043f8 <__smakebuf_r+0x74>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	431d      	orrs	r5, r3
 80043fc:	81a5      	strh	r5, [r4, #12]
 80043fe:	e7cd      	b.n	800439c <__smakebuf_r+0x18>
 8004400:	080037bd 	.word	0x080037bd

08004404 <__malloc_lock>:
 8004404:	4770      	bx	lr

08004406 <__malloc_unlock>:
 8004406:	4770      	bx	lr

08004408 <_free_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4605      	mov	r5, r0
 800440c:	2900      	cmp	r1, #0
 800440e:	d045      	beq.n	800449c <_free_r+0x94>
 8004410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004414:	1f0c      	subs	r4, r1, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfb8      	it	lt
 800441a:	18e4      	addlt	r4, r4, r3
 800441c:	f7ff fff2 	bl	8004404 <__malloc_lock>
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <_free_r+0x98>)
 8004422:	6813      	ldr	r3, [r2, #0]
 8004424:	4610      	mov	r0, r2
 8004426:	b933      	cbnz	r3, 8004436 <_free_r+0x2e>
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	6014      	str	r4, [r2, #0]
 800442c:	4628      	mov	r0, r5
 800442e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004432:	f7ff bfe8 	b.w	8004406 <__malloc_unlock>
 8004436:	42a3      	cmp	r3, r4
 8004438:	d90c      	bls.n	8004454 <_free_r+0x4c>
 800443a:	6821      	ldr	r1, [r4, #0]
 800443c:	1862      	adds	r2, r4, r1
 800443e:	4293      	cmp	r3, r2
 8004440:	bf04      	itt	eq
 8004442:	681a      	ldreq	r2, [r3, #0]
 8004444:	685b      	ldreq	r3, [r3, #4]
 8004446:	6063      	str	r3, [r4, #4]
 8004448:	bf04      	itt	eq
 800444a:	1852      	addeq	r2, r2, r1
 800444c:	6022      	streq	r2, [r4, #0]
 800444e:	6004      	str	r4, [r0, #0]
 8004450:	e7ec      	b.n	800442c <_free_r+0x24>
 8004452:	4613      	mov	r3, r2
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	b10a      	cbz	r2, 800445c <_free_r+0x54>
 8004458:	42a2      	cmp	r2, r4
 800445a:	d9fa      	bls.n	8004452 <_free_r+0x4a>
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	1858      	adds	r0, r3, r1
 8004460:	42a0      	cmp	r0, r4
 8004462:	d10b      	bne.n	800447c <_free_r+0x74>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	4401      	add	r1, r0
 8004468:	1858      	adds	r0, r3, r1
 800446a:	4282      	cmp	r2, r0
 800446c:	6019      	str	r1, [r3, #0]
 800446e:	d1dd      	bne.n	800442c <_free_r+0x24>
 8004470:	6810      	ldr	r0, [r2, #0]
 8004472:	6852      	ldr	r2, [r2, #4]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	4401      	add	r1, r0
 8004478:	6019      	str	r1, [r3, #0]
 800447a:	e7d7      	b.n	800442c <_free_r+0x24>
 800447c:	d902      	bls.n	8004484 <_free_r+0x7c>
 800447e:	230c      	movs	r3, #12
 8004480:	602b      	str	r3, [r5, #0]
 8004482:	e7d3      	b.n	800442c <_free_r+0x24>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	1821      	adds	r1, r4, r0
 8004488:	428a      	cmp	r2, r1
 800448a:	bf04      	itt	eq
 800448c:	6811      	ldreq	r1, [r2, #0]
 800448e:	6852      	ldreq	r2, [r2, #4]
 8004490:	6062      	str	r2, [r4, #4]
 8004492:	bf04      	itt	eq
 8004494:	1809      	addeq	r1, r1, r0
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	605c      	str	r4, [r3, #4]
 800449a:	e7c7      	b.n	800442c <_free_r+0x24>
 800449c:	bd38      	pop	{r3, r4, r5, pc}
 800449e:	bf00      	nop
 80044a0:	20002c6c 	.word	0x20002c6c

080044a4 <_read_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4c07      	ldr	r4, [pc, #28]	; (80044c4 <_read_r+0x20>)
 80044a8:	4605      	mov	r5, r0
 80044aa:	4608      	mov	r0, r1
 80044ac:	4611      	mov	r1, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fe f81e 	bl	80024f4 <_read>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_read_r+0x1e>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_read_r+0x1e>
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20002d14 	.word	0x20002d14

080044c8 <_fstat_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4c07      	ldr	r4, [pc, #28]	; (80044e8 <_fstat_r+0x20>)
 80044cc:	2300      	movs	r3, #0
 80044ce:	4605      	mov	r5, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	f7fe f81f 	bl	8002518 <_fstat>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d102      	bne.n	80044e4 <_fstat_r+0x1c>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	b103      	cbz	r3, 80044e4 <_fstat_r+0x1c>
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	bf00      	nop
 80044e8:	20002d14 	.word	0x20002d14

080044ec <_isatty_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4c06      	ldr	r4, [pc, #24]	; (8004508 <_isatty_r+0x1c>)
 80044f0:	2300      	movs	r3, #0
 80044f2:	4605      	mov	r5, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	f7fe f814 	bl	8002524 <_isatty>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_isatty_r+0x1a>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	b103      	cbz	r3, 8004506 <_isatty_r+0x1a>
 8004504:	602b      	str	r3, [r5, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20002d14 	.word	0x20002d14

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
